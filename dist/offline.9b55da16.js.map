{"version":3,"sources":["offline-sprite-definitions.js","offline.js"],"names":["GAME_TYPE","ObstacleType","Runner_spriteDefinitionByType","original","LDPI","BACKGROUND_EL","x","y","CACTUS_LARGE","CACTUS_SMALL","OBSTACLE_2","OBSTACLE","CLOUD","HORIZON","MOON","PTERODACTYL","RESTART","TEXT_SPRITE","TREX","STAR","COLLECTABLE","ALT_GAME_END","HDPI","MAX_GAP_COEFFICIENT","MAX_OBSTACLE_LENGTH","HAS_CLOUDS","BOTTOM_PAD","WAITING_1","w","h","xOffset","WAITING_2","RUNNING_1","RUNNING_2","JUMPING","CRASHED","COLLISION_BOXES","CollisionBox","OBSTACLES","type","width","height","yPos","multipleSpeed","minGap","minSpeed","collisionBoxes","yPosMobile","numFrames","frameRate","speedOffset","HEIGHT","MAX_CLOUD_GAP","MAX_SKY_LEVEL","MIN_CLOUD_GAP","MIN_SKY_LEVEL","OFFSET","WIDTH","X_POS","Y_POS","BACKGROUND_EL_CONFIG","MAX_BG_ELS","MAX_GAP","MIN_GAP","POS","SPEED","LINES","SOURCE_X","SOURCE_Y","YPOS","Runner","outerContainerId","opt_config","console","log","instance_","outerContainerEl","document","querySelector","containerEl","snackbarEl","touchController","config","Object","assign","normalConfig","dimensions","defaultDimensions","gameType","spriteDefinition","altGameImageSprite","altGameModeActive","altGameModeFlashTimer","fadeInTimer","canvas","canvasCtx","tRex","distanceMeter","distanceRan","highestScore","syncHighestScore","time","runningTime","msPerFrame","FPS","currentSpeed","slowDown","obstacles","activated","playing","crashed","paused","inverted","invertTimer","resizeTimerId_","playCount","audioBuffer","soundFx","generatedSoundFx","audioContext","images","imagesLoaded","pollingGamepads","gamepadIndex","undefined","previousGamepad","isDisabled","setupDisabledRunner","isAltGameModeEnabled","initAltGameType","loadImages","window","initializeHighScore","bind","DEFAULT_WIDTH","IS_HIDPI","devicePixelRatio","IS_IOS","test","navigator","userAgent","IS_MOBILE","IS_RTL","dir","ARCADE_MODE_URL","RESOURCE_POSTFIX","A11Y_STRINGS","ariaLabel","description","gameOver","highScore","jump","started","speedLabel","AUDIOCUE_PROXIMITY_THRESHOLD","AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y","BG_CLOUD_SPEED","CANVAS_IN_VIEW_OFFSET","CLEAR_TIME","CLOUD_FREQUENCY","FADE_DURATION","FLASH_DURATION","GAMEOVER_CLEAR_TIME","INITIAL_JUMP_VELOCITY","INVERT_FADE_DURATION","MAX_BLINK_COUNT","MAX_CLOUDS","MAX_OBSTACLE_DUPLICATION","RESOURCE_TEMPLATE_ID","SPEED_DROP_COEFFICIENT","ARCADE_MODE_INITIAL_TOP_POSITION","ARCADE_MODE_TOP_POSITION_PERCENT","ACCELERATION","GAP_COEFFICIENT","INVERT_DISTANCE","MAX_SPEED","MOBILE_SPEED_COEFFICIENT","slowConfig","classes","ARCADE_MODE","CANVAS","CONTAINER","ICON","INVERTED","SNACKBAR","SNACKBAR_SHOW","TOUCH_CONTROLLER","sounds","BUTTON_PRESS","HIT","SCORE","keycodes","JUMP","DUCK","events","ANIM_END","CLICK","KEYDOWN","KEYUP","POINTERDOWN","POINTERUP","RESIZE","TOUCHEND","TOUCHSTART","VISIBILITY","BLUR","FOCUS","LOAD","GAMEPADCONNECTED","prototype","length","createElement","className","appendChild","addEventListener","e","keyCode","classList","add","updateConfigSetting","setting","value","setJumpVelocity","setSpeed","createImageElement","resourceName","imgSrc","el","id","src","getElementById","scale","spriteDef","imageSprite","altCommonImageSprite","origImageSprite","complete","init","loadSounds","AudioContext","resourceTemplate","content","sound","soundSrc","substr","indexOf","buffer","decodeBase64ToArrayBuffer","decodeAudioData","index","audioData","opt_speed","speed","mobileSpeed","style","visibility","adjustDimensions","getA11yString","setAttribute","createCanvas","a11yStatusEl","textContent","slowSpeedCheckboxLabel","slowSpeedCheckbox","slowSpeedToggleEl","announcePhrase","GeneratedSoundFx","getContext","fillStyle","fill","updateCanvasScaling","horizon","Horizon","DistanceMeter","Trex","startListening","update","debounceResize","darkModeMediaQuery","matchMedia","isDarkMode","matches","addListener","createTouchController","setInterval","clearInterval","boxStyles","getComputedStyle","padding","Number","paddingLeft","offsetWidth","isArcadeMode","Math","min","setArcadeModeContainerScale","calcXPos","clearCanvas","ceil","stop","draw","gameOverPanel","updateDimensions","playIntro","playingIntro","keyframes","styleSheets","insertRule","startGame","webkitAnimation","setPlayStatus","restart","setArcadeMode","toggleSpeed","background","audioCues","onVisibilityChange","clearRect","isCanvasInView","getBoundingClientRect","top","enableAltGameMode","updatePending","now","getTimeStamp","deltaTime","setFlashing","globalAlpha","jumping","updateJump","hasObstacles","jumpCount","showNightMode","collision","checkForCollision","jumpObstacle","typeConfig","jumpAlerted","threshold","isMobileMouseInput","adjProximityThreshold","log10","xPos","removeFirstObstacle","collect","playAchievementSound","playSound","invertTrigger","invert","actualDistance","getActualDistance","blinkCount","scheduleNextUpdate","handleEvent","evtType","onKeyDown","onKeyUp","onGamepadConnected","handleCanvasKeyPress","preventScrolling","preventDefault","speedChange","checked","updatedConfig","enableSlowConfig","adjustObstacleSpeed","disableSpeedToggle","showSpeedToggle","isFocusEvent","toggle","HIDDEN_CLASS","disable","removeAttribute","stopListening","removeEventListener","target","pointerType","activeElement","errorPageController","trackEasterEgg","ducking","cancelFootSteps","startJump","setSpeedDrop","setDuck","String","isjumpKey","isRunning","endJump","speedDrop","isLeftClickOnCanvas","handleGameOverClicks","reset","play","pollGamepadState","gamepads","getGamepads","pollActiveGamepad","requestAnimationFrame","pollForActiveGamepad","i","buttons","pressed","gamepad","pollGamepadButton","buttonIndex","state","previousState","KeyboardEvent","dispatchEvent","hasClickedOnHighScore","isHighScoreFlashing","saveHighScore","resetHighScore","startHighScoreFlashing","cancelHighScoreFlashing","button","raqId","updateEasterEggHighScore","setHighScore","opt_resetScore","resetEasterEggHighScore","vibrate","achievement","status","origSpriteDef","GameOverPanel","innerHTML","toString","stopAll","replace","cancelAnimationFrame","RUNNING","remove","flashTimer","isPlaying","title","body","windowHeight","innerHeight","scaleHeight","scaleWidth","innerWidth","max","scaledCanvasHeight","translateY","cssScale","transform","hidden","webkitHidden","visibilityState","soundBuffer","sourceNode","createBufferSource","connect","destination","start","htmlEl","firstElementChild","opt_width","opt_height","context","floor","backingStoreRatio","webkitBackingStorePixelRatio","ratio","oldWidth","oldHeight","panner","webkitAudioContext","onstatechange","resume","createStereoPanner","playNote","frequency","startTime","duration","opt_vol","opt_pan","osc1","createOscillator","osc2","volume","createGain","gain","pan","setValueAtTime","linearRampToValueAtTime","currentTime","loopFootSteps","bgSoundIntervalId","speakPhrase","phrase","msg","SpeechSynthesisUtterance","voices","speechSynthesis","getVoices","text","speak","stringName","getRandomNum","random","container","opt_classname","base64String","len","str","atob","arrayBuffer","ArrayBuffer","bytes","Uint8Array","charCodeAt","Date","getTime","performance","textImgPos","restartImgPos","opt_altGameEndImgPos","opt_altGameActive","canvasDimensions","altGameEndImgPos","frameTimeStamp","animTimer","currentFrame","gameOverRafId","flashCounter","originalText","RESTART_ANIM_DURATION","LOGO_PAUSE_DURATION","FLASH_ITERATIONS","animConfig","frames","TEXT_X","TEXT_Y","TEXT_WIDTH","TEXT_HEIGHT","RESTART_WIDTH","RESTART_HEIGHT","drawGameOverText","opt_useAltText","centerX","textSourceX","textSourceY","textSourceWidth","textSourceHeight","textTargetX","round","textTargetY","textTargetWidth","textTargetHeight","spriteSource","save","translate","drawImage","restore","drawAltGameElements","ALT_GAME_END_CONFIG","altGameEndConfig","altGameEndSourceWidth","altGameEndSourceHeight","altGameEndTargetX","X_OFFSET","altGameEndTargetY","Y_OFFSET","drawRestartButton","framePosX","restartSourceWidth","restartSourceHeight","restartTargetX","restartTargetY","opt_altGameModeActive","opt_tRex","ALT_GAME_OVER_TEXT_CONFIG","altTextConfig","clearGameOverTextBounds","obstacle","opt_canvasCtx","obstacleBoxXPos","tRexBox","obstacleBox","size","drawCollisionBoxes","boxCompare","tRexCollisionBoxes","DUCKING","t","adjTrexBox","createAdjustedCollisionBox","adjObstacleBox","box","adjustment","strokeStyle","strokeRect","tRexBoxX","tRexBoxY","obstacleBoxX","obstacleBoxY","Obstacle","spriteImgPos","gapCoefficient","opt_xOffset","opt_isAltGameMode","spritePos","gap","timer","cloneCollisionBoxes","Array","isArray","yPosConfig","getGap","sourceWidth","sourceHeight","sourceX","isVisible","maxGap","xInitialPos","groundYPos","currentAnimFrames","blinkDelay","animStartTime","normalJumpConfig","WAITING","jumpVelocity","reachedMinHeight","jumpspotX","altGameModeEnabled","flashing","DROP_VELOCITY","FLASH_OFF","FLASH_ON","HEIGHT_DUCK","INTRO_DURATION","SPRITE_WIDTH","START_X_POS","WIDTH_DUCK","slowJumpConfig","GRAVITY","MAX_JUMP_HEIGHT","MIN_JUMP_HEIGHT","BLINK_TIMING","animFrames","minJumpHeight","jumpConfig","adjustAltGameConfigForSlowSpeed","WIDTH_JUMP","INVERT_JUMP","opt_gravityValue","opt_status","setBlinkDelay","blink","sourceY","outputHeight","jumpOffset","framesElapsed","isDucking","midair","canvasWidth","image","currentDistance","maxScore","digits","defaultString","flashIterations","flashingRafId","highScoreBounds","highScoreFlashing","maxScoreUnits","MAX_DISTANCE_UNITS","DEST_WIDTH","ACHIEVEMENT_DISTANCE","COEFFICIENT","HIGH_SCORE_HIT_AREA_PADDING","maxDistanceStr","parseInt","digitPos","opt_highScore","targetX","targetY","targetWidth","targetHeight","highScoreX","distance","paint","distanceStr","split","drawHighScore","highScoreStr","concat","touches","canvasBounds","clientX","left","clientY","offsetX","offsetY","getHighScoreBounds","flashHighScore","clearHighScoreBounds","rect","Cloud","containerWidth","outputWidth","BackgroundEl","switchFrames","spriteConfig","MS_PER_FRAME","FIXED","FIXED_X_POS","FIXED_Y_POS_1","FIXED_Y_POS_2","NightMode","currentPhase","opacity","stars","drawStars","placeStars","FADE_SPEED","MOON_SPEED","NUM_STARS","STAR_SIZE","STAR_SPEED","STAR_MAX_Y","phases","updateXPos","currentPos","moonSourceWidth","moonSourceHeight","moonSourceX","moonOutputWidth","starSize","starSourceX","segmentSize","HorizonLine","lineConfig","sourceDimensions","sourceXPos","bumpThreshold","setSourceDimensions","newDimensions","dimension","getRandomType","pos","increment","line1","line2","obstacleHistory","horizonOffsets","cloudFrequency","nightMode","clouds","cloudSpeed","backgroundEls","lastEl","backgroundSpeed","horizonLine","horizonLines","BUMPY_THRESHOLD","HORIZON_HEIGHT","types","addCloud","push","updateObstacles","updateBackgroundEls","updateClouds","updateBackgroundEl","elSpeed","bgElArray","maxBgEl","bgElAddFunction","numElements","filter","obj","addBackgroundEl","updatedObstacles","slice","shift","lastObstacle","followingObstacleCreated","addNewObstacle","obstacleCount","obstacleTypeIndex","obstacleType","duplicateObstacleCheck","obstacleSpritePos","unshift","splice","nextObstacleType","duplicateCount","l","resize","backgroundElTypes","keys"],"mappings":";;;;;;;AAIA;ACAA;ADJA;AACA;AACA;ACIA;ADAA;;;AAGA,IAAMA,SAAS,GAAG,EAAlB;AAEA;;;ACGQ,SAASsE,MAAT,CAAgBC,gBAAhB,EAAkCC,UAAlC,EAA8C;AAClD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;;AACA,MAAIJ,MAAM,CAACK,SAAX,EAAsB;AACpB,WAAOL,MAAM,CAACK,SAAd;AACD;;AACDL,EAAAA,MAAM,CAACK,SAAP,GAAmB,IAAnB;AAEA,OAAKC,gBAAL,GAAwBC,QAAQ,CAACC,aAAT,CAAuBP,gBAAvB,CAAxB;AACA,OAAKQ,WAAL,GAAmB,IAAnB;AACA,OAAKC,UAAL,GAAkB,IAAlB,CAVkD,CAWlD;;AACA,OAAKC,eAAL,GAAuB,IAAvB;AAEA,OAAKC,MAAL,GAAcV,UAAU,IAAIW,MAAM,CAACC,MAAP,CAAcd,MAAM,CAACY,MAArB,EAA6BZ,MAAM,CAACe,YAApC,CAA5B,CAdkD,CAelD;;ADAJ,ACCI,IDDApF,GCCKqF,SDDT,CCCI,GAAkBhB,MAAM,CAACiB,iBAAzB;ADCJ,ACCI,OAAKC,QAAL,GAAgB,IAAhB;AACAlB,EAAAA,MAAM,CAACmB,gBAAP,GAA0BvF,wDAA8B,UAA9B,CAA1B;AAEA,OAAKwF,kBAAL,GAA0B,IAA1B;AACA,OAAKC,iBAAL,GAAyB,KAAzB;ADFG,ACGH,IDHSzF,GCGJ0F,qBAAL,GAA6B,EDHS,ECGtC,CDHyC;AAC3CzF,ACGE,EDHFA,KCGO0F,GDHC,EAAE,MCGR,GAAmB,CAAnB;ADFAzF,ACIA,IDJAA,GCIK0F,CDJD,EAAE,GCIN,GAAc,IAAd;ADHEzF,ACIF,MDJEA,CCIG0F,SAAL,GDJe,ACIE,EDJA,ECIjB;ADJkBzF,ACMlB,OAAK0F,CDNa1F,CAAC,EAAE,ACMrB,EDNiB,CCML,IAAZ;ADNyBC,ACQzB,OAAK0F,CDRoB1F,CAAC,EAAE,SCQ5B,GAAqB,IAArB;ADRiB,ACSjB,ODVM,ACUD2F,WAAL,GAAmB,CAAnB;ADRE1F,ACUF,MDVEA,CCUG2F,WDVS,CCUd,CDVgB,ECUI,CAApB;ADViB7F,ACWjB,OAAK8F,CDXY9F,CAAC,EAAE,GAAJ,SCWhB,GAAwB,KAAxB;ADXyBC,ACazB,OAAK8F,CDboB9F,CAAC,EAAE,ACa5B,GAAY,CAAZ;ADbgB,ACchB,ODhBM,ACgBD+F,WAAL,GAAmB,CAAnB;ADbE7F,ACcF,MDdEA,CCcG8F,UAAL,CDdc,EAAE,ACcE,OAAOC,GAAzB;ADdiBlG,ACejB,OAAKmG,CDfYnG,CAAC,EAAE,GAAJ,KCehB,GAAoB,KAAK4E,MAAL,CAAYjB,KAAhC;ADfyB1D,ACgBzB+D,EAAAA,MDhByB/D,ACgBnB,CDhBoB,ACgBnBmG,EDhBqB,MCgB5B,GAAkB,KAAlB;ADhBgB,ACkBhB,ODrBM,ACqBDC,SAAL,GAAiB,EAAjB;ADjBEjG,ACmBF,MDnBEA,CCmBGkG,SDnBO,ACmBZ,EDnBc,CCmBG,KAAjB,CA7CkD,CA6C1B;ADnBTtG,QAAAA,CAAC,EAAE,GAAJ;AAASC,ACoBvB,OAAKsG,CDpBkBtG,CAAC,EAAE,GCoB1B,GAAe,KAAf,CA9CkD,CA8C5B;ADpBR,OAJR;AAKJI,ACoBF,MDpBEA,CCoBGmG,ODpBK,ACoBV,EDpBY,CCoBG,KAAf;ADpBaxG,ACqBb,OAAKyG,CDrBQzG,CAAC,EAAE,ECqBhB,CDrBY,ECqBE,KAAd;ADrBqBC,ACsBrB,OAAKyG,CDtBgBzG,CAAC,EAAE,ICsBxB,GAAgB,KAAhB;ADtBY,ACuBZ,OD5BM,AC4BD0G,WAAL,GAAmB,CAAnB;ADtBErG,ACuBF,MDvBEA,CCuBGsG,IDvBE,EAAE,QCuBT,GAAsB,IAAtB;ADvBU5G,ACyBV,OAAK6G,CDzBK7G,CAAC,EAAE,EAAJ,GCyBT,GAAiB,CAAjB,CArDkD,CAuDlD;AD3BiBC,QAAAA,CAAC,EAAE;AAAX,AC4BT,ODlCM,ACkCD6G,WAAL,GAAmB,IAAnB;AD3BEvG,AC6BF,MD7BEA,OAAO,EAAE;AAACP,QAAAA,CAAC,EAAE,CAAJ;AAAOC,AC8BlB,OAAK8G,CD9Ba9G,CAAC,EAAE,GC8BrB,GAAe,EAAf;AD9BW,AC+BX,ODtCM,ACsCD+G,gBAAL,GAAwB,IAAxB,CA5DkD,CA8DlD;ADhCExG,MAAAA,IAAI,EAAE;AAACR,ACiCT,OAAKiH,CDjCIjH,CAAC,EAAE,GAAJ,KCiCR,GAAoB,IAApB,CA/DkD,CAiElD;ADnCiBC,QAAAA,CAAC,EAAE;AAAZ,ACoCR,OD5CM,AC4CDiH,MAAL,GAAc,EAAd;ADnCEzG,ACoCF,MDpCEA,CCoCG0G,UDpCQ,EAAE,ACoCf,GAAoB,CAApB,CAnEkD,CAqElD;ADtCgBnH,QAAAA,CAAC,EAAE,GAAJ;AAASC,ACuCxB,OAAKmH,CDvCmBnH,CAAC,EAAE,WCuC3B,GAAuB,KAAvB;ADvCe,ACwCf,ODjDM,ACiDDoH,YAAL,GAAoBC,SAApB;ADvCE5G,ACwCF,MDxCEA,CCwCG6G,MDxCI,EAAE,OCwCX,GAAuB,IAAvB;ADxCYvH,QAAAA,CAAC,EAAE,CAAJ;AAAOC,AC0ClB,MAAI,ED1CcA,CAAC,EAAE,AC0CZuH,UAAL,EAAJ,EAAuB;AD1CZ,AC2CT,ODrDI,ECqDCC,mBAAL;AD1CA9G,AC2CD,GAFD,GDzCEA,GC2CK,QD3CM,EAAE;AAACX,AC4Cd,QD5CcA,AC4CVgE,CD5CW,EAAE,GAAJ,AC4CH,CAAC0D,oBAAP,EAAJ,EAAmC;AD5CbzH,AC6CpB,QD7CoBA,CAAC,EAAE,AC6ClB0H,eAAL;AD7CW,AC8CX3D,MAAAA,CDzDE,KCyDI,CAACkB,QAAP,GAAkB,KAAKA,QAAvB;AD7CFtE,AC8CC,MD9CDA,IAAI,EAAE;AAACZ,QAAAA,CAAC,EAAE,GAAJ;AAASC,AC+Cf,QD/CeA,CAAC,AC+CX2H,ED/Ca,QC+ClB;AD/CM,ACiDNC,IAAAA,GD7DI,GC6DE,CAAC,8BAAD,CAAN,GACI,KAAKC,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CADJ;ADhDAlH,ACkDD,MDlDCA,IAAI,EAAE;AAACb,ACmDV,QDnDUA,CAAC,EAAE,GAAJ;AAASC,ACqDnB,QDrDmBA,CAAC,EAAE;AAAZ,OAbF;AAcJa,MAAAA,WAAW,EAAE;AAACd,QAAAA,CAAC,EAAE,CAAJ;AAAOC,QAAAA,CAAC,EAAE;AAAV,OAdT;AAeJc,ACuDJ,IAAMiH,EDvDFjH,WCuDe,CDvDH,EAAE,ACuDI,GAAtB;ADvDmBf,ACyDnB,QDzDmBA,CAAC,EAAE,GAAJ;AAASC,QAAAA,CAAC,EAAE;AAAZ;AAfV,KADE;AAkBRe,IAAAA,IAAI,EAAE;AACJjB,AC0DJ,IAAMmG,ED1DFnG,CC0DK,GAAG,EAAZ,OD1DiB,EAAE;AAACC,AC4DpB,QD5DoBA,CAAC,EAAE,GAAJ;AAASC,QAAAA,CAAC,EAAE;AAAZ,AC6DnB,IAAMgI,GD9DE,KC8DM,GAAGJ,MAAM,CAACK,gBAAP,GAA0B,CAA3C;AD5DIhI,AC8DJ,MD9DIA,YAAY,EAAE;AAACF,QAAAA,CAAC,EAAE,GAAJ;AAASC,AC+D3B,IAAMkI,ID/DqBlI,CAAC,CC+DhB,CD/DkB,EC+Df,QAAQmI,IAAR,CAAaP,MAAM,CAACQ,SAAP,CAAiBC,SAA9B,CAAf;AD/DkB,ACiElB,ODnEQ;AAGJnI,MAAAA,YAAY,EAAE;AAACH,ACiEnB,IAAMuI,IDjEavI,CAAC,EAAE,ECiEP,CDjEG,ECiEA,UAAUoI,IAAV,CAAeP,MAAM,CAACQ,SAAP,CAAiBC,SAAhC,KAA8CH,MAAhE;ADjE2BlI,ACmE3B,QDnE2BA,CAAC,EAAE;AAAZ,OAHV;AAIJG,ACmEJ,IAAMoI,EDnEFpI,ICmEQ,GAAGmE,GDnED,EAAE,GCmEO,CAACC,aAAT,CAAuB,MAAvB,EAA+BiE,GAA/B,IAAsC,KAArD;ADnEiBzI,ACqEjB,QDrEiBA,CAAC,EAAE,GAAJ;AAASC,QAAAA,CAAC,EAAE;AAAZ,ACsEhB,IAAMyI,GD1EE,YC0Ea,GAAG,gBAAxB;ADrEIrI,ACuEJ,MDvEIA,QAAQ,EAAE;AAACL,QAAAA,CAAC,EAAE,GAAJ;AAASC,ACwEvB,IAAM0I,IDxEiB1I,CAAC,EAAE,SCwEJ,GAAG,oBAAzB;ADxEc,AC0Ed,OD/EQ;AAMJK,MAAAA,KAAK,EAAE;AAACN,AC0EZ,IAAM4I,ID1EM5I,CAAC,EAAE,GAAJ,EC0EO,GAAG;AD1EDC,AC2ElB4I,EAAAA,MD3EkB5I,CAAC,EAAE,AC2EZ,EAAE,uBADQ;AD1EV,AC4ET6I,EAAAA,KDlFM,MCkFK,EAAE,yBAFM;ADzEjBvI,AC4EFwI,EAAAA,ID5EExI,IC4EM,EAAE,CD5ED,EAAE,mBCyEQ;ADzEPP,AC6EZgJ,EAAAA,MD7EYhJ,CAAC,EAAE,AC6EN,CD7EE,CC6EA,uBAJQ;ADzEDC,AC8ElBgJ,EAAAA,IAAI,ED9EchJ,AC8EZ,CD9Ea,EAAE,eCyEF;ADzER,AC+EXiJ,EAAAA,KDtFM,ECsFC,EAAE,uBANU;ADxEjB1I,AC+EF2I,EAAAA,ID/EE3I,IAAI,EAAE,AC+EE,EAAE;AD/EHR,ACwEU,CAArB,ODxEWA,CAAC,EAAE,GAAJ;AAASC,ACkFnB,QDlFmBA,CAAC,EAAE;AAAZ,OARF;AASJQ,MAAAA,WAAW,EAAE;AAACT,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,CAAC,EAAE;AAAZ,OATT;AAUJS,ACqFJsD,MDrFItD,ACqFE,CAACkE,MDrFI,ACqFX,EDrFa,CCqFG;ADrFF5E,ACsFZoJ,EAAAA,MDtFYpJ,CAAC,EAAE,CAAJ,kBCsFiB,EAAE,GADhB;ADrFIC,ACuFlBoJ,EAAAA,MDvFkBpJ,CAAC,EAAE,+BCuFmB,EAAE,GAF5B;ADrFH,ACwFXqJ,EAAAA,KDlGM,SCkGQ,EAAE,GAHF;ADpFZ3I,ACwFFS,EAAAA,IDxFET,MCwFQ,EAAE,EAJE,CDpFD,EAAE;AAACX,ACyFhB,QDzFgBA,CAAC,EAAE,IAAJ;AAAUC,AC0FzBsJ,EAAAA,MD1FyBtJ,CAAC,EAAE,YC0FP,EAAE,CAAC,EANV;ADpFC,AC2FfuJ,EAAAA,KDtGM,KCsGI,EAAE,IAPE;ADnFZ5I,AC2FF6I,EAAAA,ID3FE7I,IAAI,EAAE,KC2FO,EAAE,GARH;ADnFLZ,AC4FT0J,EAAAA,MD5FS1J,CAAC,EAAE,IAAJ,AC4FK,EAAE,CATD;ADnFIC,AC6FlB0J,EAAAA,MD7FkB1J,CAAC,EAAE,KC6FP,EAAE,IAVF;ADnFN,AC8FR2J,EAAAA,KD1GM,cC0Ga,EAAE,IAXP;ADlFZ/I,AC8FFgJ,EAAAA,ID9FEhJ,IAAI,EAAE,WC8Fa,EAAE,EAZT;ADlFLb,AC+FT8J,EAAAA,MD/FS9J,CAAC,EAAE,IAAJ,OC+FY,EAAE,KAbR;ADlFIC,ACgGlB8J,EAAAA,MDhGkB9J,CAAC,EAAE,MCgGN,EAAE,CAdH;ADlFN,ACiGR+J,EAAAA,KD9GM,KC8GI,EAAE,CAfE;ADjFZlJ,ACiGFI,EAAAA,IDjGEJ,WAAW,EAAE,ECiGI,EAAE,CAhBP;ADjFEd,ACkGhBiK,EAAAA,MDlGgBjK,CAAC,EAAE,CAAJ,cCkGS,EAAE,CAjBZ;ADjFQC,ACmGtBiK,EAAAA,MDnGsBjK,CAAC,EAAE,WCmGL,EAAE,iBAlBR;ADjFC,ACoGf0D,EAAAA,KDlHM,ACkHD,EAAE,CAnBO;ADhFZ5C,ACoGFoJ,EAAAA,IDpGEpJ,YAAY,EAAE,ICoGM,EAAE,CApBV;ADhFGf,ACqGjBoK,EAAAA,MDrGiBpK,CAAC,EAAE,GAAJ,oBCqGgB,EAAE,EArBpB;ADhFWC,ACsGzBoK,EAAAA,MDtGyBpK,CAAC,EAAE,uBCsGI,EAAE;ADtGlB,ACgFF,CAAhB;AD/FQ,ACwHR+D,KD1IU,CC0IJ,CAACe,YAAP,GAAsB;ADvGpB9D,ACwGAqJ,EAAAA,EDxGArJ,UCwGY,EAAE,KADM,EDvGD,EAAE,GAnCb;AAoCRC,ACwGAkI,EAAAA,EDxGAlI,mBAAmB,EAAE,CApCb,IC4IoB,EAAE,GAFV;ADrGpBC,ACwGAkI,EAAAA,EDxGAlI,UAAU,EAAE,CArCJ,yBC6IgC,EAAE,GAHtB;ADpGpBC,ACwGAmJ,EAAAA,EDxGAnJ,UAAU,EAAE,CCwGG,CD9IP,CC8IS,GAJG;ADnGpBR,ACwGA4J,EAAAA,EDxGA5J,IAAI,EAAE,OCwGS,EAAE,GALG;ADlGlBS,ACwGFoJ,EAAAA,IDxGEpJ,KCwGO,EAAE,EDxGA,ACkGS,EDlGP;AAACrB,ACyGd0K,EAAAA,MDzGc1K,CAAC,EAAE,EAAJ,aCyGW,EAAE,GAPN;ADlGCsB,AC0GrBqC,EAAAA,KAAK,CD1GgBrC,CAAC,AC0Gf,ED1GiB,EAAX;AAAeC,ACkGR,CAAtB,ODlG8BA,CAAC,EAAE,EAAlB;AAAsBC,AC8GrCwC,MAAM,CAAC2G,CD9G8BnJ,OAAO,EAAE,AC8G9C,GAAoB;AD9GL,AC+Gb8I,EAAAA,KDhHM,OCgHM,EAAE,MADI;AD7GhB7I,AC+GF2H,EAAAA,ID/GE3H,SAAS,EAAE,aC+Ge,EAAE,GAFZ;AD7GJzB,ACgHdqJ,EAAAA,MDhHcrJ,CAAC,EAAE,CAAJ,8BCgH2B,EAAE,GAHxB;AD7GEsB,ACiHpBiJ,EAAAA,MDjHoBjJ,CAAC,EAAE,EAAV,ICiHE,EAAE,GAJC;AD7GSC,ACkH3BiJ,EAAAA,MDlH2BjJ,CAAC,EAAE,EAAjB,ICkHE,EAAE,GALC;AD7GgBC,ACmHlCiJ,EAAAA,MDnHkCjJ,GCmHzB,EAAE,CANO,CD7GuB,EAAE;AAA9B,ACoHbkJ,EAAAA,KDtHM,mBCsHkB,EAAE,GAPR;AD5GhBhJ,ACoHFiC,EAAAA,IDpHEjC,CCoHG,EAAE,MDpHI,EAAE;AAAC1B,AC4GI,CAApB,OD5GgBA,CAAC,EAAE,EAAJ;AAAQsB,ACwHvB,QDxHuBA,CAAC,EAAE,EAAX;AAAeC,QAAAA,CAAC,EAAE,EAAlB;AAAsBC,QAAAA,OAAO,EAAE;AAA/B,OAHP;AAIJG,AC0HJqC,MD1HIrC,AC0HE,CAACsD,QD1HM,EAAE,OC0Hf,GAA2B;AD1HXjF,AC2HdmD,EAAAA,KAAK,CD3HSnD,CAAC,AC2HRgI,ED3HU,GAAJ,QC0HY;AD1HH1G,AC4HtBuB,EAAAA,MD5HsBvB,AC4HhB,CD5HiB,CC4Hf,CD5HiB,EAAZ;AAAgBC,AC0HJ,CAA3B,OD1H+BA,CAAC,EAAE,EAAnB;AAAuBC,ACgItC,QDhIsCA,OAAO,EAAE;AAAhC,OAJP;AAKJI,MAAAA,OAAO,EAAE;AAAC5B,QAAAA,CAAC,EAAE,CAAJ;AAAOsB,QAAAA,CAAC,EAAE,EAAV;AAAcC,ACmI3ByC,MAAM,CAAC4G,CDnIoBrJ,CAAC,EAAE,EAAjB,CCmIb,GAAiB;ADnIiBC,ACoIhCqJ,EAAAA,MDpIgCrJ,KCoIrB,EDpI4B,ACoI1B,EDpI4B,WCmI1B;ADnIJ,ACqIXsJ,EAAAA,KD1IM,CC0IA,EAAE,eAFO;ADlIbjJ,ACqIFkJ,EAAAA,IDrIElJ,KCqIO,EDrIA,ACqIE,EDrIA,gBCkII;ADlIH7B,ACsIZ6B,EAAAA,MDtIY7B,CAAC,ACsIN,EDtIQ,ACsIN,GDtIE,MCkII;ADlIKsB,ACuIpB0J,EAAAA,IAAI,EDvIgB1J,ACuId,CDvIe,EAAE,EAAZ,SCkII;ADlIYC,ACwI3B0J,EAAAA,MDxI2B1J,CAAC,CCwIpB,CDxIsB,CCwIpB,CDxIC,SCkII;ADlImBC,ACyIlC0J,EAAAA,MDzIkC1J,ECyI1B,EAAE,GDzI+B,EAAE,KCkI5B;ADlIJ,AC0IX2J,EAAAA,KDhJM,QCgJO,EAAE,eARA;ADjIbrJ,AC0IFsJ,EAAAA,ID1IEtJ,YC0Ic,EAAE,CD1ID,EAAE,CACf,IAAIC,qBAAJ,CAAiB,EAAjB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,EAA5B,CADe,EACkB,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CADlB,EAEf,IAAIA,qBAAJ,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,CAFe,EAEkB,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAFlB,EAGf,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAHe,EAGiB,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAHjB;AAPb,ACwIS,CAAjB,ID/KU;AC4LV;ADxIE;AACAC,IAAAA,SAAS,EAAE,CACT;AACEC,MAAAA,IAAI,EAAE,cADR;AAEEC,MAAAA,KAAK,EAAE,EAFT;AAGEC,ACuIN6B,MDvIM7B,ACuIA,CAACkJ,KDvIK,CCuIZ,CDvIc,EAHV,AC0IY;ADtIVjJ,ACuIJkJ,EAAAA,IDvIIlJ,IAAI,EAAE,ECuIE,CD3IV,CC2IY,qBADA;ADrIVC,ACuIJkJ,EAAAA,GAAG,CDvIClJ,CCuIC,YDvIY,EAAE,CALjB,IC0IY;ADpIVC,ACuIJkJ,EAAAA,IDvIIlJ,CCuIC,EAAE,GDvIG,EAAE,GANV;AAOEC,ACmIU,CAAhB,KDnIMA,QAAQ,EAAE,CAPZ;AAQEC,ACyIN,MDzIMA,cAAc,EAAE,CACd,IAAIT,qBAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,EAA1B,CADc,EACiB,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,EAA1B,CADjB,EAEd,IAAIA,qBAAJ,CAAiB,EAAjB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,EAA3B,CAFc;AARlB,KADS,EAcT;AACEE,MAAAA,IAAI,EAAE,cADR;AAEEC,MAAAA,KAAK,EAAE,EAFT;AAGEC,MAAAA,MAAM,EAAE,EAHV;AAIEC,ACoIN4B,MDpIM5B,ACoIA,CAACqJ,GDpIG,EAAE,EAJR,CCwIJ,GAAkB;ADnIZpJ,ACoIJqJ,EAAAA,IDpIIrJ,ACoIA,EAAE,WDpIW,EAAE,CALjB;AAMEC,ACmIG,MDnIHA,ICmIS,CAAP,CDnII,EAAE,GANV;AAOEC,ACkIY,MDlIZA,ICkIkB,IDlIV,EAAE,CAPZ;AAQEC,ACiIE,GADU,GDhIZA,cAAc,EAAE,CACd,IAAIT,qBAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,CAAxB,EAA2B,EAA3B,CADc,EACkB,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,EAA1B,CADlB,EAEd,IAAIA,qBAAJ,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,CAFc;AARlB,ACyIyB,KDvJhB,EA2BT;AACEE,AC4HJ0J,EAAAA,ID5HI1J,AC4HA,EAAE,ED5HE,EAAE,aADR;AAEEC,AC2HG,MD3HHA,IC2HS,CD3HJ,EAAE,EAFT;AAGEC,AC0HE,GAFU,GDxHZA,MAAM,EAAE,EAHV;AAIEC,ACyHc,MDzHdA,IAAI,EAAE,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,CAJR;AAI0B,AC0H5B1B,EAAAA,OAAO,EAAE;ADzHL+B,ACyHM,MDzHNA,ICyHY,MDzHF,EAAE,CAAC,GAAD,EAAM,EAAN,CALd;AAK0B,ACyHnB,GAHO,CAGI;ADxHhBJ,MAAAA,aAAa,EAAE,GANjB;AAOEE,ACoHY,CAAlB,KDpHMA,QAAQ,EAAE,GAPZ;AAQED,AC0HN,MD1HMA,MAAM,EAAE,GARV;AASEE,MAAAA,cAAc,EAAE,CACd,IAAIT,qBAAJ,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,CADc,EACmB,IAAIA,qBAAJ,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,CADnB,EAEd,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,CAAxB,EAA2B,CAA3B,CAFc,EAEiB,IAAIA,qBAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,CAAxB,EAA2B,CAA3B,CAFjB,EAGd,IAAIA,qBAAJ,CAAiB,EAAjB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAHc,CATlB;AAcEW,MAAAA,SAAS,EAAE,CAdb;AAeEC,MAAAA,SAAS,EAAE,OAAO,CAfpB;AAgBEC,MAAAA,WAAW,EAAE;AAhBf,ACsIJoB,KDjKa,CArDH,ACsNJ,CAAC4H,MAAP,GAAgB;ADnHd7L,ACoHA8L,EAAAA,EDpHA9L,MCoHQ,EAAE,KDpHG,EAAE,aCmHD;ADlHZ,ACoHF+L,EAAAA,KAAK,EAAE,MDpHI,CCkHG;ADjHVjJ,ACoHJkJ,EAAAA,MDpHIlJ,CCoHG,EAAE,GDpHC,EAAE,EADD,ECkHG;ADhHVC,ACoHJkJ,EAAAA,KAAK,CDpHDlJ,CCoHG,OAJO,KDhHG,EAAE,GAFR;AAGPC,ACoHJkJ,EAAAA,MDpHIlJ,KCoHO,EAAE,MDpHI,EAAE,EAHR,GCkHG;AD9GVC,ACoHJkJ,EAAAA,MDpHIlJ,GCoHK,EAAE,QDpHM,EAAE,CC8GL,EDlHH;AAKPC,ACoHJkJ,EAAAA,MDpHIlJ,ACoHE,EAAE,QAPM,GD7GG,EAAE,EALR;AAMPC,ACoHJkJ,EAAAA,MDpHIlJ,ECoHI,EAAE,EDpHA,EAAE,CAND,KCkHG;AD3GVC,ACoHJkJ,EAAAA,MDpHIlJ,ICoHM,CDpHD,CCoHG,CDpHD,EAPA,SCkHG;AD1GVC,ACoHJkJ,EAAAA,MDpHIlJ,ICoHM,CDpHD,CCoHG,CDpHD,CARA,gBCkHG;ADzGVC,ACoHJkJ,EAAAA,IAAI,EDpHAlJ,ACoHE,KDpHG,CCyGK,CDzGH;AATA,AC8HXmJ,EAAAA,KAAK,EAAE,OAZO;ADnHC,ACgIfC,EAAAA,GDnOQ,CCmOJ,EAAE,MAbQ;ADtGdnJ,ACoHAoJ,EAAAA,EDpHApJ,cCoHgB,EAAE,IDpHE,EAAE;AACpBC,ACqGY,CAAhB,KDrGIA,UAAU,EAAE,CADQ;AAEpBC,ACqHJQ,MDrHIR,ACqHE,CAACmJ,MDrHI,EAAE,CCqHb,EDvHwB,CCuHL;ADpHflJ,ACqHF,MDrHEA,OAAO,EAAE,GAHW;AAIpBC,MAAAA,GAAG,EAAE,CAJe;AAKpBC,MAAAA,KAAK,EAAE,GALa;AAMpBN,ACqHFsE,EAAAA,IDrHEtE,KAAK,EAAE,ICiHQ,6BAIC;AD3HI,AC4HpB,KD5OM,GC4OF3D,SAAS,CAACkN,MAAV,GAAmB,CAAvB,EAA0B;ADpH5BhJ,ACqHI,IDrHJA,KAAK,EAAE,CACL;AAACC,ACqHC,MDrHDA,QAAQ,EAAE,CAAX;AAAcC,ACsHZ,MDtHYA,QAAQ,EAAE,EAAxB;AAA4BX,ACuH1B,MDvH0BA,KAAK,ACuH1B+B,EDvH4B,GAAnC,GCuHE,GAAgB,EAAhB;ADvHsCrC,ACwHvC,MDxHuCA,MAAM,EAAE,EAAhD;AAAoDkB,ACyHrD,GAXgB,GD9GqCA,IAAI,EAAE;AAA1D,KADK;AAxHC,ACoPR;ADrPyC,CAAtC;;;ACyPHyD,EAAAA,UAjBiB,wBAiBJ;AACX;AACA,WAAO,KAAP;AACD,GApBgB;;AAsBjB;;;AAGAC,EAAAA,mBAzBiB,iCAyBK;AACpB,SAAKhD,WAAL,GAAmBF,QAAQ,CAACsI,aAAT,CAAuB,KAAvB,CAAnB;AACA,SAAKpI,WAAL,CAAiBqI,SAAjB,GAA6B9I,MAAM,CAAC4G,OAAP,CAAeM,QAA5C,CAFoB,CAGpB;;AACA,SAAK5G,gBAAL,CAAsByI,WAAtB,CAAkC,KAAKtI,WAAvC,EAJoB,CAMpB;;AACAF,IAAAA,QAAQ,CAACyI,gBAAT,CAA0BhJ,MAAM,CAAC4H,MAAP,CAAcG,OAAxC,EAAiD,UAASkB,CAAT,EAAY;AAC3D,UAAIjJ,MAAM,CAACyH,QAAP,CAAgBC,IAAhB,CAAqBuB,CAAC,CAACC,OAAvB,CAAJ,EAAqC;AACnC,aAAKzI,WAAL,CAAiB0I,SAAjB,CAA2BC,GAA3B,CAA+BpJ,MAAM,CAAC4G,OAAP,CAAeO,aAA9C;AACA5G,QAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgC2I,SAAhC,CAA0CC,GAA1C,CAA8C,eAA9C;AACD;AACF,KALgD,CAK/CrF,IAL+C,CAK1C,IAL0C,CAAjD;AAMD,GAtCgB;;AAwCjB;;;;;AAKAsF,EAAAA,mBA7CiB,+BA6CGC,OA7CH,EA6CYC,KA7CZ,EA6CmB;AAClC,QAAID,OAAO,IAAI,KAAK1I,MAAhB,IAA0B2I,KAAK,KAAKjG,SAAxC,EAAmD;AACjD,WAAK1C,MAAL,CAAY0I,OAAZ,IAAuBC,KAAvB;;AAEA,cAAQD,OAAR;AACE,aAAK,SAAL;AACA,aAAK,iBAAL;AACA,aAAK,wBAAL;AACE,eAAK5H,IAAL,CAAUd,MAAV,CAAiB0I,OAAjB,IAA4BC,KAA5B;AACA;;AACF,aAAK,uBAAL;AACE,eAAK7H,IAAL,CAAU8H,eAAV,CAA0BD,KAA1B;AACA;;AACF,aAAK,OAAL;AACE,eAAKE,QAAL;AAAc;AAAuBF,UAAAA,KAArC;AACA;AAXJ;AAaD;AACF,GA/DgB;;AAiEjB;;;;;AAKAG,EAAAA,kBAtEiB,8BAsEEC,YAtEF,EAsEgB;AAC/B;AACA;AACA;AACA,QAAMC,MAAM,GAAG,IAAf;;AAEA,QAAIA,MAAJ,EAAY;AACV,UAAMC,EAAE;AACJ;AAAiCtJ,MAAAA,QAAQ,CAACsI,aAAT,CAAuB,KAAvB,CADrC;AAEAgB,MAAAA,EAAE,CAACC,EAAH,GAAQH,YAAR;AACAE,MAAAA,EAAE,CAACE,GAAH,GAASH,MAAT;AACArJ,MAAAA,QAAQ,CAACyJ,cAAT,CAAwB,mBAAxB,EAA6CjB,WAA7C,CAAyDc,EAAzD;AACA,aAAOA,EAAP;AACD;;AACD,WAAO,IAAP;AACD,GArFgB;;AAuFjB;;;;AAIAjG,EAAAA,UA3FiB,wBA2FJ;AACX,QAAIqG,KAAK,GAAG,IAAZ;AACA,SAAKC,SAAL,GAAiBlK,MAAM,CAACmB,gBAAP,CAAwBrF,IAAzC;;AACA,QAAImI,QAAJ,EAAc;AACZgG,MAAAA,KAAK,GAAG,IAAR;AACA,WAAKC,SAAL,GAAiBlK,MAAM,CAACmB,gBAAP,CAAwBnE,IAAzC;AACD;;AAEDgD,IAAAA,MAAM,CAACmK,WAAP;AAAqB;AAChB5J,IAAAA,QAAQ,CAACyJ,cAAT,CAAwBrF,gBAAgB,GAAGsF,KAA3C,CADL;;AAGA,QAAI,KAAK/I,QAAT,EAAmB;AACjBlB,MAAAA,MAAM,CAACoB,kBAAP;AAA4B;AACvB,WAAKsI,kBAAL,CAAwB,yBAAyBO,KAAjD,CADL;AAEAjK,MAAAA,MAAM,CAACoK,oBAAP;AAA8B;AACzB,WAAKV,kBAAL,CAAwB,uBAAuBO,KAA/C,CADL;AAED;;AACDjK,IAAAA,MAAM,CAACqK,eAAP,GAAyBrK,MAAM,CAACmK,WAAhC,CAjBW,CAmBX;;AACA,QAAI,CAACnK,MAAM,CAACoB,kBAAR,IAA8B,CAACpB,MAAM,CAACoK,oBAA1C,EAAgE;AAC9DpK,MAAAA,MAAM,CAAC0D,oBAAP,GAA8B;AAAA,eAAM,KAAN;AAAA,OAA9B;;AACA,WAAKrC,iBAAL,GAAyB,KAAzB;AACD;;AAED,QAAIrB,MAAM,CAACmK,WAAP,CAAmBG,QAAvB,EAAiC;AAC/B,WAAKC,IAAL;AACD,KAFD,MAEO;AACL;AACAvK,MAAAA,MAAM,CAACmK,WAAP,CAAmBnB,gBAAnB,CAAoChJ,MAAM,CAAC4H,MAAP,CAAca,IAAlD,EACI,KAAK8B,IAAL,CAAUxG,IAAV,CAAe,IAAf,CADJ;AAED;AACF,GA3HgB;;AA6HjB;;;AAGAyG,EAAAA,UAhIiB,wBAgIJ;AACX,QAAI,CAACrG,MAAL,EAAa;AACX,WAAKlB,YAAL,GAAoB,IAAIwH,YAAJ,EAApB;AAEA,UAAMC,gBAAgB,GAClBnK,QAAQ,CAACyJ,cAAT,CAAwB,KAAKpJ,MAAL,CAAYsF,oBAApC,EAA0DyE,OAD9D;;AAGA,WAAK,IAAMC,KAAX,IAAoB5K,MAAM,CAACqH,MAA3B,EAAmC;AACjC,YAAIwD,QAAQ,GACRH,gBAAgB,CAACV,cAAjB,CAAgChK,MAAM,CAACqH,MAAP,CAAcuD,KAAd,CAAhC,EAAsDb,GAD1D;AAEAc,QAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgBD,QAAQ,CAACE,OAAT,CAAiB,GAAjB,IAAwB,CAAxC,CAAX;AACA,YAAMC,MAAM,GAAGC,yBAAyB,CAACJ,QAAD,CAAxC,CAJiC,CAMjC;;AACA,aAAK5H,YAAL,CAAkBiI,eAAlB,CAAkCF,MAAlC,EAA0C,UAASG,KAAT,EAAgBC,SAAhB,EAA2B;AACjE,eAAKrI,OAAL,CAAaoI,KAAb,IAAsBC,SAAtB;AACD,SAFuC,CAEtCrH,IAFsC,CAEjC,IAFiC,EAE3B6G,KAF2B,CAA1C;AAGD;AACF;AACF,GAnJgB;;AAqJjB;;;;AAIAnB,EAAAA,QAzJiB,oBAyJR4B,SAzJQ,EAyJG;AAClB,QAAMC,KAAK,GAAGD,SAAS,IAAI,KAAKlJ,YAAhC,CADkB,CAGlB;;AACA,QAAI,KAAKnB,UAAL,CAAgB7B,KAAhB,GAAwB6E,aAA5B,EAA2C;AACzC,UAAMuH,WAAW,GAAGvL,MAAM,CAACoC,QAAP,GAAkBkJ,KAAlB,GACkBA,KAAK,GAAG,KAAKtK,UAAL,CAAgB7B,KAAxB,GAC9B6E,aAD8B,GACd,KAAKpD,MAAL,CAAY8F,wBAFpC;AAGA,WAAKvE,YAAL,GAAoBoJ,WAAW,GAAGD,KAAd,GAAsBA,KAAtB,GAA8BC,WAAlD;AACD,KALD,MAKO,IAAIF,SAAJ,EAAe;AACpB,WAAKlJ,YAAL,GAAoBkJ,SAApB;AACD;AACF,GArKgB;;AAuKjB;;;AAGAd,EAAAA,IA1KiB,kBA0KV;AAAA;;AACL;AACAhK,IAAAA,QAAQ,CAACC,aAAT,CAAuB,MAAMR,MAAM,CAAC4G,OAAP,CAAeI,IAA5C,EAAkDwE,KAAlD,CAAwDC,UAAxD,GACI,QADJ;AAGA,SAAKC,gBAAL;AACA,SAAKjC,QAAL;AAEA,QAAM5E,SAAS,GAAG8G,aAAa,CAAC/G,YAAY,CAACC,SAAd,CAA/B;AACA,SAAKpE,WAAL,GAAmBF,QAAQ,CAACsI,aAAT,CAAuB,KAAvB,CAAnB;AACA,SAAKpI,WAAL,CAAiBmL,YAAjB,CAA8B,MAA9B,EAAsCrH,SAAS,GAAG,QAAH,GAAc,aAA7D;AACA,SAAK9D,WAAL,CAAiBmL,YAAjB,CAA8B,UAA9B,EAA0C,GAA1C;AACA,SAAKnL,WAAL,CAAiBmL,YAAjB,CAA8B,OAA9B,EAAuC/G,SAAvC;AAEA,SAAKpE,WAAL,CAAiBqI,SAAjB,GAA6B9I,MAAM,CAAC4G,OAAP,CAAeG,SAA5C,CAdK,CAgBL;;AACA,SAAKvF,MAAL,GAAcqK,YAAY,CAAC,KAAKpL,WAAN,EAAmB,KAAKO,UAAL,CAAgB7B,KAAnC,EACtB,KAAK6B,UAAL,CAAgBnC,MADM,CAA1B,CAjBK,CAoBL;;AACA,SAAKiN,YAAL,GAAoBvL,QAAQ,CAACsI,aAAT,CAAuB,MAAvB,CAApB;AACA,SAAKiD,YAAL,CAAkBhD,SAAlB,GAA8B,4BAA9B;AACA,SAAKgD,YAAL,CAAkBF,YAAlB,CAA+B,WAA/B,EAA4C,WAA5C;AACA,SAAKE,YAAL,CAAkBC,WAAlB,GAAgC,EAAhC;AACA/L,IAAAA,MAAM,CAAC8L,YAAP,GAAsB,KAAKA,YAA3B,CAzBK,CA2BL;;AACA,SAAKE,sBAAL,GAA8BzL,QAAQ,CAACsI,aAAT,CAAuB,OAAvB,CAA9B;AACA,SAAKmD,sBAAL,CAA4BlD,SAA5B,GAAwC,0BAAxC;AACA,SAAKkD,sBAAL,CAA4BD,WAA5B,GACIJ,aAAa,CAAC/G,YAAY,CAACO,UAAd,CADjB;AAGA,SAAK8G,iBAAL,GAAyB1L,QAAQ,CAACsI,aAAT,CAAuB,OAAvB,CAAzB;AACA,SAAKoD,iBAAL,CAAuBL,YAAvB,CAAoC,MAApC,EAA4C,UAA5C;AACA,SAAKK,iBAAL,CAAuBL,YAAvB,CACI,OADJ,EACaD,aAAa,CAAC/G,YAAY,CAACO,UAAd,CAD1B;AAEA,SAAK8G,iBAAL,CAAuBL,YAAvB,CAAoC,UAApC,EAAgD,GAAhD;AACA,SAAKK,iBAAL,CAAuBL,YAAvB,CAAoC,SAApC,EAA+C,SAA/C;AAEA,SAAKM,iBAAL,GAAyB3L,QAAQ,CAACsI,aAAT,CAAuB,MAAvB,CAAzB;AACA,SAAKqD,iBAAL,CAAuBpD,SAAvB,GAAmC,mBAAnC;AAEA,SAAKkD,sBAAL,CAA4BjD,WAA5B,CAAwC,KAAKkD,iBAA7C;AACA,SAAKD,sBAAL,CAA4BjD,WAA5B,CAAwC,KAAKmD,iBAA7C;;AAEA,QAAI/H,MAAJ,EAAY;AACV,WAAK7D,gBAAL,CAAsByI,WAAtB,CAAkC,KAAK+C,YAAvC;AACD,KAFD,MAEO;AACL,WAAKrL,WAAL,CAAiBsI,WAAjB,CAA6B,KAAK+C,YAAlC;AACD;;AAEDK,IAAAA,cAAc,CAACR,aAAa,CAAC/G,YAAY,CAACE,WAAd,CAAd,CAAd;AAEA,SAAK9B,gBAAL,GAAwB,IAAIoJ,gBAAJ,EAAxB;AAEA,SAAK3K,SAAL;AACI;AAAyC,SAAKD,MAAL,CAAY6K,UAAZ,CAAuB,IAAvB,CAD7C;AAEA,SAAK5K,SAAL,CAAe6K,SAAf,GAA2B,SAA3B;AACA,SAAK7K,SAAL,CAAe8K,IAAf;AACAvM,IAAAA,MAAM,CAACwM,mBAAP,CAA2B,KAAKhL,MAAhC,EA5DK,CA8DL;;AACA,SAAKiL,OAAL,GAAe,IAAIC,OAAJ,CAAY,KAAKlL,MAAjB,EAAyB,KAAK0I,SAA9B,EAAyC,KAAKlJ,UAA9C,EACX,KAAKJ,MAAL,CAAY2F,eADD,CAAf,CA/DK,CAkEL;;AACA,SAAK5E,aAAL,GAAqB,IAAIgL,aAAJ,CAAkB,KAAKnL,MAAvB,EACf,KAAK0I,SAAL,CAAevN,WADA,EACa,KAAKqE,UAAL,CAAgB7B,KAD7B,CAArB,CAnEK,CAsEL;;AACA,SAAKuC,IAAL,GAAY,IAAIkL,IAAJ,CAAS,KAAKpL,MAAd,EAAsB,KAAK0I,SAAL,CAAetN,IAArC,CAAZ;AAEA,SAAK0D,gBAAL,CAAsByI,WAAtB,CAAkC,KAAKtI,WAAvC;AACA,SAAKH,gBAAL,CAAsByI,WAAtB,CAAkC,KAAKiD,sBAAvC;AAEA,SAAKa,cAAL,GA5EK,CA6EL;AACA;AACA;;AACA,SAAKC,MAAL;AAEAjJ,IAAAA,MAAM,CAACmF,gBAAP,CAAwBhJ,MAAM,CAAC4H,MAAP,CAAcO,MAAtC,EACI,KAAK4E,cAAL,CAAoBhJ,IAApB,CAAyB,IAAzB,CADJ,EAlFK,CAqFL;;AACA,QAAMiJ,kBAAkB,GACpBnJ,MAAM,CAACoJ,UAAP,CAAkB,8BAAlB,CADJ;AAEA,SAAKC,UAAL,GAAkBF,kBAAkB,IAAIA,kBAAkB,CAACG,OAA3D;AACAH,IAAAA,kBAAkB,CAACI,WAAnB,CAA+B,UAACnE,CAAD,EAAO;AACpC,MAAA,KAAI,CAACiE,UAAL,GAAkBjE,CAAC,CAACkE,OAApB;AACD,KAFD;AAGD,GAtQgB;;AAwQjB;;;AAGAE,EAAAA,qBA3QiB,mCA2QO;AACtB,SAAK1M,eAAL,GAAuBJ,QAAQ,CAACsI,aAAT,CAAuB,KAAvB,CAAvB;AACA,SAAKlI,eAAL,CAAqBmI,SAArB,GAAiC9I,MAAM,CAAC4G,OAAP,CAAeQ,gBAAhD;AACA,SAAKzG,eAAL,CAAqBqI,gBAArB,CAAsChJ,MAAM,CAAC4H,MAAP,CAAcS,UAApD,EAAgE,IAAhE;AACA,SAAK1H,eAAL,CAAqBqI,gBAArB,CAAsChJ,MAAM,CAAC4H,MAAP,CAAcQ,QAApD,EAA8D,IAA9D;AACA,SAAK9H,gBAAL,CAAsByI,WAAtB,CAAkC,KAAKpI,eAAvC;AACD,GAjRgB;;AAmRjB;;;AAGAoM,EAAAA,cAtRiB,4BAsRA;AACf,QAAI,CAAC,KAAKnK,cAAV,EAA0B;AACxB,WAAKA,cAAL,GACI0K,WAAW,CAAC,KAAK5B,gBAAL,CAAsB3H,IAAtB,CAA2B,IAA3B,CAAD,EAAmC,GAAnC,CADf;AAED;AACF,GA3RgB;;AA6RjB;;;AAGA2H,EAAAA,gBAhSiB,8BAgSE;AACjB6B,IAAAA,aAAa,CAAC,KAAK3K,cAAN,CAAb;AACA,SAAKA,cAAL,GAAsB,IAAtB;AAEA,QAAM4K,SAAS,GAAG3J,MAAM,CAAC4J,gBAAP,CAAwB,KAAKnN,gBAA7B,CAAlB;AACA,QAAMoN,OAAO,GAAGC,MAAM,CAACH,SAAS,CAACI,WAAV,CAAsB9C,MAAtB,CAA6B,CAA7B,EACnB0C,SAAS,CAACI,WAAV,CAAsBhF,MAAtB,GAA+B,CADZ,CAAD,CAAtB;AAGA,SAAK5H,UAAL,CAAgB7B,KAAhB,GAAwB,KAAKmB,gBAAL,CAAsBuN,WAAtB,GAAoCH,OAAO,GAAG,CAAtE;;AACA,QAAI,KAAKI,YAAL,EAAJ,EAAyB;AACvB,WAAK9M,UAAL,CAAgB7B,KAAhB,GAAwB4O,IAAI,CAACC,GAAL,CAAShK,aAAT,EAAwB,KAAKhD,UAAL,CAAgB7B,KAAxC,CAAxB;;AACA,UAAI,KAAKmD,SAAT,EAAoB;AAClB,aAAK2L,2BAAL;AACD;AACF,KAdgB,CAgBjB;;;AACA,QAAI,KAAKzM,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYtD,KAAZ,GAAoB,KAAK8C,UAAL,CAAgB7B,KAApC;AACA,WAAKqC,MAAL,CAAYrD,MAAZ,GAAqB,KAAK6C,UAAL,CAAgBnC,MAArC;AAEAmB,MAAAA,MAAM,CAACwM,mBAAP,CAA2B,KAAKhL,MAAhC;AAEA,WAAKG,aAAL,CAAmBuM,QAAnB,CAA4B,KAAKlN,UAAL,CAAgB7B,KAA5C;AACA,WAAKgP,WAAL;AACA,WAAK1B,OAAL,CAAaK,MAAb,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,IAA1B;AACA,WAAKpL,IAAL,CAAUoL,MAAV,CAAiB,CAAjB,EATe,CAWf;;AACA,UAAI,KAAKvK,OAAL,IAAgB,KAAKC,OAArB,IAAgC,KAAKC,MAAzC,EAAiD;AAC/C,aAAKhC,WAAL,CAAiB+K,KAAjB,CAAuBtN,KAAvB,GAA+B,KAAK8C,UAAL,CAAgB7B,KAAhB,GAAwB,IAAvD;AACA,aAAKsB,WAAL,CAAiB+K,KAAjB,CAAuBrN,MAAvB,GAAgC,KAAK6C,UAAL,CAAgBnC,MAAhB,GAAyB,IAAzD;AACA,aAAK8C,aAAL,CAAmBmL,MAAnB,CAA0B,CAA1B,EAA6BiB,IAAI,CAACK,IAAL,CAAU,KAAKxM,WAAf,CAA7B;AACA,aAAKyM,IAAL;AACD,OALD,MAKO;AACL,aAAK3M,IAAL,CAAU4M,IAAV,CAAe,CAAf,EAAkB,CAAlB;AACD,OAnBc,CAqBf;;;AACA,UAAI,KAAK9L,OAAL,IAAgB,KAAK+L,aAAzB,EAAwC;AACtC,aAAKA,aAAL,CAAmBC,gBAAnB,CAAoC,KAAKxN,UAAL,CAAgB7B,KAApD;AACA,aAAKoP,aAAL,CAAmBD,IAAnB,CAAwB,KAAKjN,iBAA7B,EAAgD,KAAKK,IAArD;AACD;AACF;AACF,GA5UgB;;AA8UjB;;;;AAIA+M,EAAAA,SAlViB,uBAkVL;AACV,QAAI,CAAC,KAAKnM,SAAN,IAAmB,CAAC,KAAKE,OAA7B,EAAsC;AACpC,WAAKkM,YAAL,GAAoB,IAApB;AACA,WAAKhN,IAAL,CAAUgN,YAAV,GAAyB,IAAzB,CAFoC,CAIpC;;AACA,UAAMC,SAAS,GAAG,gCACZ,eADY,GACM/B,IAAI,CAAChM,MAAL,CAAYzB,KADlB,GAC0B,MAD1B,GAEZ,cAFY,GAEK,KAAK6B,UAAL,CAAgB7B,KAFrB,GAE6B,MAF7B,GAGd,GAHJ;AAIAoB,MAAAA,QAAQ,CAACqO,WAAT,CAAqB,CAArB,EAAwBC,UAAxB,CAAmCF,SAAnC,EAA8C,CAA9C;AAEA,WAAKlO,WAAL,CAAiBuI,gBAAjB,CAAkChJ,MAAM,CAAC4H,MAAP,CAAcC,QAAhD,EACI,KAAKiH,SAAL,CAAe/K,IAAf,CAAoB,IAApB,CADJ;AAGA,WAAKtD,WAAL,CAAiB+K,KAAjB,CAAuBuD,eAAvB,GAAyC,2BAAzC;AACA,WAAKtO,WAAL,CAAiB+K,KAAjB,CAAuBtN,KAAvB,GAA+B,KAAK8C,UAAL,CAAgB7B,KAAhB,GAAwB,IAAvD;AAEA,WAAK6P,aAAL,CAAmB,IAAnB;AACA,WAAK1M,SAAL,GAAiB,IAAjB;AACD,KAnBD,MAmBO,IAAI,KAAKE,OAAT,EAAkB;AACvB,WAAKyM,OAAL;AACD;AACF,GAzWgB;;AA4WjB;;;AAGAH,EAAAA,SA/WiB,uBA+WL;AACV,QAAI,KAAKhB,YAAL,EAAJ,EAAyB;AACvB,WAAKoB,aAAL;AACD;;AACD,SAAKC,WAAL;AACA,SAAKnN,WAAL,GAAmB,CAAnB;AACA,SAAK0M,YAAL,GAAoB,KAApB;AACA,SAAKhN,IAAL,CAAUgN,YAAV,GAAyB,KAAzB;AACA,SAAKjO,WAAL,CAAiB+K,KAAjB,CAAuBuD,eAAvB,GAAyC,EAAzC;AACA,SAAKlM,SAAL;AACA,SAAKG,gBAAL,CAAsBoM,UAAtB;AACAjD,IAAAA,cAAc,CAACR,aAAa,CAAC/G,YAAY,CAACM,OAAd,CAAd,CAAd;;AAEA,QAAIlF,MAAM,CAACqP,SAAX,EAAsB;AACpB,WAAK5O,WAAL,CAAiBmL,YAAjB,CAA8B,OAA9B,EAAuCD,aAAa,CAAC/G,YAAY,CAACK,IAAd,CAApD;AACD,KAfS,CAiBV;;;AACA1E,IAAAA,QAAQ,CAACyI,gBAAT,CAA0BhJ,MAAM,CAAC4H,MAAP,CAAcU,UAAxC,EACM,KAAKgH,kBAAL,CAAwBvL,IAAxB,CAA6B,IAA7B,CADN;AAGAF,IAAAA,MAAM,CAACmF,gBAAP,CAAwBhJ,MAAM,CAAC4H,MAAP,CAAcW,IAAtC,EACM,KAAK+G,kBAAL,CAAwBvL,IAAxB,CAA6B,IAA7B,CADN;AAGAF,IAAAA,MAAM,CAACmF,gBAAP,CAAwBhJ,MAAM,CAAC4H,MAAP,CAAcY,KAAtC,EACM,KAAK8G,kBAAL,CAAwBvL,IAAxB,CAA6B,IAA7B,CADN;AAED,GAzYgB;AA2YjBoK,EAAAA,WA3YiB,yBA2YH;AACZ,SAAK1M,SAAL,CAAe8N,SAAf,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,KAAKvO,UAAL,CAAgB7B,KAA/C,EACI,KAAK6B,UAAL,CAAgBnC,MADpB;AAED,GA9YgB;;AAgZjB;;;;;AAKA2Q,EAAAA,cArZiB,4BAqZA;AACf,WAAO,KAAK/O,WAAL,CAAiBgP,qBAAjB,GAAyCC,GAAzC,GACH1P,MAAM,CAACY,MAAP,CAAc2E,qBADlB;AAED,GAxZgB;;AA0ZjB;;;AAGAoK,EAAAA,iBA7ZiB,+BA6ZG;AAClB3P,IAAAA,MAAM,CAACmK,WAAP,GAAqBnK,MAAM,CAACoB,kBAA5B;AACApB,IAAAA,MAAM,CAACmB,gBAAP,GAA0BvF,wDAA8BoE,MAAM,CAACkB,QAArC,CAA1B;;AAEA,QAAI+C,QAAJ,EAAc;AACZ,WAAKiG,SAAL,GAAiBlK,MAAM,CAACmB,gBAAP,CAAwBnE,IAAzC;AACD,KAFD,MAEO;AACL,WAAKkN,SAAL,GAAiBlK,MAAM,CAACmB,gBAAP,CAAwBrF,IAAzC;AACD;;AAED,SAAKuF,iBAAL,GAAyB,IAAzB;AACA,SAAKK,IAAL,CAAUiO,iBAAV,CAA4B,KAAKzF,SAAL,CAAetN,IAA3C;AACA,SAAK6P,OAAL,CAAakD,iBAAb,CAA+B,KAAKzF,SAApC;AACA,SAAKlH,gBAAL,CAAsBoM,UAAtB;AACD,GA3agB;;AA6ajB;;;AAGAtC,EAAAA,MAhbiB,oBAgbR;AACP,SAAK8C,aAAL,GAAqB,KAArB;AAEA,QAAMC,GAAG,GAAGC,YAAY,EAAxB;AACA,QAAIC,SAAS,GAAGF,GAAG,IAAI,KAAK9N,IAAL,IAAa8N,GAAjB,CAAnB,CAJO,CAMP;;AACA,QAAI,KAAKvO,qBAAL,GAA6B,CAA7B,IAAkC,KAAKA,qBAAL,KAA+B,CAArE,EAAwE;AACtE,WAAKA,qBAAL,GAA6B,IAA7B;AACA,WAAKI,IAAL,CAAUsO,WAAV,CAAsB,KAAtB;AACA,WAAKL,iBAAL;AACD,KAJD,MAIO,IAAI,KAAKrO,qBAAL,GAA6B,CAAjC,EAAoC;AACzC,WAAKA,qBAAL,IAA8ByO,SAA9B;AACA,WAAKrO,IAAL,CAAUoL,MAAV,CAAiBiD,SAAjB;AACAA,MAAAA,SAAS,GAAG,CAAZ;AACD;;AAED,SAAKhO,IAAL,GAAY8N,GAAZ,CAjBO,CAmBP;AACA;AACA;;AAEA,QAAI,KAAKtN,OAAT,EAAkB;AAChB,WAAK4L,WAAL,GADgB,CAGhB;;AACA,UAAI,KAAK9M,iBAAL,IACA,KAAKE,WAAL,IAAoB,KAAKX,MAAL,CAAY8E,aADpC,EACmD;AACjD,aAAKnE,WAAL,IAAoBwO,SAAS,GAAG,IAAhC;AACA,aAAKtO,SAAL,CAAewO,WAAf,GAA6B,KAAK1O,WAAlC;AACD,OAJD,MAIO;AACL,aAAKE,SAAL,CAAewO,WAAf,GAA6B,CAA7B;AACD;;AAED,UAAI,KAAKvO,IAAL,CAAUwO,OAAd,EAAuB;AACrB,aAAKxO,IAAL,CAAUyO,UAAV,CAAqBJ,SAArB;AACD;;AAED,WAAK/N,WAAL,IAAoB+N,SAApB;AACA,UAAMK,YAAY,GAAG,KAAKpO,WAAL,GAAmB,KAAKpB,MAAL,CAAY4E,UAApD,CAjBgB,CAmBhB;;AACA,UAAI,KAAK9D,IAAL,CAAU2O,SAAV,KAAwB,CAAxB,IAA6B,CAAC,KAAK3B,YAAvC,EAAqD;AACnD,aAAKD,SAAL;AACD,OAtBe,CAwBhB;;;AACA,UAAI,KAAKC,YAAT,EAAuB;AACrB,aAAKjC,OAAL,CAAaK,MAAb,CAAoB,CAApB,EAAuB,KAAK3K,YAA5B,EAA0CiO,YAA1C;AACD,OAFD,MAEO,IAAI,CAAC,KAAK5N,OAAV,EAAmB;AACxB,YAAM8N,aAAa,GAAG,KAAKpD,UAAL,GAAkB,KAAKxK,QAA7C;AACAqN,QAAAA,SAAS,GAAG,CAAC,KAAKzN,SAAN,GAAkB,CAAlB,GAAsByN,SAAlC;AACA,aAAKtD,OAAL,CAAaK,MAAb,CACIiD,SADJ,EACe,KAAK5N,YADpB,EACkCiO,YADlC,EACgDE,aADhD;AAED,OAhCe,CAkChB;;;AACA,UAAIC,SAAS,GAAGH,YAAY,IACxBI,iBAAiB,CAAC,KAAK/D,OAAL,CAAapK,SAAb,CAAuB,CAAvB,CAAD,EAA4B,KAAKX,IAAjC,CADrB,CAnCgB,CAqChB;AACA;;AACA,UAAI1B,MAAM,CAACqP,SAAP,IAAoBe,YAAxB,EAAsC;AACpC,YAAMK,YAAY,GACd,KAAKhE,OAAL,CAAapK,SAAb,CAAuB,CAAvB,EAA0BqO,UAA1B,CAAqCzS,IAArC,IAA6C,aADjD;;AAGA,YAAI,CAAC,KAAKwO,OAAL,CAAapK,SAAb,CAAuB,CAAvB,EAA0BsO,WAA/B,EAA4C;AAC1C,cAAMC,SAAS,GAAG5Q,MAAM,CAAC6Q,kBAAP,GACd7Q,MAAM,CAACY,MAAP,CAAcyE,wCADA,GAEdrF,MAAM,CAACY,MAAP,CAAcwE,4BAFlB;AAGA,cAAM0L,qBAAqB,GAAGF,SAAS,GAClCA,SAAS,GAAG7C,IAAI,CAACgD,KAAL,CAAW,KAAK5O,YAAL,GAAoBnC,MAAM,CAACY,MAAP,CAAcjB,KAA7C,CADjB;;AAGA,cAAI,KAAK8M,OAAL,CAAapK,SAAb,CAAuB,CAAvB,EAA0B2O,IAA1B,GAAiCF,qBAArC,EAA4D;AAC1D,gBAAIL,YAAJ,EAAkB;AAChB,mBAAKzN,gBAAL,CAAsBiC,IAAtB;AACD;;AACD,iBAAKwH,OAAL,CAAapK,SAAb,CAAuB,CAAvB,EAA0BsO,WAA1B,GAAwC,IAAxC;AACD;AACF;AACF,OAzDe,CA2DhB;;;AACA,UAAI3Q,MAAM,CAAC0D,oBAAP,MAAiC6M,SAAjC,IACA,KAAK9D,OAAL,CAAapK,SAAb,CAAuB,CAAvB,EAA0BqO,UAA1B,CAAqCzS,IAArC,IAA6C,aADjD,EACgE;AAC9D,aAAKwO,OAAL,CAAawE,mBAAb;AACA,aAAKvP,IAAL,CAAUsO,WAAV,CAAsB,IAAtB;AACAO,QAAAA,SAAS,GAAG,KAAZ;AACA,aAAKjP,qBAAL,GAA6B,KAAKV,MAAL,CAAY+E,cAAzC;AACA,aAAK3D,WAAL,GAAmB,CAAnB;AACA,aAAKgB,gBAAL,CAAsBkO,OAAtB;AACD;;AAED,UAAI,CAACX,SAAL,EAAgB;AACd,aAAK3O,WAAL,IAAoB,KAAKO,YAAL,GAAoB4N,SAApB,GAAgC,KAAK9N,UAAzD;;AAEA,YAAI,KAAKE,YAAL,GAAoB,KAAKvB,MAAL,CAAY6F,SAApC,EAA+C;AAC7C,eAAKtE,YAAL,IAAqB,KAAKvB,MAAL,CAAY0F,YAAjC;AACD;AACF,OAND,MAMO;AACL,aAAKvB,QAAL;AACD;;AAED,UAAMoM,oBAAoB,GAAG,KAAKxP,aAAL,CAAmBmL,MAAnB,CAA0BiD,SAA1B,EACzBhC,IAAI,CAACK,IAAL,CAAU,KAAKxM,WAAf,CADyB,CAA7B;;AAGA,UAAI,CAAC5B,MAAM,CAACqP,SAAR,IAAqB8B,oBAAzB,EAA+C;AAC7C,aAAKC,SAAL,CAAe,KAAKrO,OAAL,CAAayE,KAA5B;AACD,OArFe,CAuFhB;;;AACA,UAAI,CAACxH,MAAM,CAAC0D,oBAAP,EAAL,EAAoC;AAClC,YAAI,KAAKf,WAAL,GAAmB,KAAK/B,MAAL,CAAYkF,oBAAnC,EAAyD;AACvD,eAAKnD,WAAL,GAAmB,CAAnB;AACA,eAAK0O,aAAL,GAAqB,KAArB;AACA,eAAKC,MAAL,CAAY,KAAZ;AACD,SAJD,MAIO,IAAI,KAAK3O,WAAT,EAAsB;AAC3B,eAAKA,WAAL,IAAoBoN,SAApB;AACD,SAFM,MAEA;AACL,cAAMwB,cAAc,GAChB,KAAK5P,aAAL,CAAmB6P,iBAAnB,CAAqCzD,IAAI,CAACK,IAAL,CAAU,KAAKxM,WAAf,CAArC,CADJ;;AAGA,cAAI2P,cAAc,GAAG,CAArB,EAAwB;AACtB,iBAAKF,aAAL,GACI,EAAEE,cAAc,GAAG,KAAK3Q,MAAL,CAAY4F,eAA/B,CADJ;;AAGA,gBAAI,KAAK6K,aAAL,IAAsB,KAAK1O,WAAL,KAAqB,CAA/C,EAAkD;AAChD,mBAAKA,WAAL,IAAoBoN,SAApB;AACA,mBAAKuB,MAAL,CAAY,KAAZ;AACD;AACF;AACF;AACF;AACF;;AAED,QAAI,KAAK/O,OAAL,IAAiB,CAAC,KAAKD,SAAN,IACjB,KAAKZ,IAAL,CAAU+P,UAAV,GAAuBzR,MAAM,CAACY,MAAP,CAAcmF,eADzC,EAC2D;AACzD,WAAKrE,IAAL,CAAUoL,MAAV,CAAiBiD,SAAjB;AACA,WAAK2B,kBAAL;AACD;AACF,GA5jBgB;;AA8jBjB;;;;AAIAC,EAAAA,WAlkBiB,uBAkkBL1I,CAlkBK,EAkkBF;AACb,WAAQ,UAAS2I,OAAT,EAAkBhK,MAAlB,EAA0B;AAChC,cAAQgK,OAAR;AACE,aAAKhK,MAAM,CAACG,OAAZ;AACA,aAAKH,MAAM,CAACS,UAAZ;AACA,aAAKT,MAAM,CAACK,WAAZ;AACE,eAAK4J,SAAL,CAAe5I,CAAf;AACA;;AACF,aAAKrB,MAAM,CAACI,KAAZ;AACA,aAAKJ,MAAM,CAACQ,QAAZ;AACA,aAAKR,MAAM,CAACM,SAAZ;AACE,eAAK4J,OAAL,CAAa7I,CAAb;AACA;;AACF,aAAKrB,MAAM,CAACc,gBAAZ;AACE,eAAKqJ,kBAAL,CAAwB9I,CAAxB;AACA;AAbJ;AAeD,KAhBO,CAgBNlF,IAhBM,CAgBD,IAhBC,CAAD,CAgBOkF,CAAC,CAAChL,IAhBT,EAgBe+B,MAAM,CAAC4H,MAhBtB,CAAP;AAiBD,GAplBgB;;AAslBjB;;;;AAIAoK,EAAAA,oBA1lBiB,gCA0lBI/I,CA1lBJ,EA0lBO;AACtB,QAAI,CAAC,KAAK3G,SAAN,IAAmB,CAACtC,MAAM,CAACqP,SAA/B,EAA0C;AACxC,WAAKF,WAAL;AACAnP,MAAAA,MAAM,CAACqP,SAAP,GAAmB,IAAnB;AACA,WAAKrM,gBAAL,CAAsBuH,IAAtB;AACAvK,MAAAA,MAAM,CAACgD,gBAAP,GAA0B,KAAKA,gBAA/B;AACAhD,MAAAA,MAAM,CAACY,MAAP,CAAc4E,UAAd,IAA4B,GAA5B;AACD,KAND,MAMO,IAAIyD,CAAC,CAACC,OAAF,IAAalJ,MAAM,CAACyH,QAAP,CAAgBC,IAAhB,CAAqBuB,CAAC,CAACC,OAAvB,CAAjB,EAAkD;AACvD,WAAK2I,SAAL,CAAe5I,CAAf;AACD;AACF,GApmBgB;;AAsmBjB;;;;AAIAgJ,EAAAA,gBA1mBiB,4BA0mBAhJ,CA1mBA,EA0mBG;AAClB,QAAIA,CAAC,CAACC,OAAF,KAAc,EAAlB,EAAsB;AACpBD,MAAAA,CAAC,CAACiJ,cAAF;AACD;AACF,GA9mBgB;;AAgnBjB;;;AAGA/C,EAAAA,WAnnBiB,yBAmnBH;AACZ,QAAInP,MAAM,CAACqP,SAAX,EAAsB;AACpB,UAAM8C,WAAW,GAAGnS,MAAM,CAACoC,QAAP,IAAmB,KAAK6J,iBAAL,CAAuBmG,OAA9D;;AAEA,UAAID,WAAJ,EAAiB;AACfnS,QAAAA,MAAM,CAACoC,QAAP,GAAkB,KAAK6J,iBAAL,CAAuBmG,OAAzC;AACA,YAAMC,aAAa,GACfrS,MAAM,CAACoC,QAAP,GAAkBpC,MAAM,CAAC2G,UAAzB,GAAsC3G,MAAM,CAACe,YADjD;AAGAf,QAAAA,MAAM,CAACY,MAAP,GAAgBC,MAAM,CAACC,MAAP,CAAcd,MAAM,CAACY,MAArB,EAA6ByR,aAA7B,CAAhB;AACA,aAAKlQ,YAAL,GAAoBkQ,aAAa,CAAC1S,KAAlC;AACA,aAAK+B,IAAL,CAAU4Q,gBAAV;AACA,aAAK7F,OAAL,CAAa8F,mBAAb;AACD;;AACD,UAAI,KAAKhQ,OAAT,EAAkB;AAChB,aAAKiQ,kBAAL,CAAwB,IAAxB;AACD;AACF;AACF,GAroBgB;;AAuoBjB;;;;;AAKAC,EAAAA,eA5oBiB,2BA4oBDxJ,CA5oBC,EA4oBE;AACjB,QAAMyJ,YAAY,GAAGzJ,CAAC,IAAIA,CAAC,CAAChL,IAAF,IAAU,OAApC;;AACA,QAAI+B,MAAM,CAACqP,SAAP,IAAoBqD,YAAxB,EAAsC;AACpC,WAAK1G,sBAAL,CAA4B7C,SAA5B,CAAsCwJ,MAAtC,CACIC,YADJ,EACkBF,YAAY,GAAG,KAAH,GAAW,CAAC,KAAKlQ,OAD/C;AAED;AACF,GAlpBgB;;AAopBjB;;;;AAIAgQ,EAAAA,kBAxpBiB,8BAwpBEK,OAxpBF,EAwpBW;AAC1B,QAAIA,OAAJ,EAAa;AACX,WAAK5G,iBAAL,CAAuBL,YAAvB,CAAoC,UAApC,EAAgD,UAAhD;AACD,KAFD,MAEO;AACL,WAAKK,iBAAL,CAAuB6G,eAAvB,CAAuC,UAAvC;AACD;AACF,GA9pBgB;;AAgqBjB;;;AAGAjG,EAAAA,cAnqBiB,4BAmqBA;AACf;AACA,SAAKpM,WAAL,CAAiBuI,gBAAjB,CACIhJ,MAAM,CAAC4H,MAAP,CAAcG,OADlB,EAC2B,KAAKiK,oBAAL,CAA0BjO,IAA1B,CAA+B,IAA/B,CAD3B;;AAEA,QAAI,CAACQ,SAAL,EAAgB;AACd,WAAK9D,WAAL,CAAiBuI,gBAAjB,CACIhJ,MAAM,CAAC4H,MAAP,CAAcY,KADlB,EACyB,KAAKiK,eAAL,CAAqB1O,IAArB,CAA0B,IAA1B,CADzB;AAED;;AACD,SAAKvC,MAAL,CAAYwH,gBAAZ,CACIhJ,MAAM,CAAC4H,MAAP,CAAcG,OADlB,EAC2B,KAAKkK,gBAAL,CAAsBlO,IAAtB,CAA2B,IAA3B,CAD3B;AAEA,SAAKvC,MAAL,CAAYwH,gBAAZ,CACIhJ,MAAM,CAAC4H,MAAP,CAAcI,KADlB,EACyB,KAAKiK,gBAAL,CAAsBlO,IAAtB,CAA2B,IAA3B,CADzB,EAVe,CAaf;;AACAxD,IAAAA,QAAQ,CAACyI,gBAAT,CAA0BhJ,MAAM,CAAC4H,MAAP,CAAcG,OAAxC,EAAiD,IAAjD;AACAxH,IAAAA,QAAQ,CAACyI,gBAAT,CAA0BhJ,MAAM,CAAC4H,MAAP,CAAcI,KAAxC,EAA+C,IAA/C,EAfe,CAiBf;;AACA,SAAKvH,WAAL,CAAiBuI,gBAAjB,CAAkChJ,MAAM,CAAC4H,MAAP,CAAcS,UAAhD,EAA4D,IAA5D;AACA9H,IAAAA,QAAQ,CAACyI,gBAAT,CAA0BhJ,MAAM,CAAC4H,MAAP,CAAcK,WAAxC,EAAqD,IAArD;AACA1H,IAAAA,QAAQ,CAACyI,gBAAT,CAA0BhJ,MAAM,CAAC4H,MAAP,CAAcM,SAAxC,EAAmD,IAAnD;;AAEA,QAAI,KAAK4F,YAAL,EAAJ,EAAyB;AACvB;AACAjK,MAAAA,MAAM,CAACmF,gBAAP,CAAwBhJ,MAAM,CAAC4H,MAAP,CAAcc,gBAAtC,EAAwD,IAAxD;AACD;AACF,GA7rBgB;;AA+rBjB;;;AAGAqK,EAAAA,aAlsBiB,2BAksBD;AACdxS,IAAAA,QAAQ,CAACyS,mBAAT,CAA6BhT,MAAM,CAAC4H,MAAP,CAAcG,OAA3C,EAAoD,IAApD;AACAxH,IAAAA,QAAQ,CAACyS,mBAAT,CAA6BhT,MAAM,CAAC4H,MAAP,CAAcI,KAA3C,EAAkD,IAAlD;;AAEA,QAAI,KAAKrH,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBqS,mBAArB,CAAyChT,MAAM,CAAC4H,MAAP,CAAcS,UAAvD,EAAmE,IAAnE;AACA,WAAK1H,eAAL,CAAqBqS,mBAArB,CAAyChT,MAAM,CAAC4H,MAAP,CAAcQ,QAAvD,EAAiE,IAAjE;AACD;;AAED,SAAK3H,WAAL,CAAiBuS,mBAAjB,CAAqChT,MAAM,CAAC4H,MAAP,CAAcS,UAAnD,EAA+D,IAA/D;AACA9H,IAAAA,QAAQ,CAACyS,mBAAT,CAA6BhT,MAAM,CAAC4H,MAAP,CAAcK,WAA3C,EAAwD,IAAxD;AACA1H,IAAAA,QAAQ,CAACyS,mBAAT,CAA6BhT,MAAM,CAAC4H,MAAP,CAAcM,SAA3C,EAAsD,IAAtD;;AAEA,QAAI,KAAK4F,YAAL,EAAJ,EAAyB;AACvBjK,MAAAA,MAAM,CAACmP,mBAAP,CAA2BhT,MAAM,CAAC4H,MAAP,CAAcc,gBAAzC,EAA2D,IAA3D;AACD;AACF,GAltBgB;;AAotBjB;;;;AAIAmJ,EAAAA,SAxtBiB,qBAwtBP5I,CAxtBO,EAwtBJ;AACX;AACA,QAAI1E,SAAS,IAAI,KAAKhC,OAAtB,EAA+B;AAC7B0G,MAAAA,CAAC,CAACiJ,cAAF;AACD,KAJU,CAKX;;;AACA/R,IAAAA,OAAO,CAACC,GAAR,CAAY6I,CAAC,CAACC,OAAd,EANW,CAOX;;AAEA,QAAI,KAAKsG,cAAL,EAAJ,EAA2B;AACzB;AACA,UAAIxP,MAAM,CAACyH,QAAP,CAAgBC,IAAhB,CAAqBuB,CAAC,CAACC,OAAvB,KACAD,CAAC,CAACgK,MAAF,IAAY,KAAKhH,iBADrB,EACwC;AACtC;AACD;;AAED,UAAI,CAAC,KAAKzJ,OAAN,IAAiB,CAAC,KAAKC,MAA3B,EAAmC;AACjC;AACA,YAAMoO,kBAAkB,GAAGtM,SAAS,IAC5B0E,CAAC,CAAChL,IAAF,KAAW+B,MAAM,CAAC4H,MAAP,CAAcK,WADN,IAEnBgB,CAAC,CAACiK,WAAF,IAAiB,OAFE,IAESjK,CAAC,CAACgK,MAAF,IAAY,KAAKxS,WAF1B,IAGtB0D,MAAM,IAAI8E,CAAC,CAACiK,WAAF,IAAiB,OAA3B,IACA3S,QAAQ,CAAC4S,aAAT,IAA0B,KAAK1S,WAJpC;;AAMA,YAAIT,MAAM,CAACyH,QAAP,CAAgBC,IAAhB,CAAqBuB,CAAC,CAACC,OAAvB,KACAD,CAAC,CAAChL,IAAF,KAAW+B,MAAM,CAAC4H,MAAP,CAAcS,UADzB,IACuCwI,kBADvC,IAEC7Q,MAAM,CAACyH,QAAP,CAAgBE,IAAhB,CAAqBsB,CAAC,CAACC,OAAvB,KAAmC,KAAK7H,iBAF7C,EAEiE;AAC/D4H,UAAAA,CAAC,CAACiJ,cAAF,GAD+D,CAE/D;;AACA,cAAI,CAAC,KAAK3P,OAAV,EAAmB;AACjB;AACA,gBAAI,CAAC,KAAK5B,eAAN,IAAyBsI,CAAC,CAAChL,IAAF,KAAW+B,MAAM,CAAC4H,MAAP,CAAcS,UAAtD,EAAkE;AAChE,mBAAKgF,qBAAL;AACD;;AAED,gBAAIwD,kBAAJ,EAAwB;AACtB,mBAAKmB,oBAAL,CAA0B/I,CAA1B;AACD,aARgB,CASjB;;;AACA,iBAAK+F,aAAL,CAAmB,IAAnB;AACA,iBAAKlC,MAAL;;AACA,gBAAIjJ,MAAM,CAACuP,mBAAX,EAAgC;AAC9BA,cAAAA,mBAAmB,CAACC,cAApB;AACD;AACF,WAlB8D,CAmB/D;;;AACA,cAAI,CAAC,KAAK3R,IAAL,CAAUwO,OAAX,IAAsB,CAAC,KAAKxO,IAAL,CAAU4R,OAArC,EAA8C;AAC5C,gBAAItT,MAAM,CAACqP,SAAX,EAAsB;AACpB,mBAAKrM,gBAAL,CAAsBuQ,eAAtB;AACD,aAFD,MAEO;AACL,mBAAKnC,SAAL,CAAe,KAAKrO,OAAL,CAAauE,YAA5B;AACD;;AACD,iBAAK5F,IAAL,CAAU8R,SAAV,CAAoB,KAAKrR,YAAzB;AACD,WA3B8D,CA4B/D;;AACD,SA/BD,MA+BO,IACH,CAAC,KAAKd,iBAAN,IAA2B,KAAKkB,OAAhC,IACAvC,MAAM,CAACyH,QAAP,CAAgBE,IAAhB,CAAqBsB,CAAC,CAACC,OAAvB,CAFG,EAE8B;AACnCD,UAAAA,CAAC,CAACiJ,cAAF;;AACA,cAAI,KAAKxQ,IAAL,CAAUwO,OAAd,EAAuB;AACrB;AACA,iBAAKxO,IAAL,CAAU+R,YAAV;AACD,WAHD,MAGO,IAAI,CAAC,KAAK/R,IAAL,CAAUwO,OAAX,IAAsB,CAAC,KAAKxO,IAAL,CAAU4R,OAArC,EAA8C;AACnD;AACA,iBAAK5R,IAAL,CAAUgS,OAAV,CAAkB,IAAlB;AACD;AACF;AACF;AACF;AACF,GA7xBgB;;AA+xBjB;;;;AAIA5B,EAAAA,OAnyBiB,mBAmyBT7I,CAnyBS,EAmyBN;AACT,QAAMC,OAAO,GAAGyK,MAAM,CAAC1K,CAAC,CAACC,OAAH,CAAtB;AACA,QAAM0K,SAAS,GAAG5T,MAAM,CAACyH,QAAP,CAAgBC,IAAhB,CAAqBwB,OAArB,KACdD,CAAC,CAAChL,IAAF,KAAW+B,MAAM,CAAC4H,MAAP,CAAcQ,QADX,IACuBa,CAAC,CAAChL,IAAF,KAAW+B,MAAM,CAAC4H,MAAP,CAAcM,SADlE;;AAGA,QAAI,KAAK2L,SAAL,MAAoBD,SAAxB,EAAmC;AACjC,WAAKlS,IAAL,CAAUoS,OAAV;AACD,KAFD,MAEO,IAAI9T,MAAM,CAACyH,QAAP,CAAgBE,IAAhB,CAAqBuB,OAArB,CAAJ,EAAmC;AACxC,WAAKxH,IAAL,CAAUqS,SAAV,GAAsB,KAAtB;AACA,WAAKrS,IAAL,CAAUgS,OAAV,CAAkB,KAAlB;AACD,KAHM,MAGA,IAAI,KAAKlR,OAAT,EAAkB;AACvB;AACA,UAAMuN,SAAS,GAAGD,YAAY,KAAK,KAAK/N,IAAxC;;AAEA,UAAI,KAAKyN,cAAL,OACCxP,MAAM,CAACyH,QAAP,CAAgB/K,OAAhB,CAAwBwM,OAAxB,KAAoC,KAAK8K,mBAAL,CAAyB/K,CAAzB,CAApC,IACA8G,SAAS,IAAI,KAAKnP,MAAL,CAAYgF,mBAAzB,IACD5F,MAAM,CAACyH,QAAP,CAAgBC,IAAhB,CAAqBwB,OAArB,CAHA,CAAJ,EAGqC;AACnC,aAAK+K,oBAAL,CAA0BhL,CAA1B;AACD;AACF,KAVM,MAUA,IAAI,KAAKxG,MAAL,IAAemR,SAAnB,EAA8B;AACnC;AACA,WAAKlS,IAAL,CAAUwS,KAAV;AACA,WAAKC,IAAL;AACD;AACF,GA5zBgB;;AA8zBjB;;;;AAIApC,EAAAA,kBAl0BiB,8BAk0BE9I,CAl0BF,EAk0BK;AACpB,QAAI,CAAC,KAAK7F,eAAV,EAA2B;AACzB,WAAKgR,gBAAL;AACD;AACF,GAt0BgB;;AAw0BjB;;;AAGAA,EAAAA,gBA30BiB,8BA20BE;AACjB,QAAMC,QAAQ,GAAGhQ,SAAS,CAACiQ,WAAV,EAAjB;AACA,SAAKC,iBAAL,CAAuBF,QAAvB;AAEA,SAAKjR,eAAL,GAAuB,IAAvB;AACAoR,IAAAA,qBAAqB,CAAC,KAAKJ,gBAAL,CAAsBrQ,IAAtB,CAA2B,IAA3B,CAAD,CAArB;AACD,GAj1BgB;;AAm1BjB;;;;;AAKA0Q,EAAAA,oBAx1BiB,gCAw1BIJ,QAx1BJ,EAw1Bc;AAC7B,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACzL,MAA7B,EAAqC,EAAE8L,CAAvC,EAA0C;AACxC,UAAIL,QAAQ,CAACK,CAAD,CAAR,IAAeL,QAAQ,CAACK,CAAD,CAAR,CAAYC,OAAZ,CAAoB/L,MAApB,GAA6B,CAA5C,IACAyL,QAAQ,CAACK,CAAD,CAAR,CAAYC,OAAZ,CAAoB,CAApB,EAAuBC,OAD3B,EACoC;AAClC,aAAKvR,YAAL,GAAoBqR,CAApB;AACA,aAAKH,iBAAL,CAAuBF,QAAvB;AACA;AACD;AACF;AACF,GAj2BgB;;AAm2BjB;;;;;AAKAE,EAAAA,iBAx2BiB,6BAw2BCF,QAx2BD,EAw2BW;AAC1B,QAAI,KAAKhR,YAAL,KAAsBC,SAA1B,EAAqC;AACnC,WAAKmR,oBAAL,CAA0BJ,QAA1B;AACA;AACD;;AAED,QAAMQ,OAAO,GAAGR,QAAQ,CAAC,KAAKhR,YAAN,CAAxB;;AACA,QAAI,CAACwR,OAAL,EAAc;AACZ,WAAKxR,YAAL,GAAoBC,SAApB;AACA,WAAKmR,oBAAL,CAA0BJ,QAA1B;AACA;AACD,KAXyB,CAa1B;AACA;;;AACA,SAAKS,iBAAL,CAAuBD,OAAvB,EAAgC,CAAhC,EAAmC,EAAnC,EAf0B,CAee;;AACzC,QAAIA,OAAO,CAACF,OAAR,CAAgB/L,MAAhB,IAA0B,CAA9B,EAAiC;AAC/B,WAAKkM,iBAAL,CAAuBD,OAAvB,EAAgC,CAAhC,EAAmC,EAAnC,EAD+B,CACU;AAC1C;;AACD,QAAIA,OAAO,CAACF,OAAR,CAAgB/L,MAAhB,IAA0B,EAA9B,EAAkC;AAChC,WAAKkM,iBAAL,CAAuBD,OAAvB,EAAgC,CAAhC,EAAmC,EAAnC,EADgC,CACS;AAC1C;;AAED,SAAKtR,eAAL,GAAuBsR,OAAvB;AACD,GAh4BgB;;AAk4BjB;;;;;;AAMAC,EAAAA,iBAx4BiB,6BAw4BCD,OAx4BD,EAw4BUE,WAx4BV,EAw4BuB7L,OAx4BvB,EAw4BgC;AAC/C,QAAM8L,KAAK,GAAGH,OAAO,CAACF,OAAR,CAAgBI,WAAhB,EAA6BH,OAA3C;AACA,QAAIK,aAAa,GAAG,KAApB;;AACA,QAAI,KAAK1R,eAAT,EAA0B;AACxB0R,MAAAA,aAAa,GAAG,KAAK1R,eAAL,CAAqBoR,OAArB,CAA6BI,WAA7B,EAA0CH,OAA1D;AACD,KAL8C,CAM/C;;;AACA,QAAII,KAAK,KAAKC,aAAd,EAA6B;AAC3B,UAAMhM,CAAC,GAAG,IAAIiM,aAAJ,CAAkBF,KAAK,GAAGhV,MAAM,CAAC4H,MAAP,CAAcG,OAAjB,GACC/H,MAAM,CAAC4H,MAAP,CAAcI,KADtC,EAEgB;AAAEkB,QAAAA,OAAO,EAAEA;AAAX,OAFhB,CAAV;AAGA3I,MAAAA,QAAQ,CAAC4U,aAAT,CAAuBlM,CAAvB;AACD;AACF,GAr5BgB;;AAu5BjB;;;;;AAKAgL,EAAAA,oBA55BiB,gCA45BIhL,CA55BJ,EA45BO;AACtB,QAAIA,CAAC,CAACgK,MAAF,IAAY,KAAKhH,iBAArB,EAAwC;AACtChD,MAAAA,CAAC,CAACiJ,cAAF;;AACA,UAAI,KAAKvQ,aAAL,CAAmByT,qBAAnB,CAAyCnM,CAAzC,KAA+C,KAAKpH,YAAxD,EAAsE;AACpE,YAAI,KAAKF,aAAL,CAAmB0T,mBAAnB,EAAJ,EAA8C;AAC5C;AACA,eAAKC,aAAL,CAAmB,CAAnB,EAAsB,IAAtB;AACA,eAAK3T,aAAL,CAAmB4T,cAAnB;AACD,SAJD,MAIO;AACL;AACA,eAAK5T,aAAL,CAAmB6T,sBAAnB;AACD;AACF,OATD,MASO;AACL,aAAK7T,aAAL,CAAmB8T,uBAAnB;AACA,aAAKxG,OAAL;AACD;AACF;AACF,GA76BgB;;AA+6BjB;;;;;;AAMA+E,EAAAA,mBAr7BiB,+BAq7BG/K,CAr7BH,EAq7BM;AACrB,WAAOA,CAAC,CAACyM,MAAF,IAAY,IAAZ,IAAoBzM,CAAC,CAACyM,MAAF,GAAW,CAA/B,IACHzM,CAAC,CAAChL,IAAF,KAAW+B,MAAM,CAAC4H,MAAP,CAAcM,SADtB,KAEFe,CAAC,CAACgK,MAAF,KAAa,KAAKzR,MAAlB,IACC+C,SAAS,IAAIvE,MAAM,CAACqP,SAApB,IAAiCpG,CAAC,CAACgK,MAAF,KAAa,KAAKxS,WAHlD,CAAP;AAID,GA17BgB;;AA47BjB;;;AAGAiR,EAAAA,kBA/7BiB,gCA+7BI;AACnB,QAAI,CAAC,KAAK9B,aAAV,EAAyB;AACvB,WAAKA,aAAL,GAAqB,IAArB;AACA,WAAK+F,KAAL,GAAanB,qBAAqB,CAAC,KAAK1H,MAAL,CAAY/I,IAAZ,CAAiB,IAAjB,CAAD,CAAlC;AACD,KAJkB,CAKnB;AACD;AACC;;AACD,GAv8BgB;;AAy8BjB;;;;AAIA8P,EAAAA,SA78BiB,uBA68BL;AACV,WAAO,CAAC,CAAC,KAAK8B,KAAd;AACD,GA/8BgB;;AAi9BjB;;;;AAIA7R,EAAAA,mBAr9BiB,+BAq9BGkB,SAr9BH,EAq9Bc;AAC7B,SAAKlD,gBAAL,GAAwB,IAAxB;AACAkD,IAAAA,SAAS,GAAG+I,IAAI,CAACK,IAAL,CAAUpJ,SAAV,CAAZ;;AACA,QAAIA,SAAS,GAAG,KAAKnD,YAArB,EAAmC;AACjC,UAAIgC,MAAM,CAACuP,mBAAX,EAAgC;AAC9BA,QAAAA,mBAAmB,CAACwC,wBAApB,CAA6C,KAAK/T,YAAlD;AACD;;AACD;AACD;;AACD,SAAKA,YAAL,GAAoBmD,SAApB;AACA,SAAKrD,aAAL,CAAmBkU,YAAnB,CAAgC,KAAKhU,YAArC;AACD,GAh+BgB;;AAk+BjB;;;;;AAKAyT,EAAAA,aAv+BiB,yBAu+BH1T,WAv+BG,EAu+BUkU,cAv+BV,EAu+B0B;AACzC,SAAKjU,YAAL,GAAoBkM,IAAI,CAACK,IAAL,CAAUxM,WAAV,CAApB;AACA,SAAKD,aAAL,CAAmBkU,YAAnB,CAAgC,KAAKhU,YAArC,EAFyC,CAIzC;;AACA,QAAI,KAAKC,gBAAL,IAAyB+B,MAAM,CAACuP,mBAApC,EAAyD;AACvD,UAAI0C,cAAJ,EAAoB;AAClB1C,QAAAA,mBAAmB,CAAC2C,uBAApB;AACD,OAFD,MAEO;AACL3C,QAAAA,mBAAmB,CAACwC,wBAApB,CAA6C,KAAK/T,YAAlD;AACD;AACF;AACF,GAn/BgB;;AAq/BjB;;;AAGAkD,EAAAA,QAx/BiB,sBAw/BN;AACT,SAAKqM,SAAL,CAAe,KAAKrO,OAAL,CAAawE,GAA5B;AACAyO,IAAAA,OAAO,CAAC,GAAD,CAAP;AAEA,SAAK3H,IAAL;AACA,SAAK7L,OAAL,GAAe,IAAf;AACA,SAAKb,aAAL,CAAmBsU,WAAnB,GAAiC,KAAjC;AAEA,SAAKvU,IAAL,CAAUoL,MAAV,CAAiB,GAAjB,EAAsBF,IAAI,CAACsJ,MAAL,CAAYrY,OAAlC,EARS,CAUT;;AACA,QAAI,CAAC,KAAK0Q,aAAV,EAAyB;AACvB,UAAM4H,aAAa,GAAGlS,QAAQ,GAC1BrI,wDAA8BC,QAA9B,CAAuCmB,IADb,GAE1BpB,wDAA8BC,QAA9B,CAAuCC,IAF3C;;AAIA,UAAI,KAAK0F,MAAT,EAAiB;AACf,YAAIxB,MAAM,CAAC0D,oBAAX,EAAiC;AAC/B,eAAK6K,aAAL,GAAqB,IAAI6H,aAAJ,CACjB,KAAK5U,MADY,EACJ2U,aAAa,CAACxZ,WADV,EACuBwZ,aAAa,CAACzZ,OADrC,EAEjB,KAAKsE,UAFY,EAEAmV,aAAa,CAACpZ,YAFd,EAGjB,KAAKsE,iBAHY,CAArB;AAID,SALD,MAKO;AACL,eAAKkN,aAAL,GAAqB,IAAI6H,aAAJ,CACjB,KAAK5U,MADY,EACJ2U,aAAa,CAACxZ,WADV,EACuBwZ,aAAa,CAACzZ,OADrC,EAEjB,KAAKsE,UAFY,CAArB;AAGD;AACF;AACF;;AAED,SAAKuN,aAAL,CAAmBD,IAAnB,CAAwB,KAAKjN,iBAA7B,EAAgD,KAAKK,IAArD,EA9BS,CAgCT;;AACA,QAAI,KAAKE,WAAL,GAAmB,KAAKC,YAA5B,EAA0C;AACxC,WAAKyT,aAAL,CAAmB,KAAK1T,WAAxB;AACD;;AAEDrB,IAAAA,QAAQ,CAACyJ,cAAT,CAAwB,cAAxB,EAAwCqM,SAAxC,GAAoD,sBAAsB,CAAC,CAAC,KAAKzU,WAAL,GAAqB,KAAKA,WAAN,GAAmB,CAAxC,IAA4C,GAA7C,EAAkD0U,QAAlD,EAAtB,GAAqF,kDAAzI;AACAnW,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACyJ,cAAT,CAAwB,cAAxB,CAAZ,EAtCS,CAwCT;;AACA,SAAKjI,IAAL,GAAY+N,YAAY,EAAxB;;AAEA,QAAI9P,MAAM,CAACqP,SAAX,EAAsB;AACpB,WAAKrM,gBAAL,CAAsBuT,OAAtB;AACApK,MAAAA,cAAc,CACVR,aAAa,CAAC/G,YAAY,CAACG,QAAd,CAAb,CACKyR,OADL,CAEQ,IAFR,EAGQ,KAAK7U,aAAL,CAAmB6P,iBAAnB,CAAqC,KAAK5P,WAA1C,EACK0U,QADL,EAHR,IAKA,GALA,GAMA3K,aAAa,CAAC/G,YAAY,CAACI,SAAd,CAAb,CACKwR,OADL,CAEQ,IAFR,EAIQ,KAAK7U,aAAL,CAAmB6P,iBAAnB,CAAqC,KAAK3P,YAA1C,EACKyU,QADL,EAJR,CAPU,CAAd;AAaA,WAAK7V,WAAL,CAAiBmL,YAAjB,CACI,OADJ,EACaD,aAAa,CAAC/G,YAAY,CAACC,SAAd,CAD1B;AAED;;AACD,SAAK4N,eAAL;AACA,SAAKD,kBAAL,CAAwB,KAAxB;AACD,GAvjCgB;AAyjCjBnE,EAAAA,IAzjCiB,kBAyjCV;AACL,SAAKW,aAAL,CAAmB,KAAnB;AACA,SAAKvM,MAAL,GAAc,IAAd;AACAgU,IAAAA,oBAAoB,CAAC,KAAKd,KAAN,CAApB;AACA,SAAKA,KAAL,GAAa,CAAb;AACA,SAAK3S,gBAAL,CAAsBuT,OAAtB;AACD,GA/jCgB;AAikCjBpC,EAAAA,IAjkCiB,kBAikCV;AACL,QAAI,CAAC,KAAK3R,OAAV,EAAmB;AACjB,WAAKwM,aAAL,CAAmB,IAAnB;AACA,WAAKvM,MAAL,GAAc,KAAd;AACA,WAAKf,IAAL,CAAUoL,MAAV,CAAiB,CAAjB,EAAoBF,IAAI,CAACsJ,MAAL,CAAYQ,OAAhC;AACA,WAAK3U,IAAL,GAAY+N,YAAY,EAAxB;AACA,WAAKhD,MAAL;AACA,WAAK9J,gBAAL,CAAsBoM,UAAtB;AACD;AACF,GA1kCgB;AA4kCjBH,EAAAA,OA5kCiB,qBA4kCP;AACR,QAAI,CAAC,KAAK0G,KAAV,EAAiB;AACf,WAAK9S,SAAL;AACA,WAAKb,WAAL,GAAmB,CAAnB;AACA,WAAKgN,aAAL,CAAmB,IAAnB;AACA,WAAKG,WAAL;AACA,WAAK1M,MAAL,GAAc,KAAd;AACA,WAAKD,OAAL,GAAe,KAAf;AACA,WAAKZ,WAAL,GAAmB,CAAnB;AACA,WAAK6H,QAAL,CAAc,KAAK7I,MAAL,CAAYjB,KAA1B;AACA,WAAKoC,IAAL,GAAY+N,YAAY,EAAxB;AACA,WAAKrP,WAAL,CAAiB0I,SAAjB,CAA2BwN,MAA3B,CAAkC3W,MAAM,CAAC4G,OAAP,CAAe/I,OAAjD;AACA,WAAKsQ,WAAL;AACA,WAAKxM,aAAL,CAAmBuS,KAAnB;AACA,WAAKzH,OAAL,CAAayH,KAAb;AACA,WAAKxS,IAAL,CAAUwS,KAAV;AACA,WAAK9C,SAAL,CAAe,KAAKrO,OAAL,CAAauE,YAA5B;AACA,WAAKgK,MAAL,CAAY,IAAZ;AACA,WAAKsF,UAAL,GAAkB,IAAlB;AACA,WAAK9J,MAAL;AACA,WAAKyB,aAAL,CAAmB2F,KAAnB;AACA,WAAKlR,gBAAL,CAAsBoM,UAAtB;AACA,WAAK3O,WAAL,CAAiBmL,YAAjB,CAA8B,OAA9B,EAAuCD,aAAa,CAAC/G,YAAY,CAACK,IAAd,CAApD;AACAkH,MAAAA,cAAc,CAACR,aAAa,CAAC/G,YAAY,CAACM,OAAd,CAAd,CAAd;AACD;AACF,GArmCgB;AAumCjB8J,EAAAA,aAvmCiB,yBAumCH6H,SAvmCG,EAumCQ;AACvB,QAAI,KAAKlW,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqBwI,SAArB,CAA+BwJ,MAA/B,CAAsCC,YAAtC,EAAoD,CAACiE,SAArD;AACD;;AACD,SAAKtU,OAAL,GAAesU,SAAf;AACD,GA5mCgB;;AA8mCjB;;;;AAIA/I,EAAAA,YAlnCiB,0BAknCF;AACb;AACA;AACA,WAAOtJ,MAAM,GAAGjE,QAAQ,CAACuW,KAAT,CAAe/L,OAAf,CAAuBrG,eAAvB,KAA2C,CAA9C,GACGnE,QAAQ,CAACuW,KAAT,KAAmBpS,eADnC;AAED,GAvnCgB;;AAynCjB;;;AAGAwK,EAAAA,aA5nCiB,2BA4nCD;AACd3O,IAAAA,QAAQ,CAACwW,IAAT,CAAc5N,SAAd,CAAwBC,GAAxB,CAA4BpJ,MAAM,CAAC4G,OAAP,CAAeC,WAA3C;AACA,SAAKoH,2BAAL;AACD,GA/nCgB;;AAioCjB;;;AAGAA,EAAAA,2BApoCiB,yCAooCa;AAC5B,QAAM+I,YAAY,GAAGnT,MAAM,CAACoT,WAA5B;AACA,QAAMC,WAAW,GAAGF,YAAY,GAAG,KAAKhW,UAAL,CAAgBnC,MAAnD;AACA,QAAMsY,UAAU,GAAGtT,MAAM,CAACuT,UAAP,GAAoB,KAAKpW,UAAL,CAAgB7B,KAAvD;AACA,QAAM8K,KAAK,GAAG8D,IAAI,CAACsJ,GAAL,CAAS,CAAT,EAAYtJ,IAAI,CAACC,GAAL,CAASkJ,WAAT,EAAsBC,UAAtB,CAAZ,CAAd;AACA,QAAMG,kBAAkB,GAAG,KAAKtW,UAAL,CAAgBnC,MAAhB,GAAyBoL,KAApD,CAL4B,CAM5B;AACA;;AACA,QAAMsN,UAAU,GAAGxJ,IAAI,CAACK,IAAL,CAAUL,IAAI,CAACsJ,GAAL,CAAS,CAAT,EAAY,CAACL,YAAY,GAAGM,kBAAf,GACtCtX,MAAM,CAACY,MAAP,CAAcwF,gCADuB,IAErCpG,MAAM,CAACY,MAAP,CAAcyF,gCAFW,CAAV,IAGfxC,MAAM,CAACK,gBAHX;AAKA,QAAMsT,QAAQ,GAAGhT,MAAM,GAAG,CAACyF,KAAD,GAAS,GAAT,GAAeA,KAAlB,GAA0BA,KAAjD;AACA,SAAKxJ,WAAL,CAAiB+K,KAAjB,CAAuBiM,SAAvB,GACI,WAAWD,QAAX,GAAsB,eAAtB,GAAwCD,UAAxC,GAAqD,KADzD;AAED,GAppCgB;;AAspCjB;;;AAGAjI,EAAAA,kBAzpCiB,8BAypCErG,CAzpCF,EAypCK;AACpB,QAAI1I,QAAQ,CAACmX,MAAT,IAAmBnX,QAAQ,CAACoX,YAA5B,IAA4C1O,CAAC,CAAChL,IAAF,KAAW,MAAvD,IACAsC,QAAQ,CAACqX,eAAT,KAA6B,SADjC,EAC4C;AAC1C,WAAKvJ,IAAL;AACD,KAHD,MAGO,IAAI,CAAC,KAAK7L,OAAV,EAAmB;AACxB,WAAKd,IAAL,CAAUwS,KAAV;AACA,WAAKC,IAAL;AACD;AACF,GAjqCgB;;AAmqCjB;;;;AAIA/C,EAAAA,SAvqCiB,qBAuqCPyG,WAvqCO,EAuqCM;AACrB,QAAIA,WAAJ,EAAiB;AACf,UAAMC,UAAU,GAAG,KAAK7U,YAAL,CAAkB8U,kBAAlB,EAAnB;AACAD,MAAAA,UAAU,CAAC9M,MAAX,GAAoB6M,WAApB;AACAC,MAAAA,UAAU,CAACE,OAAX,CAAmB,KAAK/U,YAAL,CAAkBgV,WAArC;AACAH,MAAAA,UAAU,CAACI,KAAX,CAAiB,CAAjB;AACD;AACF,GA9qCgB;;AAgrCjB;;;;AAIA5G,EAAAA,MAprCiB,kBAorCV4C,KAprCU,EAorCH;AACZ,QAAMiE,MAAM,GAAG5X,QAAQ,CAAC6X,iBAAxB;;AAEA,QAAIlE,KAAJ,EAAW;AACTiE,MAAAA,MAAM,CAAChP,SAAP,CAAiBwJ,MAAjB,CAAwB3S,MAAM,CAAC4G,OAAP,CAAeK,QAAvC,EACI,KADJ;AAEA,WAAKtE,WAAL,GAAmB,CAAnB;AACA,WAAKD,QAAL,GAAgB,KAAhB;AACD,KALD,MAKO;AACL,WAAKA,QAAL,GAAgByV,MAAM,CAAChP,SAAP,CAAiBwJ,MAAjB,CACZ3S,MAAM,CAAC4G,OAAP,CAAeK,QADH,EACa,KAAKoK,aADlB,CAAhB;AAED;AACF;AAhsCgB,CAAnB;AAosCA;;;;;;;;;;;;;;AAaArR,MAAM,CAACwM,mBAAP,GAA6B,UAAShL,MAAT,EAAiB6W,SAAjB,EAA4BC,UAA5B,EAAwC;AACnE,MAAMC,OAAO;AACT;AAAyC/W,EAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,CAD7C,CADmE,CAInE;;AACA,MAAMnI,gBAAgB,GAAG6J,IAAI,CAACyK,KAAL,CAAW3U,MAAM,CAACK,gBAAlB,KAAuC,CAAhE;AACA;;AACA,MAAMuU,iBAAiB,GACnB1K,IAAI,CAACyK,KAAL,CAAWD,OAAO,CAACG,4BAAnB,KAAoD,CADxD;AAEA,MAAMC,KAAK,GAAGzU,gBAAgB,GAAGuU,iBAAjC,CATmE,CAWnE;;AACA,MAAIvU,gBAAgB,KAAKuU,iBAAzB,EAA4C;AAC1C,QAAMG,QAAQ,GAAGP,SAAS,IAAI7W,MAAM,CAACtD,KAArC;AACA,QAAM2a,SAAS,GAAGP,UAAU,IAAI9W,MAAM,CAACrD,MAAvC;AAEAqD,IAAAA,MAAM,CAACtD,KAAP,GAAe0a,QAAQ,GAAGD,KAA1B;AACAnX,IAAAA,MAAM,CAACrD,MAAP,GAAgB0a,SAAS,GAAGF,KAA5B;AAEAnX,IAAAA,MAAM,CAACgK,KAAP,CAAatN,KAAb,GAAqB0a,QAAQ,GAAG,IAAhC;AACApX,IAAAA,MAAM,CAACgK,KAAP,CAAarN,MAAb,GAAsB0a,SAAS,GAAG,IAAlC,CAR0C,CAU1C;AACA;;AACAN,IAAAA,OAAO,CAACtO,KAAR,CAAc0O,KAAd,EAAqBA,KAArB;AACA,WAAO,IAAP;AACD,GAdD,MAcO,IAAIzU,gBAAgB,KAAK,CAAzB,EAA4B;AACjC;AACA;AACA1C,IAAAA,MAAM,CAACgK,KAAP,CAAatN,KAAb,GAAqBsD,MAAM,CAACtD,KAAP,GAAe,IAApC;AACAsD,IAAAA,MAAM,CAACgK,KAAP,CAAarN,MAAb,GAAsBqD,MAAM,CAACrD,MAAP,GAAgB,IAAtC;AACD;;AACD,SAAO,KAAP;AACD,CAjCD;AAoCA;;;;;;AAIA6B,MAAM,CAAC0D,oBAAP,GAA8B,YAAW;AACvC;AACA,SAAO,KAAP;AACD,CAHD;AAMA;;;;;;AAIA,SAAS0I,gBAAT,GAA4B;AAC1B,OAAKiD,SAAL,GAAiB,KAAjB;AACA,OAAKkJ,OAAL,GAAe,IAAf;AACA,OAAKO,MAAL,GAAc,IAAd;AACD;;AAED1M,gBAAgB,CAACzD,SAAjB,GAA6B;AAC3B4B,EAAAA,IAD2B,kBACpB;AACL,SAAK8E,SAAL,GAAiB,IAAjB;;AACA,QAAI,CAAC,KAAKkJ,OAAV,EAAmB;AACjB;AACA,WAAKA,OAAL,GAAe1U,MAAM,CAACkV,kBAAP,GAA4B,IAAIA,kBAAJ,EAA5B,GAC4B,IAAItO,YAAJ,EAD3C;;AAEA,UAAItG,MAAJ,EAAY;AACV,aAAKoU,OAAL,CAAaS,aAAb,GAA8B,YAAW;AACV,cAAI,KAAKT,OAAL,CAAavD,KAAb,IAAsB,SAA1B,EAAqC;AACnC,iBAAKuD,OAAL,CAAaU,MAAb;AACD;AACF,SAJD,CAIGlV,IAJH,CAIQ,IAJR,CAA7B;;AAKA,aAAKwU,OAAL,CAAaU,MAAb;AACD;;AACD,WAAKH,MAAL,GAAc,KAAKP,OAAL,CAAaW,kBAAb,GACV,KAAKX,OAAL,CAAaW,kBAAb,EADU,GAEV,IAFJ;AAGD;AACF,GAnB0B;AAqB3B3C,EAAAA,OArB2B,qBAqBjB;AACR,SAAKhD,eAAL;AACD,GAvB0B;;AAyB3B;;;;;;;;AAQA4F,EAAAA,QAjC2B,oBAiClBC,SAjCkB,EAiCPC,SAjCO,EAiCIC,QAjCJ,EAiCcC,OAjCd,EAiCuBC,OAjCvB,EAiCgC;AACzD,QAAMC,IAAI,GAAG,KAAKlB,OAAL,CAAamB,gBAAb,EAAb;AACA,QAAMC,IAAI,GAAG,KAAKpB,OAAL,CAAamB,gBAAb,EAAb;AACA,QAAME,MAAM,GAAG,KAAKrB,OAAL,CAAasB,UAAb,EAAf,CAHyD,CAKzD;;AACAJ,IAAAA,IAAI,CAACxb,IAAL,GAAY,UAAZ;AACA0b,IAAAA,IAAI,CAAC1b,IAAL,GAAY,UAAZ;AACA2b,IAAAA,MAAM,CAACE,IAAP,CAAYvQ,KAAZ,GAAoB,GAApB,CARyD,CAUzD;;AACA,QAAI,KAAKuP,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYiB,GAAZ,CAAgBxQ,KAAhB,GAAwBiQ,OAAO,IAAI,CAAnC;AACAC,MAAAA,IAAI,CAACzB,OAAL,CAAa4B,MAAb,EAAqB5B,OAArB,CAA6B,KAAKc,MAAlC;AACAa,MAAAA,IAAI,CAAC3B,OAAL,CAAa4B,MAAb,EAAqB5B,OAArB,CAA6B,KAAKc,MAAlC;AACA,WAAKA,MAAL,CAAYd,OAAZ,CAAoB,KAAKO,OAAL,CAAaN,WAAjC;AACD,KALD,MAKO;AACLwB,MAAAA,IAAI,CAACzB,OAAL,CAAa4B,MAAb;AACAD,MAAAA,IAAI,CAAC3B,OAAL,CAAa4B,MAAb;AACAA,MAAAA,MAAM,CAAC5B,OAAP,CAAe,KAAKO,OAAL,CAAaN,WAA5B;AACD,KApBwD,CAsBzD;;;AACAwB,IAAAA,IAAI,CAACL,SAAL,CAAe7P,KAAf,GAAuB6P,SAAS,GAAG,CAAnC;AACAO,IAAAA,IAAI,CAACP,SAAL,CAAe7P,KAAf,GAAuB6P,SAAS,GAAG,CAAnC,CAxByD,CA0BzD;;AACAQ,IAAAA,MAAM,CAACE,IAAP,CAAYE,cAAZ,CAA2BT,OAAO,IAAI,IAAtC,EAA4CF,SAAS,GAAGC,QAAZ,GAAuB,IAAnE;AACAM,IAAAA,MAAM,CAACE,IAAP,CAAYG,uBAAZ,CAAoC,OAApC,EAA6CZ,SAAS,GAAGC,QAAzD,EA5ByD,CA8BzD;;AACAG,IAAAA,IAAI,CAACvB,KAAL,CAAWmB,SAAX;AACAM,IAAAA,IAAI,CAACzB,KAAL,CAAWmB,SAAX,EAhCyD,CAiCzD;;AACAI,IAAAA,IAAI,CAACpL,IAAL,CAAUgL,SAAS,GAAGC,QAAtB;AACAK,IAAAA,IAAI,CAACtL,IAAL,CAAUgL,SAAS,GAAGC,QAAtB;AACD,GArE0B;AAuE3BlK,EAAAA,UAvE2B,wBAuEd;AACX,QAAI,KAAKC,SAAT,EAAoB;AAClB,UAAMQ,GAAG,GAAG,KAAK0I,OAAL,CAAa2B,WAAzB;AACA,WAAKf,QAAL,CAAc,OAAd,EAAuBtJ,GAAvB,EAA4B,KAA5B;AACA,WAAKsJ,QAAL,CAAc,OAAd,EAAuBtJ,GAAG,GAAG,KAA7B,EAAoC,KAApC;AACA,WAAKsK,aAAL;AACD;AACF,GA9E0B;AAgF3BA,EAAAA,aAhF2B,2BAgFX;AACd,QAAI,KAAK9K,SAAL,IAAkB,CAAC,KAAK+K,iBAA5B,EAA+C;AAC7C,WAAKA,iBAAL,GAAyB9M,WAAW,CAAC,YAAW;AAC9C,aAAK6L,QAAL,CAAc,KAAd,EAAqB,KAAKZ,OAAL,CAAa2B,WAAlC,EAA+C,IAA/C,EAAqD,IAArD;AACA,aAAKf,QAAL,CAAc,KAAd,EAAqB,KAAKZ,OAAL,CAAa2B,WAAb,GAA2B,KAAhD,EAAuD,KAAvD,EAA8D,IAA9D;AACD,OAHoC,CAGnCnW,IAHmC,CAG9B,IAH8B,CAAD,EAGtB,GAHsB,CAApC;AAID;AACF,GAvF0B;AAyF3BwP,EAAAA,eAzF2B,6BAyFT;AAChB,QAAI,KAAKlE,SAAL,IAAkB,KAAK+K,iBAA3B,EAA8C;AAC5C7M,MAAAA,aAAa,CAAC,KAAK6M,iBAAN,CAAb;AACA,WAAKA,iBAAL,GAAyB,IAAzB;AACA,WAAKjB,QAAL,CAAc,MAAd,EAAsB,KAAKZ,OAAL,CAAa2B,WAAnC,EAAgD,KAAhD,EAAuD,IAAvD;AACA,WAAKf,QAAL,CAAc,MAAd,EAAsB,KAAKZ,OAAL,CAAa2B,WAAb,GAA2B,KAAjD,EAAwD,KAAxD,EAA+D,IAA/D;AACD;AACF,GAhG0B;AAkG3BhJ,EAAAA,OAlG2B,qBAkGjB;AACR,QAAI,KAAK7B,SAAT,EAAoB;AAClB,WAAKkE,eAAL;AACA,UAAM1D,GAAG,GAAG,KAAK0I,OAAL,CAAa2B,WAAzB;AACA,WAAKf,QAAL,CAAc,MAAd,EAAsBtJ,GAAtB,EAA2B,KAA3B;AACA,WAAKsJ,QAAL,CAAc,OAAd,EAAuBtJ,GAAG,GAAG,KAA7B,EAAoC,KAApC;AACD;AACF,GAzG0B;AA2G3B5K,EAAAA,IA3G2B,kBA2GpB;AACL,QAAI,KAAKoK,SAAT,EAAoB;AAClB,UAAMQ,GAAG,GAAG,KAAK0I,OAAL,CAAa2B,WAAzB;AACA,WAAKf,QAAL,CAAc,MAAd,EAAsBtJ,GAAtB,EAA2B,KAA3B,EAAkC,GAAlC,EAAuC,CAAC,GAAxC;AACA,WAAKsJ,QAAL,CAAc,GAAd,EAAmBtJ,GAAG,GAAG,KAAzB,EAAgC,KAAhC,EAAuC,GAAvC,EAA4C,CAAC,GAA7C;AACD;AACF;AAjH0B,CAA7B;AAqHA;;;;;AAIA,SAASwK,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,MAAI,qBAAqBzW,MAAzB,EAAiC;AAC/B,QAAM0W,GAAG,GAAG,IAAIC,wBAAJ,CAA6BF,MAA7B,CAAZ;AACA,QAAMG,MAAM,GAAG5W,MAAM,CAAC6W,eAAP,CAAuBC,SAAvB,EAAf;AACAJ,IAAAA,GAAG,CAACK,IAAJ,GAAWN,MAAX;AACAI,IAAAA,eAAe,CAACG,KAAhB,CAAsBN,GAAtB;AACD;AACF;AAGD;;;;;;AAIA,SAASpO,cAAT,CAAwBmO,MAAxB,EAAgC;AAC9B,MAAIta,MAAM,CAAC8L,YAAX,EAAyB;AACvB9L,IAAAA,MAAM,CAAC8L,YAAP,CAAoBC,WAApB,GAAkC,EAAlC;AACA/L,IAAAA,MAAM,CAAC8L,YAAP,CAAoBC,WAApB,GAAkCuO,MAAlC;AACD;AACF;AAGD;;;;;;;AAKA,SAAS3O,aAAT,CAAuBmP,UAAvB,EAAmC;AACjC;AACA;AACA;AACA,SAAO,EAAP;AACD;AAGD;;;;;;;AAKA,SAASC,YAAT,CAAsB/M,GAAtB,EAA2BqJ,GAA3B,EAAgC;AAC9B,SAAOtJ,IAAI,CAACyK,KAAL,CAAWzK,IAAI,CAACiN,MAAL,MAAiB3D,GAAG,GAAGrJ,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACD;AAGD;;;;;;AAIA,SAASgI,OAAT,CAAiBsD,QAAjB,EAA2B;AACzB,MAAI/U,SAAS,IAAIV,MAAM,CAACQ,SAAP,CAAiB2R,OAAlC,EAA2C;AACzCnS,IAAAA,MAAM,CAACQ,SAAP,CAAiB2R,OAAjB,CAAyBsD,QAAzB;AACD;AACF;AAGD;;;;;;;;;;AAQA,SAASzN,YAAT,CAAsBoP,SAAtB,EAAiC/c,KAAjC,EAAwCC,MAAxC,EAAgD+c,aAAhD,EAA+D;AAC7D,MAAM1Z,MAAM;AACR;AAAmCjB,EAAAA,QAAQ,CAACsI,aAAT,CAAuB,QAAvB,CADvC;AAEArH,EAAAA,MAAM,CAACsH,SAAP,GAAmBoS,aAAa,GAAGlb,MAAM,CAAC4G,OAAP,CAAeE,MAAf,GAAwB,GAAxB,GAC/BoU,aAD4B,GACZlb,MAAM,CAAC4G,OAAP,CAAeE,MADnC;AAEAtF,EAAAA,MAAM,CAACtD,KAAP,GAAeA,KAAf;AACAsD,EAAAA,MAAM,CAACrD,MAAP,GAAgBA,MAAhB;AACA8c,EAAAA,SAAS,CAAClS,WAAV,CAAsBvH,MAAtB;AAEA,SAAOA,MAAP;AACD;AAGD;;;;;;AAIA,SAASyJ,yBAAT,CAAmCkQ,YAAnC,EAAiD;AAC/C,MAAMC,GAAG,GAAID,YAAY,CAACvS,MAAb,GAAsB,CAAvB,GAA4B,CAAxC;AACA,MAAMyS,GAAG,GAAGC,IAAI,CAACH,YAAD,CAAhB;AACA,MAAMI,WAAW,GAAG,IAAIC,WAAJ,CAAgBJ,GAAhB,CAApB;AACA,MAAMK,KAAK,GAAG,IAAIC,UAAJ,CAAeH,WAAf,CAAd;;AAEA,OAAK,IAAI7G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0G,GAApB,EAAyB1G,CAAC,EAA1B,EAA8B;AAC5B+G,IAAAA,KAAK,CAAC/G,CAAD,CAAL,GAAW2G,GAAG,CAACM,UAAJ,CAAejH,CAAf,CAAX;AACD;;AACD,SAAO+G,KAAK,CAACzQ,MAAb;AACD;AAGD;;;;;;AAIA,SAAS8E,YAAT,GAAwB;AACtB,SAAO3L,MAAM,GAAG,IAAIyX,IAAJ,GAAWC,OAAX,EAAH,GAA0BC,WAAW,CAACjM,GAAZ,EAAvC;AACD,EAGD;;AAGA;;;;;;;;;;;;AAUA,SAASuG,aAAT,CACI5U,MADJ,EACYua,UADZ,EACwBC,aADxB,EACuChb,UADvC,EACmDib,oBADnD,EAEIC,iBAFJ,EAEuB;AACrB,OAAK1a,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyCD,EAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,CAD7C;AAEA,OAAK8P,gBAAL,GAAwBnb,UAAxB;AACA,OAAK+a,UAAL,GAAkBA,UAAlB;AACA,OAAKC,aAAL,GAAqBA,aAArB;AACA,OAAKI,gBAAL,GAAwBH,oBAAxB;AACA,OAAK5a,iBAAL,GAAyB6a,iBAAzB,CARqB,CAUrB;;AACA,OAAKG,cAAL,GAAsB,CAAtB;AACA,OAAKC,SAAL,GAAiB,CAAjB;AACA,OAAKC,YAAL,GAAoB,CAApB;AAEA,OAAKC,aAAL,GAAqB,IAArB;AAEA,OAAK5F,UAAL,GAAkB,CAAlB;AACA,OAAK6F,YAAL,GAAoB,CAApB;AACA,OAAKC,YAAL,GAAoB,IAApB;AACD;;AAEDtG,aAAa,CAACuG,qBAAd,GAAsC,GAAtC;AACAvG,aAAa,CAACwG,mBAAd,GAAoC,GAApC;AACAxG,aAAa,CAACyG,gBAAd,GAAiC,CAAjC;AAEA;;;;AAGAzG,aAAa,CAAC0G,UAAd,GAA2B;AACzBC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,CADiB;AAEzB9a,EAAAA,UAAU,EAAEmU,aAAa,CAACuG,qBAAd,GAAsC;AAFzB,CAA3B;AAKA;;;;;AAIAvG,aAAa,CAACpV,UAAd,GAA2B;AACzBgc,EAAAA,MAAM,EAAE,CADiB;AAEzBC,EAAAA,MAAM,EAAE,EAFiB;AAGzBC,EAAAA,UAAU,EAAE,GAHa;AAIzBC,EAAAA,WAAW,EAAE,EAJY;AAKzBC,EAAAA,aAAa,EAAE,EALU;AAMzBC,EAAAA,cAAc,EAAE;AANS,CAA3B;AAUAjH,aAAa,CAACzN,SAAd,GAA0B;AACxB;;;;;AAKA6F,EAAAA,gBANwB,4BAMPtQ,KANO,EAMAoa,UANA,EAMY;AAClC,SAAK6D,gBAAL,CAAsBhd,KAAtB,GAA8BjB,KAA9B;;AACA,QAAIoa,UAAJ,EAAgB;AACd,WAAK6D,gBAAL,CAAsBtd,MAAtB,GAA+ByZ,UAA/B;AACD;;AACD,SAAKiE,YAAL,GAAoBnG,aAAa,CAAC0G,UAAd,CAAyBC,MAAzB,CAAgCnU,MAAhC,GAAyC,CAA7D;AACD,GAZuB;AAcxB0U,EAAAA,gBAdwB,4BAcPtc,UAdO,EAcKuc,cAdL,EAcqB;AAC3C,QAAMC,OAAO,GAAG,KAAKrB,gBAAL,CAAsBhd,KAAtB,GAA8B,CAA9C;AACA,QAAIse,WAAW,GAAGzc,UAAU,CAACgc,MAA7B;AACA,QAAIU,WAAW,GAAG1c,UAAU,CAACic,MAA7B;AACA,QAAIU,eAAe,GAAG3c,UAAU,CAACkc,UAAjC;AACA,QAAIU,gBAAgB,GAAG5c,UAAU,CAACmc,WAAlC;AAEA,QAAMU,WAAW,GAAG9P,IAAI,CAAC+P,KAAL,CAAWN,OAAO,GAAIxc,UAAU,CAACkc,UAAX,GAAwB,CAA9C,CAApB;AACA,QAAMa,WAAW,GAAGhQ,IAAI,CAAC+P,KAAL,CAAW,CAAC,KAAK3B,gBAAL,CAAsBtd,MAAtB,GAA+B,EAAhC,IAAsC,CAAjD,CAApB;AACA,QAAMmf,eAAe,GAAGhd,UAAU,CAACkc,UAAnC;AACA,QAAMe,gBAAgB,GAAGjd,UAAU,CAACmc,WAApC;;AAEA,QAAIlZ,QAAJ,EAAc;AACZyZ,MAAAA,WAAW,IAAI,CAAf;AACAD,MAAAA,WAAW,IAAI,CAAf;AACAE,MAAAA,eAAe,IAAI,CAAnB;AACAC,MAAAA,gBAAgB,IAAI,CAApB;AACD;;AAED,QAAI,CAACL,cAAL,EAAqB;AACnBE,MAAAA,WAAW,IAAI,KAAK1B,UAAL,CAAgB/f,CAA/B;AACA0hB,MAAAA,WAAW,IAAI,KAAK3B,UAAL,CAAgB9f,CAA/B;AACD;;AAED,QAAMiiB,YAAY,GACdX,cAAc,GAAGvd,MAAM,CAACoK,oBAAV,GAAiCpK,MAAM,CAACqK,eAD1D;AAGA,SAAK5I,SAAL,CAAe0c,IAAf;;AAEA,QAAI3Z,MAAJ,EAAY;AACV,WAAK/C,SAAL,CAAe2c,SAAf,CAAyB,KAAKjC,gBAAL,CAAsBhd,KAA/C,EAAsD,CAAtD;AACA,WAAKsC,SAAL,CAAewI,KAAf,CAAqB,CAAC,CAAtB,EAAyB,CAAzB;AACD,KAhC0C,CAkC3C;;;AACA,SAAKxI,SAAL,CAAe4c,SAAf,CACIH,YADJ,EACkBT,WADlB,EAC+BC,WAD/B,EAC4CC,eAD5C,EAEIC,gBAFJ,EAEsBC,WAFtB,EAEmCE,WAFnC,EAEgDC,eAFhD,EAGIC,gBAHJ;AAKA,SAAKxc,SAAL,CAAe6c,OAAf;AACD,GAvDuB;;AAyDxB;;;AAGAC,EAAAA,mBA5DwB,+BA4DJ7c,IA5DI,EA4DE;AACxB;AACA,QAAI,KAAKL,iBAAL,IAA0BrB,MAAM,CAACmB,gBAAP,CAAwBqd,mBAAtD,EAA2E;AACzE,UAAMC,gBAAgB,GAAGze,MAAM,CAACmB,gBAAP,CAAwBqd,mBAAjD;AAEA,UAAIE,qBAAqB,GAAGD,gBAAgB,CAACtf,KAA7C;AACA,UAAIwf,sBAAsB,GAAGF,gBAAgB,CAAC5f,MAA9C;AACA,UAAM+f,iBAAiB,GAAGld,IAAI,CAACsP,IAAL,GAAYyN,gBAAgB,CAACI,QAAvD;AACA,UAAMC,iBAAiB,GAAGpd,IAAI,CAACtD,IAAL,GAAYqgB,gBAAgB,CAACM,QAAvD;;AAEA,UAAI9a,QAAJ,EAAc;AACZya,QAAAA,qBAAqB,IAAI,CAAzB;AACAC,QAAAA,sBAAsB,IAAI,CAA1B;AACD;;AAED,WAAKld,SAAL,CAAe4c,SAAf,CACIre,MAAM,CAACoK,oBADX,EACiC,KAAKgS,gBAAL,CAAsBpgB,CADvD,EAEI,KAAKogB,gBAAL,CAAsBngB,CAF1B,EAE6ByiB,qBAF7B,EAGIC,sBAHJ,EAG4BC,iBAH5B,EAG+CE,iBAH/C,EAIIL,gBAAgB,CAACtf,KAJrB,EAI4Bsf,gBAAgB,CAAC5f,MAJ7C;AAKD;AACF,GAjFuB;;AAmFxB;;;AAGAmgB,EAAAA,iBAtFwB,+BAsFJ;AAClB,QAAMhe,UAAU,GAAGoV,aAAa,CAACpV,UAAjC;AACA,QAAIie,SAAS,GAAG7I,aAAa,CAAC0G,UAAd,CAAyBC,MAAzB,CAAgC,KAAKR,YAArC,CAAhB;AACA,QAAI2C,kBAAkB,GAAGle,UAAU,CAACoc,aAApC;AACA,QAAI+B,mBAAmB,GAAGne,UAAU,CAACqc,cAArC;AACA,QAAM+B,cAAc,GACf,KAAKjD,gBAAL,CAAsBhd,KAAtB,GAA8B,CAA/B,GAAqC6B,UAAU,CAACoc,aAAX,GAA2B,CADpE;AAEA,QAAMiC,cAAc,GAAG,KAAKlD,gBAAL,CAAsBtd,MAAtB,GAA+B,CAAtD;;AAEA,QAAIoF,QAAJ,EAAc;AACZib,MAAAA,kBAAkB,IAAI,CAAtB;AACAC,MAAAA,mBAAmB,IAAI,CAAvB;AACAF,MAAAA,SAAS,IAAI,CAAb;AACD;;AAED,SAAKxd,SAAL,CAAe0c,IAAf;;AAEA,QAAI3Z,MAAJ,EAAY;AACV,WAAK/C,SAAL,CAAe2c,SAAf,CAAyB,KAAKjC,gBAAL,CAAsBhd,KAA/C,EAAsD,CAAtD;AACA,WAAKsC,SAAL,CAAewI,KAAf,CAAqB,CAAC,CAAtB,EAAyB,CAAzB;AACD;;AAED,SAAKxI,SAAL,CAAe4c,SAAf,CACIre,MAAM,CAACqK,eADX,EAC4B,KAAK2R,aAAL,CAAmBhgB,CAAnB,GAAuBijB,SADnD,EAEI,KAAKjD,aAAL,CAAmB/f,CAFvB,EAE0BijB,kBAF1B,EAE8CC,mBAF9C,EAGIC,cAHJ,EAGoBC,cAHpB,EAGoCre,UAAU,CAACoc,aAH/C,EAIIpc,UAAU,CAACqc,cAJf;AAKA,SAAK5b,SAAL,CAAe6c,OAAf;AACD,GAlHuB;;AAqHxB;;;;;AAKAhQ,EAAAA,IA1HwB,gBA0HnBgR,qBA1HmB,EA0HIC,QA1HJ,EA0Hc;AACpC,QAAID,qBAAJ,EAA2B;AACzB,WAAKje,iBAAL,GAAyBie,qBAAzB;AACD;;AAED,SAAKhC,gBAAL,CAAsBlH,aAAa,CAACpV,UAApC,EAAgD,KAAhD;AACA,SAAKge,iBAAL;AACA,SAAKT,mBAAL,CAAyBgB,QAAzB;AACA,SAAKzS,MAAL;AACD,GAnIuB;;AAqIxB;;;AAGAA,EAAAA,MAxIwB,oBAwIf;AACP;AACA,QAAM+C,GAAG,GAAGC,YAAY,EAAxB;AACA,QAAMC,SAAS,GAAGF,GAAG,IAAI,KAAKwM,cAAL,IAAuBxM,GAA3B,CAArB;AAEA,SAAKwM,cAAL,GAAsBxM,GAAtB;AACA,SAAKyM,SAAL,IAAkBvM,SAAlB;AACA,SAAK6G,UAAL,IAAmB7G,SAAnB,CAPO,CASP;AACA;AACA;AACA;;AACA,QAAI,KAAKwM,YAAL,IAAqB,CAArB,IACA,KAAKD,SAAL,GAAiBlG,aAAa,CAACwG,mBADnC,EACwD;AACtD,WAAKN,SAAL,GAAiB,CAAjB;AACA,WAAKC,YAAL;AACA,WAAKyC,iBAAL;AACD,KALD,MAKO,IACH,KAAKzC,YAAL,GAAoB,CAApB,IACA,KAAKA,YAAL,GAAoBnG,aAAa,CAAC0G,UAAd,CAAyBC,MAAzB,CAAgCnU,MAFjD,EAEyD;AAC9D,UAAI,KAAK0T,SAAL,IAAkBlG,aAAa,CAAC0G,UAAd,CAAyB7a,UAA/C,EAA2D;AACzD,aAAKsa,YAAL;AACA,aAAKyC,iBAAL;AACD;AACF,KAPM,MAOA,IACH,CAAC,KAAK3d,iBAAN,IACA,KAAKkb,YAAL,IAAqBnG,aAAa,CAAC0G,UAAd,CAAyBC,MAAzB,CAAgCnU,MAFlD,EAE0D;AAC/D,WAAKsL,KAAL;AACA;AACD,KA9BM,CAgCP;;;AACA,QAAI,KAAK7S,iBAAL,IACAzF,wDAA8BC,QAA9B,CAAuC2jB,yBAD3C,EACsE;AACpE,UAAMC,aAAa,GACf7jB,wDAA8BC,QAA9B,CAAuC2jB,yBAD3C;;AAGA,UAAI,KAAK/C,YAAL,GAAoBrG,aAAa,CAACyG,gBAAlC,IACA,KAAKjG,UAAL,GAAkB6I,aAAa,CAAC9Z,cADpC,EACoD;AAClD,aAAKiR,UAAL,GAAkB,CAAlB;AACA,aAAK8F,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AAEA,aAAKgD,uBAAL;;AACA,YAAI,KAAKhD,YAAT,EAAuB;AACrB,eAAKY,gBAAL,CAAsBlH,aAAa,CAACpV,UAApC,EAAgD,KAAhD;AACA,eAAKyb,YAAL;AACD,SAHD,MAGO;AACL,eAAKa,gBAAL,CAAsBmC,aAAtB,EAAqC,IAArC;AACD;AACF,OAZD,MAYO,IAAI,KAAKhD,YAAL,IAAqBrG,aAAa,CAACyG,gBAAvC,EAAyD;AAC9D,aAAK3I,KAAL;AACA;AACD;AACF;;AAED,SAAKsI,aAAL,GAAqBhI,qBAAqB,CAAC,KAAK1H,MAAL,CAAY/I,IAAZ,CAAiB,IAAjB,CAAD,CAA1C;AACD,GAjMuB;;AAmMxB;;;AAGA2b,EAAAA,uBAtMwB,qCAsME;AACxB,SAAKje,SAAL,CAAe0c,IAAf;AAEA,SAAK1c,SAAL,CAAe8N,SAAf,CACIxB,IAAI,CAAC+P,KAAL,CACI,KAAK3B,gBAAL,CAAsBhd,KAAtB,GAA8B,CAA9B,GACCiX,aAAa,CAACpV,UAAd,CAAyBkc,UAAzB,GAAsC,CAF3C,CADJ,EAIInP,IAAI,CAAC+P,KAAL,CAAW,CAAC,KAAK3B,gBAAL,CAAsBtd,MAAtB,GAA+B,EAAhC,IAAsC,CAAjD,CAJJ,EAKIuX,aAAa,CAACpV,UAAd,CAAyBkc,UAL7B,EAMI9G,aAAa,CAACpV,UAAd,CAAyBmc,WAAzB,GAAuC,CAN3C;AAOA,SAAK1b,SAAL,CAAe6c,OAAf;AACD,GAjNuB;AAmNxBpK,EAAAA,KAnNwB,mBAmNhB;AACN,QAAI,KAAKsI,aAAT,EAAwB;AACtB/F,MAAAA,oBAAoB,CAAC,KAAK+F,aAAN,CAApB;AACA,WAAKA,aAAL,GAAqB,IAArB;AACD;;AACD,SAAKF,SAAL,GAAiB,CAAjB;AACA,SAAKD,cAAL,GAAsB,CAAtB;AACA,SAAKE,YAAL,GAAoB,CAApB;AACA,SAAK3F,UAAL,GAAkB,CAAlB;AACA,SAAK6F,YAAL,GAAoB,CAApB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;AA9NuB,CAA1B,EAkOA;;AAEA;;;;;;;;;AAQA,SAASlM,iBAAT,CAA2BmP,QAA3B,EAAqCje,IAArC,EAA2Cke,aAA3C,EAA0D;AACxD,MAAMC,eAAe,GAAG7f,MAAM,CAACiB,iBAAP,CAAyB9B,KAAzB,GAAiCwgB,QAAQ,CAAC3O,IAAlE,CADwD,CAExD;AAEA;AACA;;AACA,MAAM8O,OAAO,GAAG,IAAI/hB,YAAJ,CACZ2D,IAAI,CAACsP,IAAL,GAAY,CADA,EAEZtP,IAAI,CAACtD,IAAL,GAAY,CAFA,EAGZsD,IAAI,CAACd,MAAL,CAAYzB,KAAZ,GAAoB,CAHR,EAIZuC,IAAI,CAACd,MAAL,CAAY/B,MAAZ,GAAqB,CAJT,CAAhB,CANwD,CAWxD;;AAEA,MAAMkhB,WAAW,GAAG,IAAIhiB,YAAJ,CAChB4hB,QAAQ,CAAC3O,IAAT,GAAgB,CADA,EAEhB2O,QAAQ,CAACvhB,IAAT,GAAgB,CAFA,EAGhBuhB,QAAQ,CAACjP,UAAT,CAAoBxS,KAApB,GAA4ByhB,QAAQ,CAACK,IAArC,GAA4C,CAH5B,EAIhBL,QAAQ,CAACjP,UAAT,CAAoBvS,MAApB,GAA6B,CAJb,CAApB,CAbwD,CAkBxD;AAEA;;AACA,MAAIyhB,aAAJ,EAAmB;AACjBK,IAAAA,kBAAkB,CAACL,aAAD,EAAgBE,OAAhB,EAAyBC,WAAzB,CAAlB;AACD,GAvBuD,CAyBxD;;;AACA,MAAIG,UAAU,CAACJ,OAAD,EAAUC,WAAV,CAAd,EAAsC;AACpC,QAAMvhB,cAAc,GAAGmhB,QAAQ,CAACnhB,cAAhC;AACA,QAAI2hB,kBAAkB,GAAG,EAAzB;;AAEA,QAAIngB,MAAM,CAAC0D,oBAAP,EAAJ,EAAmC;AACjCyc,MAAAA,kBAAkB,GAAGngB,MAAM,CAACmB,gBAAP,CAAwBvE,IAAxB,CAA6BkB,eAAlD;AACD,KAFD,MAEO;AACLqiB,MAAAA,kBAAkB,GAAGze,IAAI,CAAC4R,OAAL,GAAe1G,IAAI,CAACpO,cAAL,CAAoB4hB,OAAnC,GACexT,IAAI,CAACpO,cAAL,CAAoBkY,OADxD;AAED,KATmC,CAWpC;;;AACA,SAAK,IAAI2J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,kBAAkB,CAACvX,MAAvC,EAA+CyX,CAAC,EAAhD,EAAoD;AAClD,WAAK,IAAI3L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlW,cAAc,CAACoK,MAAnC,EAA2C8L,CAAC,EAA5C,EAAgD;AAC9C;AACA,YAAM4L,UAAU,GACZC,0BAA0B,CAACJ,kBAAkB,CAACE,CAAD,CAAnB,EAAwBP,OAAxB,CAD9B;AAEA,YAAMU,cAAc,GAChBD,0BAA0B,CAAC/hB,cAAc,CAACkW,CAAD,CAAf,EAAoBqL,WAApB,CAD9B;AAEA,YAAMvd,OAAO,GAAG0d,UAAU,CAACI,UAAD,EAAaE,cAAb,CAA1B,CAN8C,CAQ9C;;AACA,YAAIZ,aAAJ,EAAmB;AACjBK,UAAAA,kBAAkB,CAACL,aAAD,EAAgBU,UAAhB,EAA4BE,cAA5B,CAAlB;AACD;;AAED,YAAIhe,OAAJ,EAAa;AACX,iBAAO,CAAC8d,UAAD,EAAaE,cAAb,CAAP;AACD;AACF;AACF;AACF;AACF;AAGD;;;;;;;;AAMA,SAASD,0BAAT,CAAoCE,GAApC,EAAyCC,UAAzC,EAAqD;AACnD,SAAO,IAAI3iB,YAAJ,CACH0iB,GAAG,CAACzkB,CAAJ,GAAQ0kB,UAAU,CAAC1kB,CADhB,EAEHykB,GAAG,CAACxkB,CAAJ,GAAQykB,UAAU,CAACzkB,CAFhB,EAGHwkB,GAAG,CAACviB,KAHD,EAIHuiB,GAAG,CAACtiB,MAJD,CAAP;AAKD;AAGD;;;;;AAGA,SAAS8hB,kBAAT,CAA4Bxe,SAA5B,EAAuCqe,OAAvC,EAAgDC,WAAhD,EAA6D;AAC3Dte,EAAAA,SAAS,CAAC0c,IAAV;AACA1c,EAAAA,SAAS,CAACkf,WAAV,GAAwB,MAAxB;AACAlf,EAAAA,SAAS,CAACmf,UAAV,CAAqBd,OAAO,CAAC9jB,CAA7B,EAAgC8jB,OAAO,CAAC7jB,CAAxC,EAA2C6jB,OAAO,CAAC5hB,KAAnD,EAA0D4hB,OAAO,CAAC3hB,MAAlE;AAEAsD,EAAAA,SAAS,CAACkf,WAAV,GAAwB,MAAxB;AACAlf,EAAAA,SAAS,CAACmf,UAAV,CAAqBb,WAAW,CAAC/jB,CAAjC,EAAoC+jB,WAAW,CAAC9jB,CAAhD,EACI8jB,WAAW,CAAC7hB,KADhB,EACuB6hB,WAAW,CAAC5hB,MADnC;AAEAsD,EAAAA,SAAS,CAAC6c,OAAV;AACD;AAGD;;;;;;;;AAMA,SAAS4B,UAAT,CAAoBJ,OAApB,EAA6BC,WAA7B,EAA0C;AACxC,MAAIvd,OAAO,GAAG,KAAd;AACA,MAAMqe,QAAQ,GAAGf,OAAO,CAAC9jB,CAAzB;AACA,MAAM8kB,QAAQ,GAAGhB,OAAO,CAAC7jB,CAAzB;AAEA,MAAM8kB,YAAY,GAAGhB,WAAW,CAAC/jB,CAAjC;AACA,MAAMglB,YAAY,GAAGjB,WAAW,CAAC9jB,CAAjC,CANwC,CAQxC;;AACA,MAAI6jB,OAAO,CAAC9jB,CAAR,GAAY+kB,YAAY,GAAGhB,WAAW,CAAC7hB,KAAvC,IACA4hB,OAAO,CAAC9jB,CAAR,GAAY8jB,OAAO,CAAC5hB,KAApB,GAA4B6iB,YAD5B,IAEAjB,OAAO,CAAC7jB,CAAR,GAAY8jB,WAAW,CAAC9jB,CAAZ,GAAgB8jB,WAAW,CAAC5hB,MAFxC,IAGA2hB,OAAO,CAAC3hB,MAAR,GAAiB2hB,OAAO,CAAC7jB,CAAzB,GAA6B8jB,WAAW,CAAC9jB,CAH7C,EAGgD;AAC9CuG,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED,SAAOA,OAAP;AACD,EAGD;;AAEA;;;;;;;;;;AAQO,SAASzE,YAAT,CAAsB/B,CAAtB,EAAyBC,CAAzB,EAA4BqB,CAA5B,EAA+BC,CAA/B,EAAkC;AACvC,OAAKvB,CAAL,GAASA,CAAT;AACA,OAAKC,CAAL,GAASA,CAAT;AACA,OAAKiC,KAAL,GAAaZ,CAAb;AACA,OAAKa,MAAL,GAAcZ,CAAd;AACD,EAGD;;AAEA;;;;;;;;;;;;;;AAYA,SAAS0jB,QAAT,CACIxf,SADJ,EACexD,IADf,EACqBijB,YADrB,EACmClgB,UADnC,EAC+CmgB,cAD/C,EAC+D7V,KAD/D,EAEI8V,WAFJ,EAEiBC,iBAFjB,EAEoC;AAClC,OAAK5f,SAAL,GAAiBA,SAAjB;AACA,OAAK6f,SAAL,GAAiBJ,YAAjB;AACA,OAAKxQ,UAAL,GAAkBzS,IAAlB;AACA,OAAKkjB,cAAL,GAAsBnhB,MAAM,CAACoC,QAAP,GAAkB+e,cAAc,GAAG,CAAnC,GAAuCA,cAA7D;AACA,OAAKnB,IAAL,GAAYjF,YAAY,CAAC,CAAD,EAAIkG,QAAQ,CAAC/jB,mBAAb,CAAxB;AACA,OAAK8D,UAAL,GAAkBA,UAAlB;AACA,OAAK2V,MAAL,GAAc,KAAd;AACA,OAAK3F,IAAL,GAAYhQ,UAAU,CAAC7B,KAAX,IAAoBiiB,WAAW,IAAI,CAAnC,CAAZ;AACA,OAAKhjB,IAAL,GAAY,CAAZ;AACA,OAAKF,KAAL,GAAa,CAAb;AACA,OAAKM,cAAL,GAAsB,EAAtB;AACA,OAAK+iB,GAAL,GAAW,CAAX;AACA,OAAK3iB,WAAL,GAAmB,CAAnB;AACA,OAAKyC,iBAAL,GAAyBggB,iBAAzB;AACA,OAAKlX,WAAL,GAAmB,KAAKuG,UAAL,CAAgBzS,IAAhB,IAAwB,aAAxB,GACf+B,MAAM,CAACoK,oBADQ,GAEf,KAAK/I,iBAAL,GAAyBrB,MAAM,CAACoB,kBAAhC,GAAqDpB,MAAM,CAACmK,WAFhE,CAfkC,CAmBlC;;AACA,OAAKoS,YAAL,GAAoB,CAApB;AACA,OAAKiF,KAAL,GAAa,CAAb;AAEA,OAAKjX,IAAL,CAAUe,KAAV;AACD;AAED;;;;;AAGA2V,QAAQ,CAAChkB,mBAAT,GAA+B,GAA/B;AAEA;;;;AAGAgkB,QAAQ,CAAC/jB,mBAAT,GAA+B,CAA/B;AAGA+jB,QAAQ,CAACtY,SAAT,GAAqB;AACnB;;;;AAIA4B,EAAAA,IALmB,gBAKde,KALc,EAKP;AACV,SAAKmW,mBAAL,GADU,CAGV;;AACA,QAAI,KAAKzB,IAAL,GAAY,CAAZ,IAAiB,KAAKtP,UAAL,CAAgBrS,aAAhB,GAAgCiN,KAArD,EAA4D;AAC1D,WAAK0U,IAAL,GAAY,CAAZ;AACD;;AAED,SAAK9hB,KAAL,GAAa,KAAKwS,UAAL,CAAgBxS,KAAhB,GAAwB,KAAK8hB,IAA1C,CARU,CAUV;;AACA,QAAI0B,KAAK,CAACC,OAAN,CAAc,KAAKjR,UAAL,CAAgBtS,IAA9B,CAAJ,EAAyC;AACvC,UAAMwjB,UAAU,GACZrd,SAAS,GAAG,KAAKmM,UAAL,CAAgBjS,UAAnB,GAAgC,KAAKiS,UAAL,CAAgBtS,IAD7D;AAEA,WAAKA,IAAL,GAAYwjB,UAAU,CAAC7G,YAAY,CAAC,CAAD,EAAI6G,UAAU,CAAChZ,MAAX,GAAoB,CAAxB,CAAb,CAAtB;AACD,KAJD,MAIO;AACL,WAAKxK,IAAL,GAAY,KAAKsS,UAAL,CAAgBtS,IAA5B;AACD;;AAED,SAAKkQ,IAAL,GAnBU,CAqBV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAI,KAAK0R,IAAL,GAAY,CAAhB,EAAmB;AACjB,WAAKxhB,cAAL,CAAoB,CAApB,EAAuBN,KAAvB,GAA+B,KAAKA,KAAL,GAAa,KAAKM,cAAL,CAAoB,CAApB,EAAuBN,KAApC,GAC3B,KAAKM,cAAL,CAAoB,CAApB,EAAuBN,KAD3B;AAEA,WAAKM,cAAL,CAAoB,CAApB,EAAuBxC,CAAvB,GAA2B,KAAKkC,KAAL,GAAa,KAAKM,cAAL,CAAoB,CAApB,EAAuBN,KAA/D;AACD,KAjCS,CAmCV;;;AACA,QAAI,KAAKwS,UAAL,CAAgB9R,WAApB,EAAiC;AAC/B,WAAKA,WAAL,GAAmBmP,IAAI,CAACiN,MAAL,KAAgB,GAAhB,GAAsB,KAAKtK,UAAL,CAAgB9R,WAAtC,GACsB,CAAC,KAAK8R,UAAL,CAAgB9R,WAD1D;AAED;;AAED,SAAK2iB,GAAL,GAAW,KAAKM,MAAL,CAAY,KAAKV,cAAjB,EAAiC7V,KAAjC,CAAX,CAzCU,CA2CV;;AACA,QAAItL,MAAM,CAACqP,SAAX,EAAsB;AACpB,WAAKkS,GAAL,IAAY,CAAZ;AACD;AACF,GApDkB;;AAsDnB;;;AAGAjT,EAAAA,IAzDmB,kBAyDZ;AACL,QAAIwT,WAAW,GAAG,KAAKpR,UAAL,CAAgBxS,KAAlC;AACA,QAAI6jB,YAAY,GAAG,KAAKrR,UAAL,CAAgBvS,MAAnC;;AAEA,QAAI8F,QAAJ,EAAc;AACZ6d,MAAAA,WAAW,GAAGA,WAAW,GAAG,CAA5B;AACAC,MAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;AACD,KAPI,CASL;;;AACA,QAAIC,OAAO,GACNF,WAAW,GAAG,KAAK9B,IAApB,IAA6B,OAAO,KAAKA,IAAL,GAAY,CAAnB,CAA7B,IAAsD,KAAKsB,SAAL,CAAetlB,CADzE,CAVK,CAaL;;AACA,QAAI,KAAKugB,YAAL,GAAoB,CAAxB,EAA2B;AACzByF,MAAAA,OAAO,IAAIF,WAAW,GAAG,KAAKvF,YAA9B;AACD;;AAED,SAAK9a,SAAL,CAAe4c,SAAf,CACI,KAAKlU,WADT,EACsB6X,OADtB,EAC+B,KAAKV,SAAL,CAAerlB,CAD9C,EACiD6lB,WAAW,GAAG,KAAK9B,IADpE,EAEI+B,YAFJ,EAEkB,KAAK/Q,IAFvB,EAE6B,KAAK5S,IAFlC,EAEwC,KAAKsS,UAAL,CAAgBxS,KAAhB,GAAwB,KAAK8hB,IAFrE,EAGI,KAAKtP,UAAL,CAAgBvS,MAHpB;AAID,GA/EkB;;AAiFnB;;;;;AAKA2O,EAAAA,MAtFmB,kBAsFZiD,SAtFY,EAsFDzE,KAtFC,EAsFM;AACvB,QAAI,CAAC,KAAKqL,MAAV,EAAkB;AAChB,UAAI,KAAKjG,UAAL,CAAgB9R,WAApB,EAAiC;AAC/B0M,QAAAA,KAAK,IAAI,KAAK1M,WAAd;AACD;;AACD,WAAKoS,IAAL,IAAajD,IAAI,CAACyK,KAAL,CAAYlN,KAAK,GAAGpJ,GAAR,GAAc,IAAf,GAAuB6N,SAAlC,CAAb,CAJgB,CAMhB;;AACA,UAAI,KAAKW,UAAL,CAAgBhS,SAApB,EAA+B;AAC7B,aAAK8iB,KAAL,IAAczR,SAAd;;AACA,YAAI,KAAKyR,KAAL,IAAc,KAAK9Q,UAAL,CAAgB/R,SAAlC,EAA6C;AAC3C,eAAK4d,YAAL,GACI,KAAKA,YAAL,KAAsB,KAAK7L,UAAL,CAAgBhS,SAAhB,GAA4B,CAAlD,GACA,CADA,GAEA,KAAK6d,YAAL,GAAoB,CAHxB;AAIA,eAAKiF,KAAL,GAAa,CAAb;AACD;AACF;;AACD,WAAKlT,IAAL;;AAEA,UAAI,CAAC,KAAK2T,SAAL,EAAL,EAAuB;AACrB,aAAKtL,MAAL,GAAc,IAAd;AACD;AACF;AACF,GA9GkB;;AAgHnB;;;;;;;AAOAkL,EAAAA,MAvHmB,kBAuHZV,cAvHY,EAuHI7V,KAvHJ,EAuHW;AAC5B,QAAMhN,MAAM,GAAGyP,IAAI,CAAC+P,KAAL,CACX,KAAK5f,KAAL,GAAaoN,KAAb,GAAqB,KAAKoF,UAAL,CAAgBpS,MAAhB,GAAyB6iB,cADnC,CAAf;AAEA,QAAMe,MAAM,GAAGnU,IAAI,CAAC+P,KAAL,CAAWxf,MAAM,GAAG2iB,QAAQ,CAAChkB,mBAA7B,CAAf;AACA,WAAO8d,YAAY,CAACzc,MAAD,EAAS4jB,MAAT,CAAnB;AACD,GA5HkB;;AA8HnB;;;;AAIAD,EAAAA,SAlImB,uBAkIP;AACV,WAAO,KAAKjR,IAAL,GAAY,KAAK9S,KAAjB,GAAyB,CAAhC;AACD,GApIkB;;AAsInB;;;;AAIAujB,EAAAA,mBA1ImB,iCA0IG;AACpB,QAAMjjB,cAAc,GAAG,KAAKkS,UAAL,CAAgBlS,cAAvC;;AAEA,SAAK,IAAIkW,CAAC,GAAGlW,cAAc,CAACoK,MAAf,GAAwB,CAArC,EAAwC8L,CAAC,IAAI,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACnD,WAAKlW,cAAL,CAAoBkW,CAApB,IAAyB,IAAI3W,YAAJ,CACrBS,cAAc,CAACkW,CAAD,CAAd,CAAkB1Y,CADG,EACAwC,cAAc,CAACkW,CAAD,CAAd,CAAkBzY,CADlB,EACqBuC,cAAc,CAACkW,CAAD,CAAd,CAAkBxW,KADvC,EAErBM,cAAc,CAACkW,CAAD,CAAd,CAAkBvW,MAFG,CAAzB;AAGD;AACF;AAlJkB,CAArB,EAsJA;;AACA;;;;;;;AAMA,SAASyO,IAAT,CAAcpL,MAAd,EAAsB8f,SAAtB,EAAiC;AAC/B,OAAK9f,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyCD,EAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,CAD7C;AAEA,OAAKiV,SAAL,GAAiBA,SAAjB;AACA,OAAKtQ,IAAL,GAAY,CAAZ;AACA,OAAK5S,IAAL,GAAY,CAAZ;AACA,OAAK+jB,WAAL,GAAmB,CAAnB,CAP+B,CAQ/B;;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAK7F,YAAL,GAAoB,CAApB;AACA,OAAK8F,iBAAL,GAAyB,EAAzB;AACA,OAAKC,UAAL,GAAkB,CAAlB;AACA,OAAK7Q,UAAL,GAAkB,CAAlB;AACA,OAAK8Q,aAAL,GAAqB,CAArB;AACA,OAAKf,KAAL,GAAa,CAAb;AACA,OAAKvf,UAAL,GAAkB,OAAOC,GAAzB;AACA,OAAKtB,MAAL,GAAcC,MAAM,CAACC,MAAP,CAAc8L,IAAI,CAAChM,MAAnB,EAA2BgM,IAAI,CAAC4V,gBAAhC,CAAd,CAjB+B,CAkB/B;;AACA,OAAKtM,MAAL,GAActJ,IAAI,CAACsJ,MAAL,CAAYuM,OAA1B;AACA,OAAKvS,OAAL,GAAe,KAAf;AACA,OAAKoD,OAAL,GAAe,KAAf;AACA,OAAKoP,YAAL,GAAoB,CAApB;AACA,OAAKC,gBAAL,GAAwB,KAAxB;AACA,OAAK5O,SAAL,GAAiB,KAAjB;AACA,OAAK1D,SAAL,GAAiB,CAAjB;AACA,OAAKuS,SAAL,GAAiB,CAAjB;AACA,OAAKC,kBAAL,GAA0B,KAA1B;AACA,OAAKC,QAAL,GAAgB,KAAhB;AAEA,OAAKvY,IAAL;AACD;AAGD;;;;;AAGAqC,IAAI,CAAChM,MAAL,GAAc;AACZmiB,EAAAA,aAAa,EAAE,CAAC,CADJ;AAEZC,EAAAA,SAAS,EAAE,GAFC;AAGZC,EAAAA,QAAQ,EAAE,GAHE;AAIZpkB,EAAAA,MAAM,EAAE,EAJI;AAKZqkB,EAAAA,WAAW,EAAE,EALD;AAMZC,EAAAA,cAAc,EAAE,IANJ;AAOZhd,EAAAA,sBAAsB,EAAE,CAPZ;AAQZid,EAAAA,YAAY,EAAE,GARF;AASZC,EAAAA,WAAW,EAAE,EATD;AAUZlkB,EAAAA,KAAK,EAAE,EAVK;AAWZmkB,EAAAA,UAAU,EAAE;AAXA,CAAd;AAcA1W,IAAI,CAAC2W,cAAL,GAAsB;AACpBC,EAAAA,OAAO,EAAE,IADW;AAEpBC,EAAAA,eAAe,EAAE,EAFG;AAGpBC,EAAAA,eAAe,EAAE,EAHG;AAIpB7d,EAAAA,qBAAqB,EAAE,CAAC;AAJJ,CAAtB;AAOA+G,IAAI,CAAC4V,gBAAL,GAAwB;AACtBgB,EAAAA,OAAO,EAAE,GADa;AAEtBC,EAAAA,eAAe,EAAE,EAFK;AAGtBC,EAAAA,eAAe,EAAE,EAHK;AAItB7d,EAAAA,qBAAqB,EAAE,CAAC;AAJF,CAAxB;AAOA;;;;;AAIA+G,IAAI,CAACpO,cAAL,GAAsB;AACpB4hB,EAAAA,OAAO,EAAE,CAAC,IAAIriB,YAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,CAAD,CADW;AAEpB2Y,EAAAA,OAAO,EAAE,CACP,IAAI3Y,YAAJ,CAAiB,EAAjB,EAAqB,CAArB,EAAwB,EAAxB,EAA4B,EAA5B,CADO,EAC0B,IAAIA,YAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAD1B,EAEP,IAAIA,YAAJ,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,CAA7B,CAFO,EAE0B,IAAIA,YAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAF1B,EAGP,IAAIA,YAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAHO,EAGyB,IAAIA,YAAJ,CAAiB,CAAjB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAHzB;AAFW,CAAtB;AAUA;;;;;AAIA6O,IAAI,CAACsJ,MAAL,GAAc;AACZrY,EAAAA,OAAO,EAAE,SADG;AAEZuiB,EAAAA,OAAO,EAAE,SAFG;AAGZxiB,EAAAA,OAAO,EAAE,SAHG;AAIZ8Y,EAAAA,OAAO,EAAE,SAJG;AAKZ+L,EAAAA,OAAO,EAAE;AALG,CAAd;AAQA;;;;;AAIA7V,IAAI,CAAC+W,YAAL,GAAoB,IAApB;AAGA;;;;;AAIA/W,IAAI,CAACgX,UAAL,GAAkB;AAChBnB,EAAAA,OAAO,EAAE;AACP1F,IAAAA,MAAM,EAAE,CAAC,EAAD,EAAK,CAAL,CADD;AAEP9a,IAAAA,UAAU,EAAE,OAAO;AAFZ,GADO;AAKhByU,EAAAA,OAAO,EAAE;AACPqG,IAAAA,MAAM,EAAE,CAAC,EAAD,EAAK,GAAL,CADD;AAEP9a,IAAAA,UAAU,EAAE,OAAO;AAFZ,GALO;AAShBpE,EAAAA,OAAO,EAAE;AACPkf,IAAAA,MAAM,EAAE,CAAC,GAAD,CADD;AAEP9a,IAAAA,UAAU,EAAE,OAAO;AAFZ,GATO;AAahBrE,EAAAA,OAAO,EAAE;AACPmf,IAAAA,MAAM,EAAE,CAAC,CAAD,CADD;AAEP9a,IAAAA,UAAU,EAAE,OAAO;AAFZ,GAbO;AAiBhBme,EAAAA,OAAO,EAAE;AACPrD,IAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,CADD;AAEP9a,IAAAA,UAAU,EAAE,OAAO;AAFZ;AAjBO,CAAlB;AAwBA2K,IAAI,CAACjE,SAAL,GAAiB;AACf;;;;AAIA4B,EAAAA,IALe,kBAKR;AACL,SAAK6X,UAAL,GAAkBpiB,MAAM,CAACiB,iBAAP,CAAyBpC,MAAzB,GAAkC,KAAK+B,MAAL,CAAY/B,MAA9C,GACdmB,MAAM,CAACY,MAAP,CAAcxD,UADlB;AAEA,SAAKgB,IAAL,GAAY,KAAKgkB,UAAjB;AACA,SAAKyB,aAAL,GAAqB,KAAKzB,UAAL,GAAkB,KAAKxhB,MAAL,CAAY8iB,eAAnD;AAEA,SAAKpV,IAAL,CAAU,CAAV,EAAa,CAAb;AACA,SAAKxB,MAAL,CAAY,CAAZ,EAAeF,IAAI,CAACsJ,MAAL,CAAYuM,OAA3B;AACD,GAbc;;AAef;;;AAGAnQ,EAAAA,gBAAgB,EAAE,4BAAW;AAC3B,QAAMwR,UAAU,GACZ9jB,MAAM,CAACoC,QAAP,GAAkBwK,IAAI,CAAC2W,cAAvB,GAAwC3W,IAAI,CAAC4V,gBADjD;AAEA5V,IAAAA,IAAI,CAAChM,MAAL,GAAcC,MAAM,CAACC,MAAP,CAAc8L,IAAI,CAAChM,MAAnB,EAA2BkjB,UAA3B,CAAd;AAEA,SAAKC,+BAAL;AACD,GAxBc;;AA0Bf;;;;AAIApU,EAAAA,iBAAiB,EAAE,2BAAS2R,SAAT,EAAoB;AACrC,SAAKuB,kBAAL,GAA0B,IAA1B;AACA,SAAKvB,SAAL,GAAiBA,SAAjB;AACA,QAAMngB,gBAAgB,GAAGnB,MAAM,CAACmB,gBAAP,CAAwB,MAAxB,CAAzB,CAHqC,CAKrC;;AACAyL,IAAAA,IAAI,CAACgX,UAAL,CAAgBlN,OAAhB,CAAwBqG,MAAxB,GACI,CAAC5b,gBAAgB,CAACzD,SAAjB,CAA2B1B,CAA5B,EAA+BmF,gBAAgB,CAACxD,SAAjB,CAA2B3B,CAA1D,CADJ;AAEA4Q,IAAAA,IAAI,CAACgX,UAAL,CAAgB/lB,OAAhB,CAAwBkf,MAAxB,GAAiC,CAAC5b,gBAAgB,CAACtD,OAAjB,CAAyB7B,CAA1B,CAAjC;;AAEA,QAAI,QAAOmF,gBAAgB,CAACvD,OAAjB,CAAyB5B,CAAhC,KAAqC,QAAzC,EAAmD;AACjD4Q,MAAAA,IAAI,CAACgX,UAAL,CAAgBhmB,OAAhB,CAAwBmf,MAAxB,GAAiC5b,gBAAgB,CAACvD,OAAjB,CAAyB5B,CAA1D;AACD,KAFD,MAEO;AACL4Q,MAAAA,IAAI,CAACgX,UAAL,CAAgBhmB,OAAhB,CAAwBmf,MAAxB,GAAiC,CAAC5b,gBAAgB,CAACvD,OAAjB,CAAyB5B,CAA1B,CAAjC;AACD;;AAED4Q,IAAAA,IAAI,CAACgX,UAAL,CAAgBxD,OAAhB,CAAwBrD,MAAxB,GACI,CAAC5b,gBAAgB,CAACzD,SAAjB,CAA2B1B,CAA5B,EAA+BmF,gBAAgB,CAACxD,SAAjB,CAA2B3B,CAA1D,CADJ,CAhBqC,CAmBrC;;AACA4Q,IAAAA,IAAI,CAAChM,MAAL,CAAY4iB,OAAZ,GAAsBriB,gBAAgB,CAACqiB,OAAjB,IAA4B5W,IAAI,CAAChM,MAAL,CAAY4iB,OAA9D;AACA5W,IAAAA,IAAI,CAAChM,MAAL,CAAY/B,MAAZ,GAAqBsC,gBAAgB,CAACzD,SAAjB,CAA2BH,CAAhD,EACAqP,IAAI,CAAChM,MAAL,CAAYiF,qBAAZ,GAAoC1E,gBAAgB,CAAC0E,qBADrD;AAEA+G,IAAAA,IAAI,CAAChM,MAAL,CAAY6iB,eAAZ,GAA8BtiB,gBAAgB,CAACsiB,eAA/C;AACA7W,IAAAA,IAAI,CAAChM,MAAL,CAAY8iB,eAAZ,GAA8BviB,gBAAgB,CAACuiB,eAA/C;AACA9W,IAAAA,IAAI,CAAChM,MAAL,CAAYzB,KAAZ,GAAoBgC,gBAAgB,CAACzD,SAAjB,CAA2BJ,CAA/C;AACAsP,IAAAA,IAAI,CAAChM,MAAL,CAAYojB,UAAZ,GAAyB7iB,gBAAgB,CAACvD,OAAjB,CAAyBN,CAAlD;AACAsP,IAAAA,IAAI,CAAChM,MAAL,CAAYqjB,WAAZ,GAA0B9iB,gBAAgB,CAAC8iB,WAA3C;AAEA,SAAKF,+BAAL,CAAqC5iB,gBAAgB,CAACqiB,OAAtD;AACA,SAAK5iB,MAAL,GAAcgM,IAAI,CAAChM,MAAnB,CA9BqC,CAgCrC;;AACA,SAAKwhB,UAAL,GAAkBpiB,MAAM,CAACiB,iBAAP,CAAyBpC,MAAzB,GAAkC,KAAK+B,MAAL,CAAY/B,MAA9C,GACdmB,MAAM,CAACmB,gBAAP,CAAwB,YAAxB,CADJ;AAEA,SAAK/C,IAAL,GAAY,KAAKgkB,UAAjB;AACA,SAAKlO,KAAL;AACD,GAnEc;;AAqEf;;;;AAIA6P,EAAAA,+BAA+B,EAAE,yCAASG,gBAAT,EAA2B;AAC1D,QAAIlkB,MAAM,CAACoC,QAAX,EAAqB;AACnB,UAAI8hB,gBAAJ,EAAsB;AACpBtX,QAAAA,IAAI,CAAChM,MAAL,CAAY4iB,OAAZ,GAAsBU,gBAAgB,GAAG,GAAzC;AACD;;AACDtX,MAAAA,IAAI,CAAChM,MAAL,CAAY8iB,eAAZ,IAA+B,GAA/B;AACA9W,MAAAA,IAAI,CAAChM,MAAL,CAAY6iB,eAAZ,IAA+B,GAA/B;AACA7W,MAAAA,IAAI,CAAChM,MAAL,CAAYiF,qBAAZ,GACI+G,IAAI,CAAChM,MAAL,CAAYiF,qBAAZ,GAAoC,GADxC;AAED;AACF,GAnFc;;AAqFf;;;;AAIAmK,EAAAA,WAAW,EAAE,qBAASkG,MAAT,EAAiB;AAC5B,SAAK4M,QAAL,GAAgB5M,MAAhB;AACD,GA3Fc;;AA6Ff;;;;;AAKA1M,EAAAA,eAlGe,2BAkGCF,OAlGD,EAkGU;AACvB,SAAK1I,MAAL,CAAYiF,qBAAZ,GAAoC,CAACyD,OAArC;AACA,SAAK1I,MAAL,CAAYmiB,aAAZ,GAA4B,CAACzZ,OAAD,GAAW,CAAvC;AACD,GArGc;;AAuGf;;;;;AAKAwD,EAAAA,MA5Ge,kBA4GRiD,SA5GQ,EA4GGoU,UA5GH,EA4Ge;AAC5B,SAAK3C,KAAL,IAAczR,SAAd,CAD4B,CAG5B;;AACA,QAAIoU,UAAJ,EAAgB;AACd,WAAKjO,MAAL,GAAciO,UAAd;AACA,WAAK5H,YAAL,GAAoB,CAApB;AACA,WAAKta,UAAL,GAAkB2K,IAAI,CAACgX,UAAL,CAAgBO,UAAhB,EAA4BliB,UAA9C;AACA,WAAKogB,iBAAL,GAAyBzV,IAAI,CAACgX,UAAL,CAAgBO,UAAhB,EAA4BpH,MAArD;;AAEA,UAAIoH,UAAU,KAAKvX,IAAI,CAACsJ,MAAL,CAAYuM,OAA/B,EAAwC;AACtC,aAAKF,aAAL,GAAqBzS,YAAY,EAAjC;AACA,aAAKsU,aAAL;AACD;AACF,KAd2B,CAe5B;;;AACA,QAAI,KAAK1V,YAAL,IAAqB,KAAKsC,IAAL,GAAY,KAAKpQ,MAAL,CAAYyiB,WAAjD,EAA8D;AAC5D,WAAKrS,IAAL,IAAajD,IAAI,CAAC+P,KAAL,CAAY,KAAKld,MAAL,CAAYyiB,WAAZ,GACrB,KAAKziB,MAAL,CAAYuiB,cADQ,GACUpT,SADrB,CAAb;AAEA,WAAKoS,WAAL,GAAmB,KAAKnR,IAAxB;AACD;;AAED,QAAI,KAAKkF,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYuM,OAAhC,EAAyC;AACvC,WAAK4B,KAAL,CAAWvU,YAAY,EAAvB;AACD,KAFD,MAEO;AACL,WAAKxB,IAAL,CAAU,KAAK+T,iBAAL,CAAuB,KAAK9F,YAA5B,CAAV,EAAqD,CAArD;AACD,KA1B2B,CA4B5B;;;AACA,QAAI,CAAC,KAAKuG,QAAN,IAAkB,KAAKtB,KAAL,IAAc,KAAKvf,UAAzC,EAAqD;AACnD,WAAKsa,YAAL,GAAoB,KAAKA,YAAL,IAChB,KAAK8F,iBAAL,CAAuBzZ,MAAvB,GAAgC,CADhB,GACoB,CADpB,GACwB,KAAK2T,YAAL,GAAoB,CADhE;AAEA,WAAKiF,KAAL,GAAa,CAAb;AACD;;AAED,QAAI,CAAC,KAAKqB,kBAAV,EAA8B;AAC5B;AACA,UAAI,KAAK9O,SAAL,IAAkB,KAAK3V,IAAL,KAAc,KAAKgkB,UAAzC,EAAqD;AACnD,aAAKrO,SAAL,GAAiB,KAAjB;AACA,aAAKL,OAAL,CAAa,IAAb;AACD;AACF;AACF,GAtJc;;AAwJf;;;;;AAKApF,EAAAA,IA7Je,gBA6JVtS,CA7JU,EA6JPC,CA7JO,EA6JJ;AACT,QAAI+lB,OAAO,GAAGhmB,CAAd;AACA,QAAIsoB,OAAO,GAAGroB,CAAd;AACA,QAAI6lB,WAAW,GAAG,KAAKxO,OAAL,IAAgB,KAAK4C,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYrY,OAA5C,GACd,KAAK+C,MAAL,CAAY0iB,UADE,GAEd,KAAK1iB,MAAL,CAAYzB,KAFhB;AAGA,QAAI4iB,YAAY,GAAG,KAAKnhB,MAAL,CAAY/B,MAA/B;AACA,QAAM0lB,YAAY,GAAGxC,YAArB;AAEA,QAAIyC,UAAU,GAAGxkB,MAAM,CAACmB,gBAAP,CAAwBvE,IAAxB,CAA6BgB,OAA7B,CAAqCJ,OAAtD,CATS,CAWT;;AACA,QAAI,KAAKqlB,kBAAL,IAA2B,KAAK3S,OAAhC,IACA,KAAKgG,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYrY,OADhC,EACyC;AACvCikB,MAAAA,WAAW,GAAG,KAAKlhB,MAAL,CAAYojB,UAA1B;AACD;;AAED,QAAI/f,QAAJ,EAAc;AACZ+d,MAAAA,OAAO,IAAI,CAAX;AACAsC,MAAAA,OAAO,IAAI,CAAX;AACAxC,MAAAA,WAAW,IAAI,CAAf;AACAC,MAAAA,YAAY,IAAI,CAAhB;AACAyC,MAAAA,UAAU,IAAI,CAAd;AACD,KAvBQ,CAyBT;;;AACAxC,IAAAA,OAAO,IAAI,KAAKV,SAAL,CAAetlB,CAA1B;AACAsoB,IAAAA,OAAO,IAAI,KAAKhD,SAAL,CAAerlB,CAA1B,CA3BS,CA6BT;;AACA,QAAI,KAAK6mB,QAAT,EAAmB;AACjB,UAAI,KAAKtB,KAAL,GAAa,KAAK5gB,MAAL,CAAYqiB,QAA7B,EAAuC;AACrC,aAAKxhB,SAAL,CAAewO,WAAf,GAA6B,GAA7B;AACD,OAFD,MAEO,IAAI,KAAKuR,KAAL,GAAa,KAAK5gB,MAAL,CAAYoiB,SAA7B,EAAwC;AAC7C,aAAKxB,KAAL,GAAa,CAAb;AACD;AACF,KApCQ,CAsCT;;;AACA,QAAI,CAAC,KAAKqB,kBAAN,IAA4B,KAAKvP,OAAjC,IACA,KAAK4C,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYrY,OADhC,EACyC;AACvC,WAAK4D,SAAL,CAAe4c,SAAf,CAAyBre,MAAM,CAACmK,WAAhC,EAA6C6X,OAA7C,EAAsDsC,OAAtD,EACIxC,WADJ,EACiBC,YADjB,EAEI,KAAK/Q,IAFT,EAEe,KAAK5S,IAFpB,EAGI,KAAKwC,MAAL,CAAY0iB,UAHhB,EAG4BiB,YAH5B;AAID,KAND,MAMO,IACH,KAAK1B,kBAAL,IAA2B,KAAK3S,OAAhC,IACA,KAAKgG,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYrY,OAFzB,EAEkC;AACvC;AACA,WAAK4D,SAAL,CAAe4c,SAAf,CACIre,MAAM,CAACmK,WADX,EACwB6X,OADxB,EACiCsC,OADjC,EAC0CxC,WAD1C,EACuDC,YADvD,EAEI,KAAK/Q,IAAL,GAAYwT,UAFhB,EAE4B,KAAKpmB,IAFjC,EAEuC,KAAKwC,MAAL,CAAYojB,UAFnD,EAGIO,YAHJ;AAID,KARM,MAQA;AACL;AACA,UAAI,KAAKjR,OAAL,IAAgB,KAAK4C,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYrY,OAAhD,EAAyD;AACvD,aAAKmT,IAAL;AACD,OAJI,CAKL;;;AACA,WAAKvP,SAAL,CAAe4c,SAAf,CAAyBre,MAAM,CAACmK,WAAhC,EAA6C6X,OAA7C,EAAsDsC,OAAtD,EACIxC,WADJ,EACiBC,YADjB,EAEI,KAAK/Q,IAFT,EAEe,KAAK5S,IAFpB,EAGI,KAAKwC,MAAL,CAAYzB,KAHhB,EAGuBolB,YAHvB;AAID;;AACD,SAAK9iB,SAAL,CAAewO,WAAf,GAA6B,CAA7B;AACD,GA9Nc;;AAgOf;;;AAGAmU,EAAAA,aAnOe,2BAmOC;AACd,SAAK9B,UAAL,GAAkBvU,IAAI,CAACK,IAAL,CAAUL,IAAI,CAACiN,MAAL,KAAgBpO,IAAI,CAAC+W,YAA/B,CAAlB;AACD,GArOc;;AAuOf;;;;AAIAU,EAAAA,KA3Oe,iBA2OTtiB,IA3OS,EA2OH;AACV,QAAMgO,SAAS,GAAGhO,IAAI,GAAG,KAAKwgB,aAA9B;;AAEA,QAAIxS,SAAS,IAAI,KAAKuS,UAAtB,EAAkC;AAChC,WAAKhU,IAAL,CAAU,KAAK+T,iBAAL,CAAuB,KAAK9F,YAA5B,CAAV,EAAqD,CAArD;;AAEA,UAAI,KAAKA,YAAL,KAAsB,CAA1B,EAA6B;AAC3B;AACA,aAAK6H,aAAL;AACA,aAAK7B,aAAL,GAAqBxgB,IAArB;AACA,aAAK0P,UAAL;AACD;AACF;AACF,GAxPc;;AA0Pf;;;;AAIA+B,EAAAA,SA9Pe,qBA8PLlI,KA9PK,EA8PE;AACf,QAAI,CAAC,KAAK4E,OAAV,EAAmB;AACjB,WAAKpD,MAAL,CAAY,CAAZ,EAAeF,IAAI,CAACsJ,MAAL,CAAYtY,OAA3B,EADiB,CAEjB;;AACA,WAAK8kB,YAAL,GAAoB,KAAK9hB,MAAL,CAAYiF,qBAAZ,GAAqCyF,KAAK,GAAG,EAAjE;AACA,WAAK4E,OAAL,GAAe,IAAf;AACA,WAAKyS,gBAAL,GAAwB,KAAxB;AACA,WAAK5O,SAAL,GAAiB,KAAjB;;AAEA,UAAI,KAAKnT,MAAL,CAAYqjB,WAAhB,EAA6B;AAC3B,aAAKJ,aAAL,GAAqB,KAAKzB,UAAL,GAAkB,KAAKxhB,MAAL,CAAY8iB,eAAnD;AACD;AACF;AACF,GA3Qc;;AA6Qf;;;AAGA5P,EAAAA,OAhRe,qBAgRL;AACR,QAAI,KAAK6O,gBAAL,IACA,KAAKD,YAAL,GAAoB,KAAK9hB,MAAL,CAAYmiB,aADpC,EACmD;AACjD,WAAKL,YAAL,GAAoB,KAAK9hB,MAAL,CAAYmiB,aAAhC;AACD;AACF,GArRc;;AAuRf;;;;AAIA5S,EAAAA,UA3Re,sBA2RJJ,SA3RI,EA2RO;AACpB,QAAM9N,UAAU,GAAG2K,IAAI,CAACgX,UAAL,CAAgB,KAAK1N,MAArB,EAA6BjU,UAAhD;AACA,QAAMwiB,aAAa,GAAG1U,SAAS,GAAG9N,UAAlC,CAFoB,CAIpB;;AACA,QAAI,KAAK8R,SAAT,EAAoB;AAClB,WAAK3V,IAAL,IAAa2P,IAAI,CAAC+P,KAAL,CAAW,KAAK4E,YAAL,GACpB,KAAK9hB,MAAL,CAAYuF,sBADQ,GACiBse,aAD5B,CAAb;AAED,KAHD,MAGO,IAAI,KAAK7jB,MAAL,CAAYqjB,WAAhB,EAA6B;AAClC,WAAK7lB,IAAL,IAAa2P,IAAI,CAAC+P,KAAL,CAAW,KAAK4E,YAAL,GAAoB+B,aAA/B,CAAb;AACD,KAFM,MAEA;AACL,WAAKrmB,IAAL,IAAa2P,IAAI,CAAC+P,KAAL,CAAW,KAAK4E,YAAL,GAAoB+B,aAA/B,CAAb;AACD;;AAED,SAAK/B,YAAL,IAAqB,KAAK9hB,MAAL,CAAY4iB,OAAZ,GAAsBiB,aAA3C,CAdoB,CAgBpB;;AACA,QAAI,KAAK7jB,MAAL,CAAYqjB,WAAZ,IAA4B,KAAK7lB,IAAL,GAAY,KAAKylB,aAA7C,IACA,CAAC,KAAKjjB,MAAL,CAAYqjB,WAAb,IAA6B,KAAK7lB,IAAL,GAAY,KAAKylB,aAD9C,IAEA,KAAK9P,SAFT,EAEoB;AAClB,WAAK4O,gBAAL,GAAwB,IAAxB;AACD,KArBmB,CAuBpB;;;AACA,QAAI,KAAK/hB,MAAL,CAAYqjB,WAAZ,IAA4B,KAAK7lB,IAAL,GAAY,CAAC,KAAKwC,MAAL,CAAY6iB,eAArD,IACA,CAAC,KAAK7iB,MAAL,CAAYqjB,WAAb,IAA6B,KAAK7lB,IAAL,GAAY,KAAKwC,MAAL,CAAY6iB,eADrD,IAEA,KAAK1P,SAFT,EAEoB;AAClB,WAAKD,OAAL;AACD,KA5BmB,CA8BpB;;;AACA,QAAI,CAAC,KAAKlT,MAAL,CAAYqjB,WAAZ,IAA2B,KAAK7lB,IAAjC,IAAyC,KAAKgkB,UAA9C,IACA,CAAC,CAAC,KAAKxhB,MAAL,CAAYqjB,WAAb,IAA4B,KAAK7lB,IAAlC,IAA0C,KAAKgkB,UADnD,EAC+D;AAC7D,WAAKlO,KAAL;AACA,WAAK7D,SAAL;;AAEA,UAAIrQ,MAAM,CAACqP,SAAX,EAAsB;AACpBrP,QAAAA,MAAM,CAACgD,gBAAP,CAAwBmX,aAAxB;AACD;AACF;AACF,GAnUc;;AAqUf;;;AAGA1G,EAAAA,YAxUe,0BAwUA;AACb,SAAKM,SAAL,GAAiB,IAAjB;AACA,SAAK2O,YAAL,GAAoB,CAApB;AACD,GA3Uc;;AA6Uf;;;AAGAhP,EAAAA,OAhVe,mBAgVPgR,SAhVO,EAgVI;AACjB,QAAIA,SAAS,IAAI,KAAKxO,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYkK,OAA7C,EAAsD;AACpD,WAAKtT,MAAL,CAAY,CAAZ,EAAeF,IAAI,CAACsJ,MAAL,CAAYkK,OAA3B;AACA,WAAK9M,OAAL,GAAe,IAAf;AACD,KAHD,MAGO,IAAI,KAAK4C,MAAL,KAAgBtJ,IAAI,CAACsJ,MAAL,CAAYkK,OAAhC,EAAyC;AAC9C,WAAKtT,MAAL,CAAY,CAAZ,EAAeF,IAAI,CAACsJ,MAAL,CAAYQ,OAA3B;AACA,WAAKpD,OAAL,GAAe,KAAf;AACD;AACF,GAxVc;;AA0Vf;;;AAGAY,EAAAA,KA7Ve,mBA6VP;AACN,SAAKlD,IAAL,GAAY,KAAKmR,WAAjB;AACA,SAAK/jB,IAAL,GAAY,KAAKgkB,UAAjB;AACA,SAAKM,YAAL,GAAoB,CAApB;AACA,SAAKxS,OAAL,GAAe,KAAf;AACA,SAAKoD,OAAL,GAAe,KAAf;AACA,SAAKxG,MAAL,CAAY,CAAZ,EAAeF,IAAI,CAACsJ,MAAL,CAAYQ,OAA3B;AACA,SAAKiO,MAAL,GAAc,KAAd;AACA,SAAK5Q,SAAL,GAAiB,KAAjB;AACA,SAAK1D,SAAL,GAAiB,CAAjB;AACD;AAvWc,CAAjB,EA2WA;;AAEA;;;;;;;;AAOA,SAAS1D,aAAT,CAAuBnL,MAAvB,EAA+B8f,SAA/B,EAA0CsD,WAA1C,EAAuD;AACrD,OAAKpjB,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyCD,EAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,CAD7C;AAEA,OAAKwY,KAAL,GAAa7kB,MAAM,CAACmK,WAApB;AACA,OAAKmX,SAAL,GAAiBA,SAAjB;AACA,OAAKtlB,CAAL,GAAS,CAAT;AACA,OAAKC,CAAL,GAAS,CAAT;AAEA,OAAK6oB,eAAL,GAAuB,CAAvB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAK/f,SAAL,GAAiB,GAAjB;AACA,OAAKiW,SAAL,GAAiB,IAAjB;AAEA,OAAK+J,MAAL,GAAc,EAAd;AACA,OAAK/O,WAAL,GAAmB,KAAnB;AACA,OAAKgP,aAAL,GAAqB,EAArB;AACA,OAAKrO,UAAL,GAAkB,CAAlB;AACA,OAAKsO,eAAL,GAAuB,CAAvB;AACA,OAAK7T,aAAL,GAAqB,KAArB;AACA,OAAK8T,aAAL,GAAqB,IAArB;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKC,iBAAL,GAAyB,KAAzB;AAEA,OAAKzkB,MAAL,GAAc+L,aAAa,CAAC/L,MAA5B;AACA,OAAK0kB,aAAL,GAAqB,KAAK1kB,MAAL,CAAY2kB,kBAAjC;AACA,OAAKX,WAAL,GAAmBA,WAAnB;AACA,OAAKra,IAAL,CAAUqa,WAAV;AACD;AAGD;;;;;AAGAjY,aAAa,CAAC3L,UAAd,GAA2B;AACzB7B,EAAAA,KAAK,EAAE,EADkB;AAEzBN,EAAAA,MAAM,EAAE,EAFiB;AAGzB2mB,EAAAA,UAAU,EAAE;AAHa,CAA3B;AAOA;;;;;;AAKA7Y,aAAa,CAACvO,IAAd,GAAqB,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgC,GAAhC,EAAqC,GAArC,CAArB;AAGA;;;;;AAIAuO,aAAa,CAAC/L,MAAd,GAAuB;AACrB;AACA2kB,EAAAA,kBAAkB,EAAE,CAFC;AAIrB;AACAE,EAAAA,oBAAoB,EAAE,GALD;AAOrB;AACAC,EAAAA,WAAW,EAAE,KARQ;AAUrB;AACA/f,EAAAA,cAAc,EAAE,OAAO,CAXF;AAarB;AACAkX,EAAAA,gBAAgB,EAAE,CAdG;AAgBrB;AACA8I,EAAAA,2BAA2B,EAAE;AAjBR,CAAvB;AAqBAhZ,aAAa,CAAChE,SAAd,GAA0B;AACxB;;;;AAIA4B,EAAAA,IALwB,gBAKnBrM,KALmB,EAKZ;AACV,QAAI0nB,cAAc,GAAG,EAArB;AAEA,SAAK1X,QAAL,CAAchQ,KAAd;AACA,SAAK6mB,QAAL,GAAgB,KAAKO,aAArB;;AACA,SAAK,IAAI5Q,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK4Q,aAAzB,EAAwC5Q,CAAC,EAAzC,EAA6C;AAC3C,WAAKpG,IAAL,CAAUoG,CAAV,EAAa,CAAb;AACA,WAAKuQ,aAAL,IAAsB,GAAtB;AACAW,MAAAA,cAAc,IAAI,GAAlB;AACD;;AAED,SAAKb,QAAL,GAAgBc,QAAQ,CAACD,cAAD,EAAiB,EAAjB,CAAxB;AACD,GAjBuB;;AAmBxB;;;;AAIA1X,EAAAA,QAvBwB,oBAuBf0W,WAvBe,EAuBF;AACpB,SAAK5oB,CAAL,GAAS4oB,WAAW,GAAIjY,aAAa,CAAC3L,UAAd,CAAyBwkB,UAAzB,IACnB,KAAKF,aAAL,GAAqB,CADF,CAAxB;AAED,GA1BuB;;AA4BxB;;;;;;AAMAhX,EAAAA,IAlCwB,gBAkCnBwX,QAlCmB,EAkCTvc,KAlCS,EAkCFwc,aAlCE,EAkCa;AACnC,QAAIjE,WAAW,GAAGnV,aAAa,CAAC3L,UAAd,CAAyB7B,KAA3C;AACA,QAAI4iB,YAAY,GAAGpV,aAAa,CAAC3L,UAAd,CAAyBnC,MAA5C;AACA,QAAImjB,OAAO,GAAGrV,aAAa,CAAC3L,UAAd,CAAyB7B,KAAzB,GAAiCoK,KAA/C;AACA,QAAI+a,OAAO,GAAG,CAAd;AAEA,QAAM0B,OAAO,GAAGF,QAAQ,GAAGnZ,aAAa,CAAC3L,UAAd,CAAyBwkB,UAApD;AACA,QAAMS,OAAO,GAAG,KAAKhqB,CAArB;AACA,QAAMiqB,WAAW,GAAGvZ,aAAa,CAAC3L,UAAd,CAAyB7B,KAA7C;AACA,QAAMgnB,YAAY,GAAGxZ,aAAa,CAAC3L,UAAd,CAAyBnC,MAA9C,CATmC,CAWnC;;AACA,QAAIoF,QAAJ,EAAc;AACZ6d,MAAAA,WAAW,IAAI,CAAf;AACAC,MAAAA,YAAY,IAAI,CAAhB;AACAC,MAAAA,OAAO,IAAI,CAAX;AACD;;AAEDA,IAAAA,OAAO,IAAI,KAAKV,SAAL,CAAetlB,CAA1B;AACAsoB,IAAAA,OAAO,IAAI,KAAKhD,SAAL,CAAerlB,CAA1B;AAEA,SAAKwF,SAAL,CAAe0c,IAAf;;AAEA,QAAI3Z,MAAJ,EAAY;AACV,UAAIuhB,aAAJ,EAAmB;AACjB,aAAKtkB,SAAL,CAAe2c,SAAf,CACI,KAAKwG,WAAL,GACKjY,aAAa,CAAC3L,UAAd,CAAyB7B,KAAzB,IAAkC,KAAKmmB,aAAL,GAAqB,CAAvD,CAFT,EAGI,KAAKrpB,CAHT;AAID,OALD,MAKO;AACL,aAAKwF,SAAL,CAAe2c,SAAf,CACI,KAAKwG,WAAL,GAAmBjY,aAAa,CAAC3L,UAAd,CAAyB7B,KADhD,EACuD,KAAKlD,CAD5D;AAED;;AACD,WAAKwF,SAAL,CAAewI,KAAf,CAAqB,CAAC,CAAtB,EAAyB,CAAzB;AACD,KAXD,MAWO;AACL,UAAMmc,UAAU,GACZ,KAAKpqB,CAAL,GAAU,KAAKspB,aAAL,GAAqB,CAAtB,GAA2B3Y,aAAa,CAAC3L,UAAd,CAAyB7B,KADjE;;AAEA,UAAI4mB,aAAJ,EAAmB;AACjB,aAAKtkB,SAAL,CAAe2c,SAAf,CAAyBgI,UAAzB,EAAqC,KAAKnqB,CAA1C;AACD,OAFD,MAEO;AACL,aAAKwF,SAAL,CAAe2c,SAAf,CAAyB,KAAKpiB,CAA9B,EAAiC,KAAKC,CAAtC;AACD;AACF;;AAED,SAAKwF,SAAL,CAAe4c,SAAf,CAAyB,KAAKwG,KAA9B,EAAqC7C,OAArC,EAA8CsC,OAA9C,EACIxC,WADJ,EACiBC,YADjB,EAEIiE,OAFJ,EAEaC,OAFb,EAGIC,WAHJ,EAGiBC,YAHjB;AAMA,SAAK1kB,SAAL,CAAe6c,OAAf;AACD,GArFuB;;AAuFxB;;;;;AAKA9M,EAAAA,iBA5FwB,6BA4FN6U,QA5FM,EA4FI;AAC1B,WAAOA,QAAQ,GAAGtY,IAAI,CAAC+P,KAAL,CAAWuI,QAAQ,GAAG,KAAKzlB,MAAL,CAAY8kB,WAAlC,CAAH,GAAoD,CAAnE;AACD,GA9FuB;;AAgGxB;;;;;;AAMA5Y,EAAAA,MAtGwB,kBAsGjBiD,SAtGiB,EAsGNsW,QAtGM,EAsGI;AAC1B,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIlV,SAAS,GAAG,KAAhB;;AAEA,QAAI,CAAC,KAAK6E,WAAV,EAAuB;AACrBoQ,MAAAA,QAAQ,GAAG,KAAK7U,iBAAL,CAAuB6U,QAAvB,CAAX,CADqB,CAErB;;AACA,UAAIA,QAAQ,GAAG,KAAKtB,QAAhB,IAA4B,KAAKO,aAAL,IAC9B,KAAK1kB,MAAL,CAAY2kB,kBADd,EACkC;AAChC,aAAKD,aAAL;AACA,aAAKP,QAAL,GAAgBc,QAAQ,CAAC,KAAKd,QAAL,GAAgB,GAAjB,EAAsB,EAAtB,CAAxB;AACD,OAJD,MAIO;AACL,aAAKsB,QAAL,GAAgB,CAAhB;AACD;;AAED,UAAIA,QAAQ,GAAG,CAAf,EAAkB;AAChB;AACA,YAAIA,QAAQ,GAAG,KAAKzlB,MAAL,CAAY6kB,oBAAvB,KAAgD,CAApD,EAAuD;AACrD;AACA,eAAKxP,WAAL,GAAmB,IAAnB;AACA,eAAKW,UAAL,GAAkB,CAAlB;AACAxF,UAAAA,SAAS,GAAG,IAAZ;AACD,SAPe,CAShB;;;AACA,YAAMmV,WAAW,GAAG,CAAC,KAAKtB,aAAL,GACjBoB,QADgB,EACNvb,MADM,CACC,CAAC,KAAKwa,aADP,CAApB;AAEA,aAAKN,MAAL,GAAcuB,WAAW,CAACC,KAAZ,CAAkB,EAAlB,CAAd;AACD,OAbD,MAaO;AACL,aAAKxB,MAAL,GAAc,KAAKC,aAAL,CAAmBuB,KAAnB,CAAyB,EAAzB,CAAd;AACD;AACF,KA3BD,MA2BO;AACL;AACA,UAAI,KAAKtB,eAAL,IAAwB,KAAKtkB,MAAL,CAAYic,gBAAxC,EAA0D;AACxD,aAAKjG,UAAL,IAAmB7G,SAAnB;;AAEA,YAAI,KAAK6G,UAAL,GAAkB,KAAKhW,MAAL,CAAY+E,cAAlC,EAAkD;AAChD2gB,UAAAA,KAAK,GAAG,KAAR;AACD,SAFD,MAEO,IAAI,KAAK1P,UAAL,GAAkB,KAAKhW,MAAL,CAAY+E,cAAZ,GAA6B,CAAnD,EAAsD;AAC3D,eAAKiR,UAAL,GAAkB,CAAlB;AACA,eAAKsO,eAAL;AACD;AACF,OATD,MASO;AACL,aAAKjP,WAAL,GAAmB,KAAnB;AACA,aAAKiP,eAAL,GAAuB,CAAvB;AACA,aAAKtO,UAAL,GAAkB,CAAlB;AACD;AACF,KA/CyB,CAiD1B;;;AACA,QAAI0P,KAAJ,EAAW;AACT,WAAK,IAAI5R,CAAC,GAAG,KAAKsQ,MAAL,CAAYpc,MAAZ,GAAqB,CAAlC,EAAqC8L,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,aAAKpG,IAAL,CAAUoG,CAAV,EAAamR,QAAQ,CAAC,KAAKb,MAAL,CAAYtQ,CAAZ,CAAD,EAAiB,EAAjB,CAArB;AACD;AACF;;AAED,SAAK+R,aAAL;AACA,WAAOrV,SAAP;AACD,GAhKuB;;AAkKxB;;;AAGAqV,EAAAA,aArKwB,2BAqKR;AACd,QAAIZ,QAAQ,CAAC,KAAK7gB,SAAN,EAAiB,EAAjB,CAAR,GAA+B,CAAnC,EAAsC;AACpC,WAAKvD,SAAL,CAAe0c,IAAf;AACA,WAAK1c,SAAL,CAAewO,WAAf,GAA6B,EAA7B;;AACA,WAAK,IAAIyE,CAAC,GAAG,KAAK1P,SAAL,CAAe4D,MAAf,GAAwB,CAArC,EAAwC8L,CAAC,IAAI,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACnD,aAAKpG,IAAL,CAAUoG,CAAV,EAAamR,QAAQ,CAAC,KAAK7gB,SAAL,CAAe0P,CAAf,CAAD,EAAoB,EAApB,CAArB,EAA8C,IAA9C;AACD;;AACD,WAAKjT,SAAL,CAAe6c,OAAf;AACD;AACF,GA9KuB;;AAgLxB;;;;;AAKAzI,EAAAA,YArLwB,wBAqLXwQ,QArLW,EAqLD;AACrBA,IAAAA,QAAQ,GAAG,KAAK7U,iBAAL,CAAuB6U,QAAvB,CAAX;AACA,QAAMK,YAAY,GAAG,CAAC,KAAKzB,aAAL,GAClBoB,QADiB,EACPvb,MADO,CACA,CAAC,KAAKwa,aADN,CAArB;AAGA,SAAKtgB,SAAL,GAAiB,CAAC,IAAD,EAAO,IAAP,EAAa,EAAb,EAAiB2hB,MAAjB,CAAwBD,YAAY,CAACF,KAAb,CAAmB,EAAnB,CAAxB,CAAjB;AACD,GA3LuB;;AA8LxB;;;;;AAKApR,EAAAA,qBAnMwB,iCAmMFnM,CAnME,EAmMC;AACvB,QAAIjN,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;;AAEA,QAAIgN,CAAC,CAAC2d,OAAN,EAAe;AACb;AACA,UAAMC,YAAY,GAAG,KAAKrlB,MAAL,CAAYiO,qBAAZ,EAArB;AACAzT,MAAAA,CAAC,GAAGiN,CAAC,CAAC2d,OAAF,CAAU,CAAV,EAAaE,OAAb,GAAuBD,YAAY,CAACE,IAAxC;AACA9qB,MAAAA,CAAC,GAAGgN,CAAC,CAAC2d,OAAF,CAAU,CAAV,EAAaI,OAAb,GAAuBH,YAAY,CAACnX,GAAxC;AACD,KALD,MAKO;AACL1T,MAAAA,CAAC,GAAGiN,CAAC,CAACge,OAAN;AACAhrB,MAAAA,CAAC,GAAGgN,CAAC,CAACie,OAAN;AACD;;AAED,SAAK9B,eAAL,GAAuB,KAAK+B,kBAAL,EAAvB;AACA,WAAOnrB,CAAC,IAAI,KAAKopB,eAAL,CAAqBppB,CAA1B,IAA+BA,CAAC,IACnC,KAAKopB,eAAL,CAAqBppB,CAArB,GAAyB,KAAKopB,eAAL,CAAqBlnB,KAD3C,IAEHjC,CAAC,IAAI,KAAKmpB,eAAL,CAAqBnpB,CAFvB,IAE4BA,CAAC,IAChC,KAAKmpB,eAAL,CAAqBnpB,CAArB,GAAyB,KAAKmpB,eAAL,CAAqBjnB,MAHlD;AAID,GAtNuB;;AAwNxB;;;;AAIAgpB,EAAAA,kBA5NwB,gCA4NH;AACnB,WAAO;AACLnrB,MAAAA,CAAC,EAAG,KAAKA,CAAL,GAAU,KAAKspB,aAAL,GAAqB,CAAtB,GACT3Y,aAAa,CAAC3L,UAAd,CAAyB7B,KAD1B,GAECwN,aAAa,CAAC/L,MAAd,CAAqB+kB,2BAHpB;AAIL1pB,MAAAA,CAAC,EAAE,KAAKA,CAJH;AAKLiC,MAAAA,KAAK,EAAEyO,aAAa,CAAC3L,UAAd,CAAyB7B,KAAzB,IAAkC,KAAK6F,SAAL,CAAe4D,MAAf,GAAwB,CAA1D,IACH+D,aAAa,CAAC/L,MAAd,CAAqB+kB,2BANpB;AAOLxnB,MAAAA,MAAM,EAAEwO,aAAa,CAAC3L,UAAd,CAAyBnC,MAAzB,GACH8N,aAAa,CAAC/L,MAAd,CAAqB+kB,2BAArB,GAAmD;AARnD,KAAP;AAUD,GAvOuB;;AAyOxB;;;;AAIAyB,EAAAA,cA7OwB,4BA6OP;AACf,QAAMvX,GAAG,GAAGC,YAAY,EAAxB;AACA,QAAMC,SAAS,GAAGF,GAAG,IAAI,KAAKwM,cAAL,IAAuBxM,GAA3B,CAArB;AACA,QAAIyW,KAAK,GAAG,IAAZ;AACA,SAAKjK,cAAL,GAAsBxM,GAAtB,CAJe,CAMf;;AACA,QAAI,KAAKqV,eAAL,GAAuB,KAAKtkB,MAAL,CAAYic,gBAAZ,GAA+B,CAA1D,EAA6D;AAC3D,WAAKpH,uBAAL;AACA;AACD;;AAED,SAAKmB,UAAL,IAAmB7G,SAAnB;;AAEA,QAAI,KAAK6G,UAAL,GAAkB,KAAKhW,MAAL,CAAY+E,cAAlC,EAAkD;AAChD2gB,MAAAA,KAAK,GAAG,KAAR;AACD,KAFD,MAEO,IAAI,KAAK1P,UAAL,GAAkB,KAAKhW,MAAL,CAAY+E,cAAZ,GAA6B,CAAnD,EAAsD;AAC3D,WAAKiR,UAAL,GAAkB,CAAlB;AACA,WAAKsO,eAAL;AACD;;AAED,QAAIoB,KAAJ,EAAW;AACT,WAAKG,aAAL;AACD,KAFD,MAEO;AACL,WAAKY,oBAAL;AACD,KAzBc,CA0Bf;;;AACA,SAAKlC,aAAL,GACI3Q,qBAAqB,CAAC,KAAK4S,cAAL,CAAoBrjB,IAApB,CAAyB,IAAzB,CAAD,CADzB;AAED,GA1QuB;;AA4QxB;;;AAGAsjB,EAAAA,oBA/QwB,kCA+QD;AACrB,SAAK5lB,SAAL,CAAe0c,IAAf;AACA,SAAK1c,SAAL,CAAe6K,SAAf,GAA2B,MAA3B;AACA,SAAK7K,SAAL,CAAe6lB,IAAf,CAAoB,KAAKlC,eAAL,CAAqBppB,CAAzC,EAA4C,KAAKopB,eAAL,CAAqBnpB,CAAjE,EACI,KAAKmpB,eAAL,CAAqBlnB,KADzB,EACgC,KAAKknB,eAAL,CAAqBjnB,MADrD;AAEA,SAAKsD,SAAL,CAAe8K,IAAf;AACA,SAAK9K,SAAL,CAAe6c,OAAf;AACD,GAtRuB;;AAwRxB;;;AAGA9I,EAAAA,sBA3RwB,oCA2RC;AACvB,SAAK6P,iBAAL,GAAyB,IAAzB;AACA,SAAK+B,cAAL;AACD,GA9RuB;;AAgSxB;;;;AAIA/R,EAAAA,mBApSwB,iCAoSF;AACpB,WAAO,KAAKgQ,iBAAZ;AACD,GAtSuB;;AAwSxB;;;AAGA5P,EAAAA,uBA3SwB,qCA2SE;AACxB,QAAI,KAAK0P,aAAT,EAAwB;AACtB1O,MAAAA,oBAAoB,CAAC,KAAK0O,aAAN,CAApB;AACD;;AACD,SAAKD,eAAL,GAAuB,CAAvB;AACA,SAAKtO,UAAL,GAAkB,CAAlB;AACA,SAAKyO,iBAAL,GAAyB,KAAzB;AACA,SAAKgC,oBAAL;AACA,SAAKZ,aAAL;AACD,GApTuB;;AAsTxB;;;AAGAlR,EAAAA,cAzTwB,4BAyTP;AACf,SAAKM,YAAL,CAAkB,CAAlB;AACA,SAAKJ,uBAAL;AACD,GA5TuB;;AA8TxB;;;AAGAvB,EAAAA,KAjUwB,mBAiUhB;AACN,SAAKpH,MAAL,CAAY,CAAZ,EAAe,CAAf;AACA,SAAKmJ,WAAL,GAAmB,KAAnB;AACD;AApUuB,CAA1B,EAwUA;;AAEA;;;;;;;;;AAQA,SAASsR,KAAT,CAAe/lB,MAAf,EAAuB8f,SAAvB,EAAkCkG,cAAlC,EAAkD;AAChD,OAAKhmB,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyC,OAAKD,MAAL,CAAY6K,UAAZ,CAAuB,IAAvB,CAD7C;AAEA,OAAKiV,SAAL,GAAiBA,SAAjB;AACA,OAAKkG,cAAL,GAAsBA,cAAtB;AACA,OAAKxW,IAAL,GAAYwW,cAAZ;AACA,OAAKppB,IAAL,GAAY,CAAZ;AACA,OAAKuY,MAAL,GAAc,KAAd;AACA,OAAK4K,GAAL,GACIxG,YAAY,CAACwM,KAAK,CAAC3mB,MAAN,CAAa5B,aAAd,EAA6BuoB,KAAK,CAAC3mB,MAAN,CAAa9B,aAA1C,CADhB;AAGA,OAAKyL,IAAL;AACD;AAGD;;;;;;AAIAgd,KAAK,CAAC3mB,MAAN,GAAe;AACb/B,EAAAA,MAAM,EAAE,EADK;AAEbC,EAAAA,aAAa,EAAE,GAFF;AAGbC,EAAAA,aAAa,EAAE,EAHF;AAIbC,EAAAA,aAAa,EAAE,GAJF;AAKbC,EAAAA,aAAa,EAAE,EALF;AAMbE,EAAAA,KAAK,EAAE;AANM,CAAf;AAUAooB,KAAK,CAAC5e,SAAN,GAAkB;AAChB;;;AAGA4B,EAAAA,IAJgB,kBAIT;AACL,SAAKnM,IAAL,GAAY2c,YAAY,CAACwM,KAAK,CAAC3mB,MAAN,CAAa7B,aAAd,EACpBwoB,KAAK,CAAC3mB,MAAN,CAAa3B,aADO,CAAxB;AAEA,SAAKqP,IAAL;AACD,GARe;;AAUhB;;;AAGAA,EAAAA,IAbgB,kBAaT;AACL,SAAK7M,SAAL,CAAe0c,IAAf;AACA,QAAI2D,WAAW,GAAGyF,KAAK,CAAC3mB,MAAN,CAAazB,KAA/B;AACA,QAAI4iB,YAAY,GAAGwF,KAAK,CAAC3mB,MAAN,CAAa/B,MAAhC;AACA,QAAM4oB,WAAW,GAAG3F,WAApB;AACA,QAAMyC,YAAY,GAAGxC,YAArB;;AACA,QAAI9d,QAAJ,EAAc;AACZ6d,MAAAA,WAAW,GAAGA,WAAW,GAAG,CAA5B;AACAC,MAAAA,YAAY,GAAGA,YAAY,GAAG,CAA9B;AACD;;AAED,SAAKtgB,SAAL,CAAe4c,SAAf,CAAyBre,MAAM,CAACmK,WAAhC,EAA6C,KAAKmX,SAAL,CAAetlB,CAA5D,EACI,KAAKslB,SAAL,CAAerlB,CADnB,EAEI6lB,WAFJ,EAEiBC,YAFjB,EAGI,KAAK/Q,IAHT,EAGe,KAAK5S,IAHpB,EAIIqpB,WAJJ,EAIiBlD,YAJjB;AAMA,SAAK9iB,SAAL,CAAe6c,OAAf;AACD,GA/Be;;AAiChB;;;;AAIAxR,EAAAA,MArCgB,kBAqCTxB,KArCS,EAqCF;AACZ,QAAI,CAAC,KAAKqL,MAAV,EAAkB;AAChB,WAAK3F,IAAL,IAAajD,IAAI,CAACK,IAAL,CAAU9C,KAAV,CAAb;AACA,WAAKgD,IAAL,GAFgB,CAIhB;;AACA,UAAI,CAAC,KAAK2T,SAAL,EAAL,EAAuB;AACrB,aAAKtL,MAAL,GAAc,IAAd;AACD;AACF;AACF,GA/Ce;;AAiDhB;;;;AAIAsL,EAAAA,SArDgB,uBAqDJ;AACV,WAAO,KAAKjR,IAAL,GAAYuW,KAAK,CAAC3mB,MAAN,CAAazB,KAAzB,GAAiC,CAAxC;AACD;AAvDe,CAAlB;AA2DA;;;;;;;;;;AASA,SAASuoB,YAAT,CAAsBlmB,MAAtB,EAA8B8f,SAA9B,EAAyCkG,cAAzC,EAAyDvpB,IAAzD,EAA+D;AAC7D,OAAKuD,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyC,OAAKD,MAAL,CAAY6K,UAAZ,CAAuB,IAAvB,CAD7C;AAEA,OAAKiV,SAAL,GAAiBA,SAAjB;AACA,OAAKkG,cAAL,GAAsBA,cAAtB;AACA,OAAKxW,IAAL,GAAYwW,cAAZ;AACA,OAAKppB,IAAL,GAAY,CAAZ;AACA,OAAKuY,MAAL,GAAc,KAAd;AACA,OAAK1Y,IAAL,GAAYA,IAAZ;AACA,OAAKsjB,GAAL,GACIxG,YAAY,CAAC2M,YAAY,CAAC9mB,MAAb,CAAoBnB,OAArB,EAA8BioB,YAAY,CAAC9mB,MAAb,CAAoBpB,OAAlD,CADhB;AAEA,OAAK8c,SAAL,GAAiB,CAAjB;AACA,OAAKqL,YAAL,GAAoB,KAApB;AAEA,OAAKC,YAAL,GAAoB,EAApB;AACA,OAAKrd,IAAL;AACD;AAED;;;;;;;AAKAmd,YAAY,CAAC9mB,MAAb,GAAsB;AACpBrB,EAAAA,UAAU,EAAE,CADQ;AAEpBC,EAAAA,OAAO,EAAE,CAFW;AAGpBC,EAAAA,OAAO,EAAE,CAHW;AAIpBC,EAAAA,GAAG,EAAE,CAJe;AAKpBC,EAAAA,KAAK,EAAE,CALa;AAMpBN,EAAAA,KAAK,EAAE,CANa;AAOpBwoB,EAAAA,YAAY,EAAE,CAPM,CAOH;;AAPG,CAAtB;AAWAH,YAAY,CAAC/e,SAAb,GAAyB;AACvB;;;AAGA4B,EAAAA,IAJuB,kBAIhB;AACL,SAAKqd,YAAL,GAAoB5nB,MAAM,CAACmB,gBAAP,CAAwBpF,aAAxB,CAAsC,KAAKkC,IAA3C,CAApB;;AACA,QAAI,KAAK2pB,YAAL,CAAkBE,KAAtB,EAA6B;AAC3B,WAAK9W,IAAL,GAAY,KAAK4W,YAAL,CAAkBG,WAA9B;AACD;;AACD,SAAK3pB,IAAL,GAAYspB,YAAY,CAAC9mB,MAAb,CAAoBvB,KAApB,GAA4B,KAAKuoB,YAAL,CAAkB/oB,MAA9C,GACR,KAAK+oB,YAAL,CAAkB1oB,MADtB;AAEA,SAAKoP,IAAL;AACD,GAZsB;;AAcvB;;;AAGAA,EAAAA,IAjBuB,kBAiBhB;AACL,SAAK7M,SAAL,CAAe0c,IAAf;AACA,QAAI2D,WAAW,GAAG,KAAK8F,YAAL,CAAkBzoB,KAApC;AACA,QAAI4iB,YAAY,GAAG,KAAK6F,YAAL,CAAkB/oB,MAArC;AACA,QAAImjB,OAAO,GAAG,KAAK4F,YAAL,CAAkBxoB,KAAhC;AACA,QAAMqoB,WAAW,GAAG3F,WAApB;AACA,QAAMyC,YAAY,GAAGxC,YAArB;;AAEA,QAAI9d,QAAJ,EAAc;AACZ6d,MAAAA,WAAW,IAAI,CAAf;AACAC,MAAAA,YAAY,IAAI,CAAhB;AACAC,MAAAA,OAAO,IAAI,CAAX;AACD;;AAED,SAAKvgB,SAAL,CAAe4c,SAAf,CACIre,MAAM,CAACmK,WADX,EACwB6X,OADxB,EACiC,KAAKV,SAAL,CAAerlB,CADhD,EACmD6lB,WADnD,EAEIC,YAFJ,EAEkB,KAAK/Q,IAFvB,EAE6B,KAAK5S,IAFlC,EAEwCqpB,WAFxC,EAEqDlD,YAFrD;AAIA,SAAK9iB,SAAL,CAAe6c,OAAf;AACD,GApCsB;;AAsCvB;;;;AAIAxR,EAAAA,MA1CuB,kBA0ChBxB,KA1CgB,EA0CT;AACZ,QAAI,CAAC,KAAKqL,MAAV,EAAkB;AAChB,UAAI,KAAKiR,YAAL,CAAkBE,KAAtB,EAA6B;AAC3B,aAAKxL,SAAL,IAAkBhR,KAAlB;;AACA,YAAI,KAAKgR,SAAL,GAAiBoL,YAAY,CAAC9mB,MAAb,CAAoBinB,YAAzC,EAAuD;AACrD,eAAKvL,SAAL,GAAiB,CAAjB;AACA,eAAKqL,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACD;;AAED,YAAI,KAAKC,YAAL,CAAkBI,aAAlB,IACA,KAAKJ,YAAL,CAAkBK,aADtB,EACqC;AACnC,eAAK7pB,IAAL,GAAY,KAAKupB,YAAL,GAAoB,KAAKC,YAAL,CAAkBI,aAAtC,GACoB,KAAKJ,YAAL,CAAkBK,aADlD;AAED;AACF,OAZD,MAYO;AACL;AACA,aAAKjX,IAAL,IAAa0W,YAAY,CAAC9mB,MAAb,CAAoBjB,KAAjC;AACD;;AACD,WAAK2O,IAAL,GAjBgB,CAmBhB;;AACA,UAAI,CAAC,KAAK2T,SAAL,EAAL,EAAuB;AACrB,aAAKtL,MAAL,GAAc,IAAd;AACD;AACF;AACF,GAnEsB;;AAqEvB;;;;AAIAsL,EAAAA,SAzEuB,uBAyEX;AACV,WAAO,KAAKjR,IAAL,GAAY,KAAK4W,YAAL,CAAkBzoB,KAA9B,GAAsC,CAA7C;AACD;AA3EsB,CAAzB,EAgFA;;AAEA;;;;;;;;AAOA,SAAS+oB,SAAT,CAAmB1mB,MAAnB,EAA2B8f,SAA3B,EAAsCkG,cAAtC,EAAsD;AACpD,OAAKlG,SAAL,GAAiBA,SAAjB;AACA,OAAK9f,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyCD,EAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,CAD7C;AAEA,OAAK2E,IAAL,GAAYwW,cAAc,GAAG,EAA7B;AACA,OAAKppB,IAAL,GAAY,EAAZ;AACA,OAAK+pB,YAAL,GAAoB,CAApB;AACA,OAAKC,OAAL,GAAe,CAAf;AACA,OAAKZ,cAAL,GAAsBA,cAAtB;AACA,OAAKa,KAAL,GAAa,EAAb;AACA,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,UAAL;AACD;AAED;;;;;AAGAL,SAAS,CAACtnB,MAAV,GAAmB;AACjB4nB,EAAAA,UAAU,EAAE,KADK;AAEjB3pB,EAAAA,MAAM,EAAE,EAFS;AAGjB4pB,EAAAA,UAAU,EAAE,IAHK;AAIjBC,EAAAA,SAAS,EAAE,CAJM;AAKjBC,EAAAA,SAAS,EAAE,CALM;AAMjBC,EAAAA,UAAU,EAAE,GANK;AAOjBC,EAAAA,UAAU,EAAE,EAPK;AAQjB1pB,EAAAA,KAAK,EAAE;AARU,CAAnB;AAWA+oB,SAAS,CAACY,MAAV,GAAmB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,EAAhB,EAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,CAAnB;AAEAZ,SAAS,CAACvf,SAAV,GAAsB;AACpB;;;;AAIAmE,EAAAA,MALoB,kBAKbxK,SALa,EAKF;AAChB;AACA,QAAIA,SAAS,IAAI,KAAK8lB,OAAL,KAAiB,CAAlC,EAAqC;AACnC,WAAKD,YAAL;;AAEA,UAAI,KAAKA,YAAL,IAAqBD,SAAS,CAACY,MAAV,CAAiBlgB,MAA1C,EAAkD;AAChD,aAAKuf,YAAL,GAAoB,CAApB;AACD;AACF,KARe,CAUhB;;;AACA,QAAI7lB,SAAS,KAAK,KAAK8lB,OAAL,GAAe,CAAf,IAAoB,KAAKA,OAAL,KAAiB,CAA1C,CAAb,EAA2D;AACzD,WAAKA,OAAL,IAAgBF,SAAS,CAACtnB,MAAV,CAAiB4nB,UAAjC;AACD,KAFD,MAEO,IAAI,KAAKJ,OAAL,GAAe,CAAnB,EAAsB;AAC3B,WAAKA,OAAL,IAAgBF,SAAS,CAACtnB,MAAV,CAAiB4nB,UAAjC;AACD,KAfe,CAiBhB;;;AACA,QAAI,KAAKJ,OAAL,GAAe,CAAnB,EAAsB;AACpB,WAAKpX,IAAL,GAAY,KAAK+X,UAAL,CAAgB,KAAK/X,IAArB,EAA2BkX,SAAS,CAACtnB,MAAV,CAAiB6nB,UAA5C,CAAZ,CADoB,CAGpB;;AACA,UAAI,KAAKH,SAAT,EAAoB;AAClB,aAAK,IAAI5T,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwT,SAAS,CAACtnB,MAAV,CAAiB8nB,SAArC,EAAgDhU,CAAC,EAAjD,EAAqD;AACnD,eAAK2T,KAAL,CAAW3T,CAAX,EAAc1Y,CAAd,GACI,KAAK+sB,UAAL,CAAgB,KAAKV,KAAL,CAAW3T,CAAX,EAAc1Y,CAA9B,EAAiCksB,SAAS,CAACtnB,MAAV,CAAiBgoB,UAAlD,CADJ;AAED;AACF;;AACD,WAAKta,IAAL;AACD,KAXD,MAWO;AACL,WAAK8Z,OAAL,GAAe,CAAf;AACA,WAAKG,UAAL;AACD;;AACD,SAAKD,SAAL,GAAiB,IAAjB;AACD,GAvCmB;AAyCpBS,EAAAA,UAzCoB,sBAyCTC,UAzCS,EAyCG1d,KAzCH,EAyCU;AAC5B,QAAI0d,UAAU,GAAG,CAACd,SAAS,CAACtnB,MAAV,CAAiBzB,KAAnC,EAA0C;AACxC6pB,MAAAA,UAAU,GAAG,KAAKxB,cAAlB;AACD,KAFD,MAEO;AACLwB,MAAAA,UAAU,IAAI1d,KAAd;AACD;;AACD,WAAO0d,UAAP;AACD,GAhDmB;AAkDpB1a,EAAAA,IAlDoB,kBAkDb;AACL,QAAI2a,eAAe,GAAG,KAAKd,YAAL,KAAsB,CAAtB,GAA0BD,SAAS,CAACtnB,MAAV,CAAiBzB,KAAjB,GAAyB,CAAnD,GAC0B+oB,SAAS,CAACtnB,MAAV,CAAiBzB,KADjE;AAEA,QAAI+pB,gBAAgB,GAAGhB,SAAS,CAACtnB,MAAV,CAAiB/B,MAAxC;AACA,QAAIsqB,WAAW,GAAG,KAAK7H,SAAL,CAAetlB,CAAf,GAAmBksB,SAAS,CAACY,MAAV,CAAiB,KAAKX,YAAtB,CAArC;AACA,QAAMiB,eAAe,GAAGH,eAAxB;AACA,QAAII,QAAQ,GAAGnB,SAAS,CAACtnB,MAAV,CAAiB+nB,SAAhC;AACA,QAAIW,WAAW,GAAG1tB,wDAA8BC,QAA9B,CAAuCC,IAAvC,CAA4Ce,IAA5C,CAAiDb,CAAnE;;AAEA,QAAIiI,QAAJ,EAAc;AACZglB,MAAAA,eAAe,IAAI,CAAnB;AACAC,MAAAA,gBAAgB,IAAI,CAApB;AACAC,MAAAA,WAAW,GAAG,KAAK7H,SAAL,CAAetlB,CAAf,GACTksB,SAAS,CAACY,MAAV,CAAiB,KAAKX,YAAtB,IAAsC,CAD3C;AAEAkB,MAAAA,QAAQ,IAAI,CAAZ;AACAC,MAAAA,WAAW,GAAG1tB,wDAA8BC,QAA9B,CAAuCmB,IAAvC,CAA4CH,IAA5C,CAAiDb,CAA/D;AACD;;AAED,SAAKyF,SAAL,CAAe0c,IAAf;AACA,SAAK1c,SAAL,CAAewO,WAAf,GAA6B,KAAKmY,OAAlC,CAnBK,CAqBL;;AACA,QAAI,KAAKE,SAAT,EAAoB;AAClB,WAAK,IAAI5T,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwT,SAAS,CAACtnB,MAAV,CAAiB8nB,SAArC,EAAgDhU,CAAC,EAAjD,EAAqD;AACnD,aAAKjT,SAAL,CAAe4c,SAAf,CACIre,MAAM,CAACqK,eADX,EAC4Bif,WAD5B,EACyC,KAAKjB,KAAL,CAAW3T,CAAX,EAAc4P,OADvD,EAEI+E,QAFJ,EAEcA,QAFd,EAEwBtb,IAAI,CAAC+P,KAAL,CAAW,KAAKuK,KAAL,CAAW3T,CAAX,EAAc1Y,CAAzB,CAFxB,EAEqD,KAAKqsB,KAAL,CAAW3T,CAAX,EAAczY,CAFnE,EAGIisB,SAAS,CAACtnB,MAAV,CAAiB+nB,SAHrB,EAGgCT,SAAS,CAACtnB,MAAV,CAAiB+nB,SAHjD;AAID;AACF,KA7BI,CA+BL;;;AACA,SAAKlnB,SAAL,CAAe4c,SAAf,CACIre,MAAM,CAACqK,eADX,EAC4B8e,WAD5B,EACyC,KAAK7H,SAAL,CAAerlB,CADxD,EAC2DgtB,eAD3D,EAEIC,gBAFJ,EAEsBnb,IAAI,CAAC+P,KAAL,CAAW,KAAK9M,IAAhB,CAFtB,EAE6C,KAAK5S,IAFlD,EAEwDgrB,eAFxD,EAGIlB,SAAS,CAACtnB,MAAV,CAAiB/B,MAHrB;AAKA,SAAK4C,SAAL,CAAewO,WAAf,GAA6B,CAA7B;AACA,SAAKxO,SAAL,CAAe6c,OAAf;AACD,GAzFmB;AA2FpB;AACAiK,EAAAA,UA5FoB,wBA4FP;AACX,QAAMgB,WAAW,GAAGxb,IAAI,CAAC+P,KAAL,CAAW,KAAK0J,cAAL,GAC3BU,SAAS,CAACtnB,MAAV,CAAiB8nB,SADD,CAApB;;AAGA,SAAK,IAAIhU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwT,SAAS,CAACtnB,MAAV,CAAiB8nB,SAArC,EAAgDhU,CAAC,EAAjD,EAAqD;AACnD,WAAK2T,KAAL,CAAW3T,CAAX,IAAgB,EAAhB;AACA,WAAK2T,KAAL,CAAW3T,CAAX,EAAc1Y,CAAd,GAAkB+e,YAAY,CAACwO,WAAW,GAAG7U,CAAf,EAAkB6U,WAAW,IAAI7U,CAAC,GAAG,CAAR,CAA7B,CAA9B;AACA,WAAK2T,KAAL,CAAW3T,CAAX,EAAczY,CAAd,GAAkB8e,YAAY,CAAC,CAAD,EAAImN,SAAS,CAACtnB,MAAV,CAAiBioB,UAArB,CAA9B;;AAEA,UAAI5kB,QAAJ,EAAc;AACZ,aAAKokB,KAAL,CAAW3T,CAAX,EAAc4P,OAAd,GACI1oB,wDAA8BC,QAA9B,CAAuCmB,IAAvC,CAA4CH,IAA5C,CAAiDZ,CAAjD,GACAisB,SAAS,CAACtnB,MAAV,CAAiB+nB,SAAjB,GAA6B,CAA7B,GAAiCjU,CAFrC;AAGD,OAJD,MAIO;AACL,aAAK2T,KAAL,CAAW3T,CAAX,EAAc4P,OAAd,GACI1oB,wDAA8BC,QAA9B,CAAuCC,IAAvC,CAA4Ce,IAA5C,CAAiDZ,CAAjD,GACAisB,SAAS,CAACtnB,MAAV,CAAiB+nB,SAAjB,GAA6BjU,CAFjC;AAGD;AACF;AACF,GA/GmB;AAiHpBR,EAAAA,KAjHoB,mBAiHZ;AACN,SAAKiU,YAAL,GAAoB,CAApB;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKtb,MAAL,CAAY,KAAZ;AACD;AArHmB,CAAtB,EA0HA;;AAEA;;;;;;;;AAOA,SAAS0c,WAAT,CAAqBhoB,MAArB,EAA6BioB,UAA7B,EAAyC;AACvC,MAAIzH,OAAO,GAAGyH,UAAU,CAAC5pB,QAAzB;AACA,MAAIykB,OAAO,GAAGmF,UAAU,CAAC3pB,QAAzB;;AAEA,MAAImE,QAAJ,EAAc;AACZ+d,IAAAA,OAAO,IAAI,CAAX;AACAsC,IAAAA,OAAO,IAAI,CAAX;AACD;;AAED,OAAKhD,SAAL,GAAiB;AAACtlB,IAAAA,CAAC,EAAEgmB,OAAJ;AAAa/lB,IAAAA,CAAC,EAAEqoB;AAAhB,GAAjB;AACA,OAAK9iB,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyCD,EAAAA,MAAM,CAAC6K,UAAP,CAAkB,IAAlB,CAD7C;AAEA,OAAKqd,gBAAL,GAAwB,EAAxB;AACA,OAAK1oB,UAAL,GAAkByoB,UAAlB;AAEA,OAAKE,UAAL,GAAkB,CAAC,KAAKrI,SAAL,CAAetlB,CAAhB,EAAmB,KAAKslB,SAAL,CAAetlB,CAAf,GACjC,KAAKgF,UAAL,CAAgB7B,KADF,CAAlB;AAEA,OAAK6R,IAAL,GAAY,EAAZ;AACA,OAAK5S,IAAL,GAAY,CAAZ;AACA,OAAKwrB,aAAL,GAAqB,GAArB;AAEA,OAAKC,mBAAL,CAAyBJ,UAAzB;AACA,OAAKnb,IAAL;AACD;AAGD;;;;;;AAIAkb,WAAW,CAACxoB,UAAZ,GAAyB;AACvB7B,EAAAA,KAAK,EAAE,GADgB;AAEvBN,EAAAA,MAAM,EAAE,EAFe;AAGvBkB,EAAAA,IAAI,EAAE;AAHiB,CAAzB;AAOAypB,WAAW,CAAC7gB,SAAZ,GAAwB;AACtB;;;AAGAkhB,EAAAA,mBAJsB,+BAIFC,aAJE,EAIa;AACjC,SAAK,IAAMC,SAAX,IAAwBD,aAAxB,EAAuC;AACrC,UAAIC,SAAS,KAAK,UAAd,IAA4BA,SAAS,KAAK,UAA9C,EAA0D;AACxD,YAAI9lB,QAAJ,EAAc;AACZ,cAAI8lB,SAAS,KAAK,MAAlB,EAA0B;AACxB,iBAAKL,gBAAL,CAAsBK,SAAtB,IAAmCD,aAAa,CAACC,SAAD,CAAb,GAA2B,CAA9D;AACD;AACF,SAJD,MAIO;AACL,eAAKL,gBAAL,CAAsBK,SAAtB,IAAmCD,aAAa,CAACC,SAAD,CAAhD;AACD;;AACD,aAAK/oB,UAAL,CAAgB+oB,SAAhB,IAA6BD,aAAa,CAACC,SAAD,CAA1C;AACD;AACF;;AAED,SAAK/Y,IAAL,GAAY,CAAC,CAAD,EAAI8Y,aAAa,CAAC3qB,KAAlB,CAAZ;AACA,SAAKf,IAAL,GAAY0rB,aAAa,CAAC/pB,IAA1B;AACD,GApBqB;;AAsBtB;;;AAGAiqB,EAAAA,aAzBsB,2BAyBN;AACd,WAAOjc,IAAI,CAACiN,MAAL,KAAgB,KAAK4O,aAArB,GAAqC,KAAK5oB,UAAL,CAAgB7B,KAArD,GAA6D,CAApE;AACD,GA3BqB;;AA6BtB;;;AAGAmP,EAAAA,IAhCsB,kBAgCf;AACL,SAAK7M,SAAL,CAAe4c,SAAf,CAAyBre,MAAM,CAACmK,WAAhC,EAA6C,KAAKwf,UAAL,CAAgB,CAAhB,CAA7C,EACI,KAAKrI,SAAL,CAAerlB,CADnB,EAEI,KAAKytB,gBAAL,CAAsBvqB,KAF1B,EAEiC,KAAKuqB,gBAAL,CAAsB7qB,MAFvD,EAGI,KAAKmS,IAAL,CAAU,CAAV,CAHJ,EAGkB,KAAK5S,IAHvB,EAII,KAAK4C,UAAL,CAAgB7B,KAJpB,EAI2B,KAAK6B,UAAL,CAAgBnC,MAJ3C;AAMA,SAAK4C,SAAL,CAAe4c,SAAf,CAAyBre,MAAM,CAACmK,WAAhC,EAA6C,KAAKwf,UAAL,CAAgB,CAAhB,CAA7C,EACI,KAAKrI,SAAL,CAAerlB,CADnB,EAEI,KAAKytB,gBAAL,CAAsBvqB,KAF1B,EAEiC,KAAKuqB,gBAAL,CAAsB7qB,MAFvD,EAGI,KAAKmS,IAAL,CAAU,CAAV,CAHJ,EAGkB,KAAK5S,IAHvB,EAII,KAAK4C,UAAL,CAAgB7B,KAJpB,EAI2B,KAAK6B,UAAL,CAAgBnC,MAJ3C;AAKD,GA5CqB;;AA8CtB;;;;;AAKAkqB,EAAAA,UAnDsB,sBAmDXkB,GAnDW,EAmDNC,SAnDM,EAmDK;AACzB,QAAMC,KAAK,GAAGF,GAAd;AACA,QAAMG,KAAK,GAAGH,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgB,CAA9B;AAEA,SAAKjZ,IAAL,CAAUmZ,KAAV,KAAoBD,SAApB;AACA,SAAKlZ,IAAL,CAAUoZ,KAAV,IAAmB,KAAKpZ,IAAL,CAAUmZ,KAAV,IAAmB,KAAKnpB,UAAL,CAAgB7B,KAAtD;;AAEA,QAAI,KAAK6R,IAAL,CAAUmZ,KAAV,KAAoB,CAAC,KAAKnpB,UAAL,CAAgB7B,KAAzC,EAAgD;AAC9C,WAAK6R,IAAL,CAAUmZ,KAAV,KAAoB,KAAKnpB,UAAL,CAAgB7B,KAAhB,GAAwB,CAA5C;AACA,WAAK6R,IAAL,CAAUoZ,KAAV,IAAmB,KAAKpZ,IAAL,CAAUmZ,KAAV,IAAmB,KAAKnpB,UAAL,CAAgB7B,KAAtD;AACA,WAAKwqB,UAAL,CAAgBQ,KAAhB,IAAyB,KAAKH,aAAL,KAAuB,KAAK1I,SAAL,CAAetlB,CAA/D;AACD;AACF,GA/DqB;;AAiEtB;;;;;AAKA8Q,EAAAA,MAtEsB,kBAsEfiD,SAtEe,EAsEJzE,KAtEI,EAsEG;AACvB,QAAM4e,SAAS,GAAGnc,IAAI,CAACyK,KAAL,CAAWlN,KAAK,IAAIpJ,GAAG,GAAG,IAAV,CAAL,GAAuB6N,SAAlC,CAAlB;;AAEA,QAAI,KAAKiB,IAAL,CAAU,CAAV,KAAgB,CAApB,EAAuB;AACrB,WAAK+X,UAAL,CAAgB,CAAhB,EAAmBmB,SAAnB;AACD,KAFD,MAEO;AACL,WAAKnB,UAAL,CAAgB,CAAhB,EAAmBmB,SAAnB;AACD;;AACD,SAAK5b,IAAL;AACD,GA/EqB;;AAiFtB;;;AAGA4F,EAAAA,KApFsB,mBAoFd;AACN,SAAKlD,IAAL,CAAU,CAAV,IAAe,CAAf;AACA,SAAKA,IAAL,CAAU,CAAV,IAAe,KAAKhQ,UAAL,CAAgB7B,KAA/B;AACD;AAvFqB,CAAxB,EA2FA;;AAEA;;;;;;;;;AAQA,SAASuN,OAAT,CAAiBlL,MAAjB,EAAyB8f,SAAzB,EAAoCtgB,UAApC,EAAgDmgB,cAAhD,EAAgE;AAC9D,OAAK3f,MAAL,GAAcA,MAAd;AACA,OAAKC,SAAL;AACI;AAAyC,OAAKD,MAAL,CAAY6K,UAAZ,CAAuB,IAAvB,CAD7C;AAEA,OAAKzL,MAAL,GAAc8L,OAAO,CAAC9L,MAAtB;AACA,OAAKI,UAAL,GAAkBA,UAAlB;AACA,OAAKmgB,cAAL,GAAsBA,cAAtB;AACA,OAAK9e,SAAL,GAAiB,EAAjB;AACA,OAAKgoB,eAAL,GAAuB,EAAvB;AACA,OAAKC,cAAL,GAAsB,CAAC,CAAD,EAAI,CAAJ,CAAtB;AACA,OAAKC,cAAL,GAAsB,KAAK3pB,MAAL,CAAY6E,eAAlC;AACA,OAAK6b,SAAL,GAAiBA,SAAjB;AACA,OAAKkJ,SAAL,GAAiB,IAAjB;AACA,OAAKnpB,iBAAL,GAAyB,KAAzB,CAb8D,CAe9D;;AACA,OAAKopB,MAAL,GAAc,EAAd;AACA,OAAKC,UAAL,GAAkB,KAAK9pB,MAAL,CAAY0E,cAA9B,CAjB8D,CAmB9D;;AACA,OAAKqlB,aAAL,GAAqB,EAArB;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,eAAL,GAAuB,KAAKjqB,MAAL,CAAY0E,cAAnC,CAtB8D,CAwB9D;;AACA,OAAKwlB,WAAL,GAAmB,IAAnB;AACA,OAAKC,YAAL,GAAoB,EAApB;AACA,OAAKxgB,IAAL;AACD;AAGD;;;;;;AAIAmC,OAAO,CAAC9L,MAAR,GAAiB;AACf0E,EAAAA,cAAc,EAAE,GADD;AAEf0lB,EAAAA,eAAe,EAAE,EAFF;AAGfvlB,EAAAA,eAAe,EAAE,EAHF;AAIfwlB,EAAAA,cAAc,EAAE,EAJD;AAKfjlB,EAAAA,UAAU,EAAE;AALG,CAAjB;AASA0G,OAAO,CAAC/D,SAAR,GAAoB;AAClB;;;AAGA4B,EAAAA,IAJkB,kBAIX;AACL0W,IAAAA,QAAQ,CAACiK,KAAT,GAAiBtvB,wDAA8BC,QAA9B,CAAuCmC,SAAxD,CADK,CAEL;AACA;AACA;AACA;;AACA,SAAKmtB,QAAL,GANK,CAOL;;AACA,SAAK,IAAIzW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1U,MAAM,CAACmB,gBAAP,CAAwBvB,KAAxB,CAA8BgJ,MAAlD,EAA0D8L,CAAC,EAA3D,EAA+D;AAC7D,WAAKqW,YAAL,CAAkBK,IAAlB,CACI,IAAI5B,WAAJ,CAAgB,KAAKhoB,MAArB,EAA6BxB,MAAM,CAACmB,gBAAP,CAAwBvB,KAAxB,CAA8B8U,CAA9B,CAA7B,CADJ;AAED;;AAED,SAAK8V,SAAL,GAAiB,IAAItC,SAAJ,CAAc,KAAK1mB,MAAnB,EAA2B,KAAK8f,SAAL,CAAe9kB,IAA1C,EACb,KAAKwE,UAAL,CAAgB7B,KADH,CAAjB;AAED,GAnBiB;;AAqBlB;;;AAGAoT,EAAAA,mBAAmB,EAAE,+BAAW;AAC9B,SAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuM,QAAQ,CAACiK,KAAT,CAAetiB,MAAnC,EAA2C8L,CAAC,EAA5C,EAAgD;AAC9C,UAAI1U,MAAM,CAACoC,QAAX,EAAqB;AACnB6e,QAAAA,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBrW,aAAlB,GAAkC4iB,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBrW,aAAlB,GAAkC,CAApE;AACA4iB,QAAAA,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBpW,MAAlB,IAA4B,GAA5B;AACA2iB,QAAAA,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBnW,QAAlB,GAA6B0iB,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBnW,QAAlB,GAA6B,CAA1D,CAHmB,CAKnB;;AACA,YAAI,QAAQ0iB,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBtW,IAA1B,KAAmC,QAAvC,EAAiD;AAC/C6iB,UAAAA,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBtW,IAAlB,GAAyB6iB,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBtW,IAAlB,CAAuB,CAAvB,CAAzB,CAD+C,CAE/C;AACA;AACA;;AACA6iB,UAAAA,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBjW,UAAlB,GAA+BwiB,QAAQ,CAACiK,KAAT,CAAexW,CAAf,EAAkBtW,IAAlB,CAAuB,CAAvB,CAA/B;AACD;AACF;AACF;AACF,GAzCiB;;AA2ClB;;;;AAIAuR,EAAAA,iBAAiB,EAAE,2BAAS2R,SAAT,EAAoB;AACrC;AACA,SAAKmJ,MAAL,GAAc,EAAd;AACA,SAAKE,aAAL,GAAqB,EAArB;AAEA,SAAKtpB,iBAAL,GAAyB,IAAzB;AACA,SAAKigB,SAAL,GAAiBA,SAAjB;AAEAL,IAAAA,QAAQ,CAACiK,KAAT,GAAiBlrB,MAAM,CAACmB,gBAAP,CAAwBnD,SAAzC;AACA,SAAKuU,mBAAL;AAEA0O,IAAAA,QAAQ,CAAChkB,mBAAT,GAA+B+C,MAAM,CAACmB,gBAAP,CAAwBlE,mBAAvD;AACAgkB,IAAAA,QAAQ,CAAC/jB,mBAAT,GAA+B8C,MAAM,CAACmB,gBAAP,CAAwBjE,mBAAvD;AAEAwqB,IAAAA,YAAY,CAAC9mB,MAAb,GAAsBZ,MAAM,CAACmB,gBAAP,CAAwB7B,oBAA9C;AAEA,SAAKyrB,YAAL,GAAoB,EAApB;;AACA,SAAK,IAAIrW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1U,MAAM,CAACmB,gBAAP,CAAwBvB,KAAxB,CAA8BgJ,MAAlD,EAA0D8L,CAAC,EAA3D,EAA+D;AAC7D,WAAKqW,YAAL,CAAkBK,IAAlB,CACI,IAAI5B,WAAJ,CAAgB,KAAKhoB,MAArB,EAA6BxB,MAAM,CAACmB,gBAAP,CAAwBvB,KAAxB,CAA8B8U,CAA9B,CAA7B,CADJ;AAED;;AACD,SAAKR,KAAL;AACD,GArEiB;;AAuElB;;;;;;;;AAQApH,EAAAA,MA/EkB,kBA+EXiD,SA/EW,EA+EA5N,YA/EA,EA+EckpB,eA/Ed,EA+E+B/a,aA/E/B,EA+E8C;AAC9D;AACA,SAAKtO,WAAL,IAAoB+N,SAApB;;AAEA,QAAI,KAAK1O,iBAAT,EAA4B;AAC1B,WAAKiqB,mBAAL,CAAyBvb,SAAzB,EAAoC5N,YAApC;AACD;;AAED,SAAK,IAAIuS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKqW,YAAL,CAAkBniB,MAAtC,EAA8C8L,CAAC,EAA/C,EAAmD;AACjD,WAAKqW,YAAL,CAAkBrW,CAAlB,EAAqB5H,MAArB,CAA4BiD,SAA5B,EAAuC5N,YAAvC;AACD;;AAED,QAAI,CAAC,KAAKd,iBAAN,IAA2BrB,MAAM,CAACmB,gBAAP,CAAwBhE,UAAvD,EAAmE;AACjE,WAAKqtB,SAAL,CAAe1d,MAAf,CAAsBwD,aAAtB;AACA,WAAKib,YAAL,CAAkBxb,SAAlB,EAA6B5N,YAA7B;AACD;;AAED,QAAIkpB,eAAJ,EAAqB;AACnB,WAAKA,eAAL,CAAqBtb,SAArB,EAAgC5N,YAAhC;AACD;AACF,GAnGiB;;AAqGlB;;;;;;;;AAQAqpB,EAAAA,kBA7GkB,8BA6GCC,OA7GD,EA6GUC,SA7GV,EA6GqBC,OA7GrB,EA6G8BC,eA7G9B,EA6G+CxS,SA7G/C,EA6G0D;AAC1E,QAAMyS,WAAW,GAAGH,SAAS,CAAC9iB,MAA9B;;AAEA,QAAIijB,WAAJ,EAAiB;AACf,WAAK,IAAInX,CAAC,GAAGmX,WAAW,GAAG,CAA3B,EAA8BnX,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzCgX,QAAAA,SAAS,CAAChX,CAAD,CAAT,CAAa5H,MAAb,CAAoB2e,OAApB;AACD;;AAED,UAAMb,MAAM,GAAGc,SAAS,CAACG,WAAW,GAAG,CAAf,CAAxB,CALe,CAOf;;AACA,UAAIA,WAAW,GAAGF,OAAd,IACC,KAAK3qB,UAAL,CAAgB7B,KAAhB,GAAwByrB,MAAM,CAAC5Z,IAAhC,GAAwC4Z,MAAM,CAACrJ,GAD/C,IAEAnI,SAAS,GAAGrL,IAAI,CAACiN,MAAL,EAFhB,EAE+B;AAC7B4Q,QAAAA,eAAe;AAChB;AACF,KAbD,MAaO;AACLA,MAAAA,eAAe;AAChB;AACF,GAhIiB;;AAkIlB;;;;;AAKAL,EAAAA,YAvIkB,wBAuILxb,SAvIK,EAuIMzE,KAvIN,EAuIa;AAC7B,QAAMmgB,OAAO,GAAG,KAAKf,UAAL,GAAkB,IAAlB,GAAyB3a,SAAzB,GAAqCzE,KAArD;AACA,SAAKkgB,kBAAL,CACIC,OADJ,EACa,KAAKhB,MADlB,EAC0B,KAAK7pB,MAAL,CAAYoF,UADtC,EACkD,KAAKmlB,QAAL,CAAcpnB,IAAd,CAAmB,IAAnB,CADlD,EAEI,KAAKwmB,cAFT,EAF6B,CAM7B;;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYqB,MAAZ,CAAmB,UAACC,GAAD;AAAA,aAAS,CAACA,GAAG,CAACpV,MAAd;AAAA,KAAnB,CAAd;AACD,GA/IiB;;AAiJlB;;;;;AAKA2U,EAAAA,mBAtJkB,+BAsJEvb,SAtJF,EAsJazE,KAtJb,EAsJoB;AACpC,SAAKkgB,kBAAL,CACIzb,SADJ,EACe,KAAK4a,aADpB,EACmCjD,YAAY,CAAC9mB,MAAb,CAAoBrB,UADvD,EAEI,KAAKysB,eAAL,CAAqBjoB,IAArB,CAA0B,IAA1B,CAFJ,EAEqC,KAAKwmB,cAF1C,EADoC,CAKpC;;AACA,SAAKI,aAAL,GAAqB,KAAKA,aAAL,CAAmBmB,MAAnB,CAA0B,UAACC,GAAD;AAAA,aAAS,CAACA,GAAG,CAACpV,MAAd;AAAA,KAA1B,CAArB;AACD,GA7JiB;;AA+JlB;;;;;AAKA0U,EAAAA,eApKkB,2BAoKFtb,SApKE,EAoKS5N,YApKT,EAoKuB;AACvC;AACA,QAAG,KAAKE,SAAL,CAAeuG,MAAf,GAAwB,CAA3B,EAA8B;AAC9B,WAAKvG,SAAL,CAAe,CAAf,EAAkBqO,UAAlB,CAA6BM,IAA7B,GAAoC,GAApC;AACA,WAAK3O,SAAL,CAAe,CAAf,EAAkBqO,UAAlB,CAA6BtS,IAA7B,GAAoC,EAApC;AAAwC;;AACxC,QAAM6tB,gBAAgB,GAAG,KAAK5pB,SAAL,CAAe6pB,KAAf,CAAqB,CAArB,CAAzB;;AAEA,SAAK,IAAIxX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKrS,SAAL,CAAeuG,MAAnC,EAA2C8L,CAAC,EAA5C,EAAgD;AAC9C,UAAMiL,QAAQ,GAAG,KAAKtd,SAAL,CAAeqS,CAAf,CAAjB;AACAiL,MAAAA,QAAQ,CAAC7S,MAAT,CAAgBiD,SAAhB,EAA2B5N,YAA3B,EAF8C,CAI9C;;AACA,UAAIwd,QAAQ,CAAChJ,MAAb,EAAqB;AACnBsV,QAAAA,gBAAgB,CAACE,KAAjB;AACD;AACF;;AACD,SAAK9pB,SAAL,GAAiB4pB,gBAAjB;;AAEA,QAAI,KAAK5pB,SAAL,CAAeuG,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,UAAMwjB,YAAY,GAAG,KAAK/pB,SAAL,CAAe,KAAKA,SAAL,CAAeuG,MAAf,GAAwB,CAAvC,CAArB;;AAEA,UAAIwjB,YAAY,IAAI,CAACA,YAAY,CAACC,wBAA9B,IACAD,YAAY,CAACnK,SAAb,EADA,IAECmK,YAAY,CAACpb,IAAb,GAAoBob,YAAY,CAACluB,KAAjC,GAAyCkuB,YAAY,CAAC7K,GAAvD,GACA,KAAKvgB,UAAL,CAAgB7B,KAHpB,EAG2B;AACzB,aAAKmtB,cAAL,CAAoBnqB,YAApB;AACAiqB,QAAAA,YAAY,CAACC,wBAAb,GAAwC,IAAxC;AACD;AACF,KAVD,MAUO;AACL;AACA,WAAKC,cAAL,CAAoBnqB,YAApB;AACD;AACF,GApMiB;AAsMlB8O,EAAAA,mBAtMkB,iCAsMI;AACpB,SAAK5O,SAAL,CAAe8pB,KAAf;AACD,GAxMiB;;AA0MlB;;;;AAIAG,EAAAA,cA9MkB,0BA8MHnqB,YA9MG,EA8MW;AAC3B,QAAMoqB,aAAa,GACfvsB,MAAM,CAAC0D,oBAAP,MAAiC,CAAC,KAAKrC,iBAAvC,IACI,KAAKA,iBADT,GAEA4f,QAAQ,CAACiK,KAAT,CAAetiB,MAAf,GAAwB,CAFxB,GAGAqY,QAAQ,CAACiK,KAAT,CAAetiB,MAAf,GAAwB,CAJ5B;AAKA,QAAM4jB,iBAAiB,GACnBD,aAAa,GAAG,CAAhB,GAAoBxR,YAAY,CAAC,CAAD,EAAIwR,aAAJ,CAAhC,GAAqD,CADzD;AAEA,QAAME,YAAY,GAAGxL,QAAQ,CAACiK,KAAT,CAAesB,iBAAf,CAArB,CAR2B,CAU3B;AACA;;AACA,QAAKD,aAAa,GAAG,CAAhB,IAAqB,KAAKG,sBAAL,CAA4BD,YAAY,CAACxuB,IAAzC,CAAtB,IACAkE,YAAY,GAAGsqB,YAAY,CAACluB,QADhC,EAC0C;AACxC,WAAK+tB,cAAL,CAAoBnqB,YAApB;AACD,KAHD,MAGO;AACL,UAAMwqB,iBAAiB,GAAG,KAAKrL,SAAL,CAAemL,YAAY,CAACxuB,IAA5B,CAA1B;AAEA,WAAKoE,SAAL,CAAe+oB,IAAf,CAAoB,IAAInK,QAAJ,CAChB,KAAKxf,SADW,EACAgrB,YADA,EACcE,iBADd,EACiC,KAAK3rB,UADtC,EAEhB,KAAKmgB,cAFW,EAEKhf,YAFL,EAEmBsqB,YAAY,CAACvuB,KAFhC,EAGhB,KAAKmD,iBAHW,CAApB;AAKA,WAAKgpB,eAAL,CAAqBuC,OAArB,CAA6BH,YAAY,CAACxuB,IAA1C;;AAEA,UAAI,KAAKosB,eAAL,CAAqBzhB,MAArB,GAA8B,CAAlC,EAAqC;AACnC,aAAKyhB,eAAL,CAAqBwC,MAArB,CAA4B7sB,MAAM,CAACY,MAAP,CAAcqF,wBAA1C;AACD;AACF;AACF,GA3OiB;;AA6OlB;;;;;AAKAymB,EAAAA,sBAlPkB,kCAkPKI,gBAlPL,EAkPuB;AACvC,QAAIC,cAAc,GAAG,CAArB;;AAEA,SAAK,IAAIrY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK2V,eAAL,CAAqBzhB,MAAzC,EAAiD8L,CAAC,EAAlD,EAAsD;AACpDqY,MAAAA,cAAc,GACV,KAAK1C,eAAL,CAAqB3V,CAArB,MAA4BoY,gBAA5B,GAA+CC,cAAc,GAAG,CAAhE,GAAoE,CADxE;AAED;;AACD,WAAOA,cAAc,IAAI/sB,MAAM,CAACY,MAAP,CAAcqF,wBAAvC;AACD,GA1PiB;;AA4PlB;;;;AAIAiO,EAAAA,KAhQkB,mBAgQV;AACN,SAAK7R,SAAL,GAAiB,EAAjB;;AACA,SAAK,IAAI2qB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjC,YAAL,CAAkBniB,MAAtC,EAA8CokB,CAAC,EAA/C,EAAmD;AACjD,WAAKjC,YAAL,CAAkBiC,CAAlB,EAAqB9Y,KAArB;AACD;;AAED,SAAKsW,SAAL,CAAetW,KAAf;AACD,GAvQiB;;AAyQlB;;;;;AAKA+Y,EAAAA,MA9QkB,kBA8QX/uB,KA9QW,EA8QJC,MA9QI,EA8QI;AACpB,SAAKqD,MAAL,CAAYtD,KAAZ,GAAoBA,KAApB;AACA,SAAKsD,MAAL,CAAYrD,MAAZ,GAAqBA,MAArB;AACD,GAjRiB;;AAmRlB;;;AAGAgtB,EAAAA,QAtRkB,sBAsRP;AACT,SAAKV,MAAL,CAAYW,IAAZ,CAAiB,IAAI7D,KAAJ,CAAU,KAAK/lB,MAAf,EAAuB,KAAK8f,SAAL,CAAehlB,KAAtC,EACb,KAAK0E,UAAL,CAAgB7B,KADH,CAAjB;AAED,GAzRiB;;AA2RlB;;;AAGA6sB,EAAAA,eA9RkB,6BA8RA;AAChB,QAAMkB,iBAAiB,GACnBrsB,MAAM,CAACssB,IAAP,CAAYntB,MAAM,CAACmB,gBAAP,CAAwBpF,aAApC,CADJ;;AAGA,QAAImxB,iBAAiB,CAACtkB,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,UAAIuC,KAAK,GAAG4P,YAAY,CAAC,CAAD,EAAImS,iBAAiB,CAACtkB,MAAlB,GAA2B,CAA/B,CAAxB;AACA,UAAI3K,IAAI,GAAGivB,iBAAiB,CAAC/hB,KAAD,CAA5B,CAFgC,CAIhC;;AACA,aAAOlN,IAAI,IAAI,KAAK2sB,MAAb,IAAuBsC,iBAAiB,CAACtkB,MAAlB,GAA2B,CAAzD,EAA4D;AAC1DuC,QAAAA,KAAK,GAAG4P,YAAY,CAAC,CAAD,EAAImS,iBAAiB,CAACtkB,MAAlB,GAA2B,CAA/B,CAApB;AACA3K,QAAAA,IAAI,GAAGivB,iBAAiB,CAAC/hB,KAAD,CAAxB;AACD;;AAED,WAAKyf,MAAL,GAAc3sB,IAAd;AACA,WAAK0sB,aAAL,CAAmBS,IAAnB,CAAwB,IAAI1D,YAAJ,CACpB,KAAKlmB,MADe,EACP,KAAK8f,SAAL,CAAevlB,aADR,EACuB,KAAKiF,UAAL,CAAgB7B,KADvC,EAEpBlB,IAFoB,CAAxB;AAGD;AACF;AAjTiB,CAApB","file":"offline.9b55da16.js","sourceRoot":"../src","sourcesContent":["// Copyright (c) 2021 The Chromium Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport {CollisionBox} from \"./offline\";\r\n\r\n/* @const\r\n * Add matching sprite definition and config to Runner.spriteDefinitionByType.\r\n */\r\nconst GAME_TYPE = [];\r\n\r\n/**\r\n * Obstacle definitions.\r\n * minGap: minimum pixel space between obstacles.\r\n * multipleSpeed: Speed at which multiples are allowed.\r\n * speedOffset: speed faster / slower than the horizon.\r\n * minSpeed: Minimum speed which the obstacle can make an appearance.\r\n *\r\n * @typedef {{\r\n *   type: string,\r\n *   width: number,\r\n *   height: number,\r\n *   yPos: number,\r\n *   multipleSpeed: number,\r\n *   minGap: number,\r\n *   minSpeed: number,\r\n *   collisionBoxes: Array<CollisionBox>,\r\n * }}\r\n */\r\nlet ObstacleType;\r\n\r\n/**\r\n * T-Rex runner sprite definitions.\r\n */\r\nexport const Runner_spriteDefinitionByType = {\r\n  original: {\r\n    LDPI: {\r\n      BACKGROUND_EL: {x: 86, y: 2},\r\n      CACTUS_LARGE: {x: 332, y: 2},\r\n      CACTUS_SMALL: {x: 228, y: 2},\r\n      OBSTACLE_2: {x: 332, y: 2},\r\n      OBSTACLE: {x: 228, y: 2},\r\n      CLOUD: {x: 86, y: 2},\r\n      HORIZON: {x: 2, y: 54},\r\n      MOON: {x: 484, y: 2},\r\n      PTERODACTYL: {x: 134, y: 2},\r\n      RESTART: {x: 2, y: 68},\r\n      TEXT_SPRITE: {x: 655, y: 2},\r\n      TREX: {x: 848, y: 2},\r\n      STAR: {x: 645, y: 2},\r\n      COLLECTABLE: {x: 2, y: 2},\r\n      ALT_GAME_END: {x: 121, y: 2}\r\n    },\r\n    HDPI: {\r\n      BACKGROUND_EL: {x: 166, y: 2},\r\n      CACTUS_LARGE: {x: 652, y: 2},\r\n      CACTUS_SMALL: {x: 446, y: 2},\r\n      OBSTACLE_2: {x: 652, y: 2},\r\n      OBSTACLE: {x: 446, y: 2},\r\n      CLOUD: {x: 166, y: 2},\r\n      HORIZON: {x: 2, y: 104},\r\n      MOON: {x: 954, y: 2},\r\n      PTERODACTYL: {x: 260, y: 2},\r\n      RESTART: {x: 2, y: 130},\r\n      TEXT_SPRITE: {x: 1294, y: 2},\r\n      TREX: {x: 1678, y: 2},\r\n      STAR: {x: 1276, y: 2},\r\n      COLLECTABLE: {x: 4, y: 4},\r\n      ALT_GAME_END: {x: 242, y: 4}\r\n    },\r\n    MAX_GAP_COEFFICIENT: 1.5,\r\n    MAX_OBSTACLE_LENGTH: 3,\r\n    HAS_CLOUDS: 1,\r\n    BOTTOM_PAD: 10,\r\n    TREX: {\r\n      WAITING_1: {x: 44, w: 44, h: 47, xOffset: 0},\r\n      WAITING_2: {x: 0, w: 44, h: 47, xOffset: 0},\r\n      RUNNING_1: {x: 88, w: 44, h: 47, xOffset: 0},\r\n      RUNNING_2: {x: 132, w: 44, h: 47, xOffset: 0},\r\n      JUMPING: {x: 0, w: 44, h: 47, xOffset: 0},\r\n      CRASHED: {x: 220, w: 44, h: 47, xOffset: 0},\r\n      COLLISION_BOXES: [\r\n        new CollisionBox(22, 0, 17, 16), new CollisionBox(1, 18, 30, 9),\r\n        new CollisionBox(10, 35, 14, 8), new CollisionBox(1, 24, 29, 5),\r\n        new CollisionBox(5, 30, 21, 4), new CollisionBox(9, 34, 15, 4)\r\n      ]\r\n    },\r\n    /** @type {Array<ObstacleType>} */\r\n    OBSTACLES: [\r\n      {\r\n        type: 'CACTUS_SMALL',\r\n        width: 17,\r\n        height: 35,\r\n        yPos: 105,\r\n        multipleSpeed: 4,\r\n        minGap: 120,\r\n        minSpeed: 0,\r\n        collisionBoxes: [\r\n          new CollisionBox(0, 7, 5, 27), new CollisionBox(4, 0, 6, 34),\r\n          new CollisionBox(10, 4, 7, 14)\r\n        ]\r\n      },\r\n      {\r\n        type: 'CACTUS_LARGE',\r\n        width: 25,\r\n        height: 50,\r\n        yPos: 90,\r\n        multipleSpeed: 7,\r\n        minGap: 120,\r\n        minSpeed: 0,\r\n        collisionBoxes: [\r\n          new CollisionBox(0, 12, 7, 38), new CollisionBox(8, 0, 7, 49),\r\n          new CollisionBox(13, 10, 10, 38)\r\n        ]\r\n      },\r\n      {\r\n        type: 'PTERODACTYL',\r\n        width: 46,\r\n        height: 40,\r\n        yPos: [100, 75, 50],    // Variable height.\r\n        yPosMobile: [100, 50],  // Variable height mobile.\r\n        multipleSpeed: 999,\r\n        minSpeed: 8.5,\r\n        minGap: 150,\r\n        collisionBoxes: [\r\n          new CollisionBox(15, 15, 16, 5), new CollisionBox(18, 21, 24, 6),\r\n          new CollisionBox(2, 14, 4, 3), new CollisionBox(6, 10, 4, 7),\r\n          new CollisionBox(10, 8, 6, 9)\r\n        ],\r\n        numFrames: 2,\r\n        frameRate: 1000 / 6,\r\n        speedOffset: .8\r\n      }\r\n    ],\r\n    BACKGROUND_EL: {\r\n      'CLOUD': {\r\n        HEIGHT: 14,\r\n        MAX_CLOUD_GAP: 400,\r\n        MAX_SKY_LEVEL: 30,\r\n        MIN_CLOUD_GAP: 100,\r\n        MIN_SKY_LEVEL: 71,\r\n        OFFSET: 4,\r\n        WIDTH: 46,\r\n        X_POS: 1,\r\n        Y_POS: 120\r\n      }\r\n    },\r\n    BACKGROUND_EL_CONFIG: {\r\n      MAX_BG_ELS: 1,\r\n      MAX_GAP: 400,\r\n      MIN_GAP: 100,\r\n      POS: 0,\r\n      SPEED: 0.5,\r\n      Y_POS: 125\r\n    },\r\n    LINES: [\r\n      {SOURCE_X: 2, SOURCE_Y: 52, WIDTH: 600, HEIGHT: 12, YPOS: 127},\r\n    ]\r\n  }\r\n};","// Copyright (c) 2014 The Chromium Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport {Runner_spriteDefinitionByType} from \"./offline-sprite-definitions\";\r\n\r\n/**\r\n * T-Rex runner.\r\n * @param {string} outerContainerId Outer containing element id.\r\n * @param {!Object=} opt_config\r\n * @constructor\r\n * @implements {EventListener}\r\n * @export\r\n */\r\n export function Runner(outerContainerId, opt_config) {\r\n    // Singleton\r\n    console.log(\"??\");\r\n    if (Runner.instance_) {\r\n      return Runner.instance_;\r\n    }\r\n    Runner.instance_ = this;\r\n  \r\n    this.outerContainerEl = document.querySelector(outerContainerId);\r\n    this.containerEl = null;\r\n    this.snackbarEl = null;\r\n    // A div to intercept touch events. Only set while (playing && useTouch).\r\n    this.touchController = null;\r\n  \r\n    this.config = opt_config || Object.assign(Runner.config, Runner.normalConfig);\r\n    // Logical dimensions of the container.\r\n    this.dimensions = Runner.defaultDimensions;\r\n  \r\n    this.gameType = null;\r\n    Runner.spriteDefinition = Runner_spriteDefinitionByType['original'];\r\n  \r\n    this.altGameImageSprite = null;\r\n    this.altGameModeActive = false;\r\n    this.altGameModeFlashTimer = null;\r\n    this.fadeInTimer = 0;\r\n  \r\n    this.canvas = null;\r\n    this.canvasCtx = null;\r\n  \r\n    this.tRex = null;\r\n  \r\n    this.distanceMeter = null;\r\n    this.distanceRan = 0;\r\n  \r\n    this.highestScore = 0;\r\n    this.syncHighestScore = false;\r\n  \r\n    this.time = 0;\r\n    this.runningTime = 0;\r\n    this.msPerFrame = 1000 / FPS;\r\n    this.currentSpeed = this.config.SPEED;\r\n    Runner.slowDown = false;\r\n  \r\n    this.obstacles = [];\r\n  \r\n    this.activated = false; // Whether the easter egg has been activated.\r\n    this.playing = false; // Whether the game is currently in play state.\r\n    this.crashed = false;\r\n    this.paused = false;\r\n    this.inverted = false;\r\n    this.invertTimer = 0;\r\n    this.resizeTimerId_ = null;\r\n  \r\n    this.playCount = 0;\r\n  \r\n    // Sound FX.\r\n    this.audioBuffer = null;\r\n  \r\n    /** @type {Object} */\r\n    this.soundFx = {};\r\n    this.generatedSoundFx = null;\r\n  \r\n    // Global web audio context for playing sounds.\r\n    this.audioContext = null;\r\n  \r\n    // Images.\r\n    this.images = {};\r\n    this.imagesLoaded = 0;\r\n  \r\n    // Gamepad state.\r\n    this.pollingGamepads = false;\r\n    this.gamepadIndex = undefined;\r\n    this.previousGamepad = null;\r\n  \r\n    if (this.isDisabled()) {\r\n      this.setupDisabledRunner();\r\n    } else {\r\n      if (Runner.isAltGameModeEnabled()) {\r\n        this.initAltGameType();\r\n        Runner.gameType = this.gameType;\r\n      }\r\n      this.loadImages();\r\n  \r\n      window['initializeEasterEggHighScore'] =\r\n          this.initializeHighScore.bind(this);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Default game width.\r\n   * @const\r\n   */\r\n  const DEFAULT_WIDTH = 600;\r\n  \r\n  /**\r\n   * Frames per second.\r\n   * @const\r\n   */\r\n  const FPS = 60;\r\n  \r\n  /** @const */\r\n  const IS_HIDPI = window.devicePixelRatio > 1;\r\n  \r\n  /** @const */\r\n  const IS_IOS = /CriOS/.test(window.navigator.userAgent);\r\n  \r\n  /** @const */\r\n  const IS_MOBILE = /Android/.test(window.navigator.userAgent) || IS_IOS;\r\n  \r\n  /** @const */\r\n  const IS_RTL = document.querySelector('html').dir == 'rtl';\r\n  \r\n  /** @const */\r\n  const ARCADE_MODE_URL = 'chrome://dino/';\r\n  \r\n  /** @const */\r\n  const RESOURCE_POSTFIX = 'offline-resources-';\r\n  \r\n  /** @const */\r\n  const A11Y_STRINGS = {\r\n    ariaLabel: 'dinoGameA11yAriaLabel',\r\n    description: 'dinoGameA11yDescription',\r\n    gameOver: 'dinoGameA11yGameOver',\r\n    highScore: 'dinoGameA11yHighScore',\r\n    jump: 'dinoGameA11yJump',\r\n    started: 'dinoGameA11yStartGame',\r\n    speedLabel: 'dinoGameA11ySpeedToggle'\r\n  };\r\n  \r\n  /**\r\n   * Default game configuration.\r\n   * Shared config for all  versions of the game. Additional parameters are\r\n   * defined in Runner.normalConfig and Runner.slowConfig.\r\n   */\r\n  Runner.config = {\r\n    AUDIOCUE_PROXIMITY_THRESHOLD: 190,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 250,\r\n    BG_CLOUD_SPEED: 0.2,\r\n    BOTTOM_PAD: 10,\r\n    // Scroll Y threshold at which the game can be activated.\r\n    CANVAS_IN_VIEW_OFFSET: -10,\r\n    CLEAR_TIME: 3000,\r\n    CLOUD_FREQUENCY: 0.5,\r\n    FADE_DURATION: 1,\r\n    FLASH_DURATION: 1000,\r\n    GAMEOVER_CLEAR_TIME: 1200,\r\n    INITIAL_JUMP_VELOCITY: 12,\r\n    INVERT_FADE_DURATION: 12000,\r\n    MAX_BLINK_COUNT: 3,\r\n    MAX_CLOUDS: 6,\r\n    MAX_OBSTACLE_LENGTH: 3,\r\n    MAX_OBSTACLE_DUPLICATION: 2,\r\n    RESOURCE_TEMPLATE_ID: 'audio-resources',\r\n    SPEED: 6,\r\n    SPEED_DROP_COEFFICIENT: 3,\r\n    ARCADE_MODE_INITIAL_TOP_POSITION: 35,\r\n    ARCADE_MODE_TOP_POSITION_PERCENT: 0.1\r\n  };\r\n  \r\n  Runner.normalConfig = {\r\n    ACCELERATION: 0.001,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD: 190,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 250,\r\n    GAP_COEFFICIENT: 0.6,\r\n    INVERT_DISTANCE: 700,\r\n    MAX_SPEED: 13,\r\n    MOBILE_SPEED_COEFFICIENT: 1.2,\r\n    SPEED: 6\r\n  };\r\n  \r\n  \r\n  Runner.slowConfig = {\r\n    ACCELERATION: 0.0005,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD: 170,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 220,\r\n    GAP_COEFFICIENT: 0.3,\r\n    INVERT_DISTANCE: 350,\r\n    MAX_SPEED: 9,\r\n    MOBILE_SPEED_COEFFICIENT: 1.5,\r\n    SPEED: 4.2\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Default dimensions.\r\n   */\r\n  Runner.defaultDimensions = {\r\n    WIDTH: DEFAULT_WIDTH,\r\n    HEIGHT: 150\r\n  };\r\n  \r\n  \r\n  /**\r\n   * CSS class names.\r\n   * @enum {string}\r\n   */\r\n  Runner.classes = {\r\n    ARCADE_MODE: 'arcade-mode',\r\n    CANVAS: 'runner-canvas',\r\n    CONTAINER: 'runner-container',\r\n    CRASHED: 'crashed',\r\n    ICON: 'icon-offline',\r\n    INVERTED: 'inverted',\r\n    SNACKBAR: 'snackbar',\r\n    SNACKBAR_SHOW: 'snackbar-show',\r\n    TOUCH_CONTROLLER: 'controller'\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Sound FX. Reference to the ID of the audio tag on interstitial page.\r\n   * @enum {string}\r\n   */\r\n  Runner.sounds = {\r\n    BUTTON_PRESS: 'offline-sound-press',\r\n    HIT: 'offline-sound-hit',\r\n    SCORE: 'offline-sound-reached'\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Key code mapping.\r\n   * @enum {Object}\r\n   */\r\n  Runner.keycodes = {\r\n    JUMP: {'38': 1, '32': 1},  // Up, spacebar\r\n    DUCK: {'40': 1},  // Down\r\n    RESTART: {'13': 1}  // Enter\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Runner event names.\r\n   * @enum {string}\r\n   */\r\n  Runner.events = {\r\n    ANIM_END: 'webkitAnimationEnd',\r\n    CLICK: 'click',\r\n    KEYDOWN: 'keydown',\r\n    KEYUP: 'keyup',\r\n    POINTERDOWN: 'pointerdown',\r\n    POINTERUP: 'pointerup',\r\n    RESIZE: 'resize',\r\n    TOUCHEND: 'touchend',\r\n    TOUCHSTART: 'touchstart',\r\n    VISIBILITY: 'visibilitychange',\r\n    BLUR: 'blur',\r\n    FOCUS: 'focus',\r\n    LOAD: 'load',\r\n    GAMEPADCONNECTED: 'gamepadconnected',\r\n  };\r\n  \r\n  Runner.prototype = {\r\n    /**\r\n     * Initialize alternative game type.\r\n     */\r\n    initAltGameType() {\r\n      if (GAME_TYPE.length > 0) {\r\n        // this.gameType = loadTimeData && loadTimeData.valueExists('altGameType') ?\r\n        //     GAME_TYPE[parseInt(loadTimeData.getValue('altGameType'), 10) - 1] :\r\n        //     '';\r\n        this.gameType = '';\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Whether the easter egg has been disabled. CrOS enterprise enrolled devices.\r\n     * @return {boolean}\r\n     */\r\n    isDisabled() {\r\n      // return loadTimeData && loadTimeData.valueExists('disabledEasterEgg');\r\n      return false;\r\n    },\r\n  \r\n    /**\r\n     * For disabled instances, set up a snackbar with the disabled message.\r\n     */\r\n    setupDisabledRunner() {\r\n      this.containerEl = document.createElement('div');\r\n      this.containerEl.className = Runner.classes.SNACKBAR;\r\n      // this.containerEl.textContent = loadTimeData.getValue('disabledEasterEgg');\r\n      this.outerContainerEl.appendChild(this.containerEl);\r\n  \r\n      // Show notification when the activation key is pressed.\r\n      document.addEventListener(Runner.events.KEYDOWN, function(e) {\r\n        if (Runner.keycodes.JUMP[e.keyCode]) {\r\n          this.containerEl.classList.add(Runner.classes.SNACKBAR_SHOW);\r\n          document.querySelector('.icon').classList.add('icon-disabled');\r\n        }\r\n      }.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Setting individual settings for debugging.\r\n     * @param {string} setting\r\n     * @param {number|string} value\r\n     */\r\n    updateConfigSetting(setting, value) {\r\n      if (setting in this.config && value !== undefined) {\r\n        this.config[setting] = value;\r\n  \r\n        switch (setting) {\r\n          case 'GRAVITY':\r\n          case 'MIN_JUMP_HEIGHT':\r\n          case 'SPEED_DROP_COEFFICIENT':\r\n            this.tRex.config[setting] = value;\r\n            break;\r\n          case 'INITIAL_JUMP_VELOCITY':\r\n            this.tRex.setJumpVelocity(value);\r\n            break;\r\n          case 'SPEED':\r\n            this.setSpeed(/** @type {number} */ (value));\r\n            break;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Creates an on page image element from the base 64 encoded string source.\r\n     * @param {string} resourceName Name in data object,\r\n     * @return {HTMLImageElement} The created element.\r\n     */\r\n    createImageElement(resourceName) {\r\n      // const imgSrc = loadTimeData && loadTimeData.valueExists(resourceName) ?\r\n      //     loadTimeData.getString(resourceName) :\r\n      //     null;\r\n      const imgSrc = null;\r\n  \r\n      if (imgSrc) {\r\n        const el =\r\n            /** @type {HTMLImageElement} */ (document.createElement('img'));\r\n        el.id = resourceName;\r\n        el.src = imgSrc;\r\n        document.getElementById('offline-resources').appendChild(el);\r\n        return el;\r\n      }\r\n      return null;\r\n    },\r\n  \r\n    /**\r\n     * Cache the appropriate image sprite from the page and get the sprite sheet\r\n     * definition.\r\n     */\r\n    loadImages() {\r\n      let scale = '1x';\r\n      this.spriteDef = Runner.spriteDefinition.LDPI;\r\n      if (IS_HIDPI) {\r\n        scale = '2x';\r\n        this.spriteDef = Runner.spriteDefinition.HDPI;\r\n      }\r\n  \r\n      Runner.imageSprite = /** @type {HTMLImageElement} */\r\n          (document.getElementById(RESOURCE_POSTFIX + scale));\r\n  \r\n      if (this.gameType) {\r\n        Runner.altGameImageSprite = /** @type {HTMLImageElement} */\r\n            (this.createImageElement('altGameSpecificImage' + scale));\r\n        Runner.altCommonImageSprite = /** @type {HTMLImageElement} */\r\n            (this.createImageElement('altGameCommonImage' + scale));\r\n      }\r\n      Runner.origImageSprite = Runner.imageSprite;\r\n  \r\n      // Disable the alt game mode if the sprites can't be loaded.\r\n      if (!Runner.altGameImageSprite || !Runner.altCommonImageSprite) {\r\n        Runner.isAltGameModeEnabled = () => false;\r\n        this.altGameModeActive = false;\r\n      }\r\n  \r\n      if (Runner.imageSprite.complete) {\r\n        this.init();\r\n      } else {\r\n        // If the images are not yet loaded, add a listener.\r\n        Runner.imageSprite.addEventListener(Runner.events.LOAD,\r\n            this.init.bind(this));\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Load and decode base 64 encoded sounds.\r\n     */\r\n    loadSounds() {\r\n      if (!IS_IOS) {\r\n        this.audioContext = new AudioContext();\r\n  \r\n        const resourceTemplate =\r\n            document.getElementById(this.config.RESOURCE_TEMPLATE_ID).content;\r\n  \r\n        for (const sound in Runner.sounds) {\r\n          let soundSrc =\r\n              resourceTemplate.getElementById(Runner.sounds[sound]).src;\r\n          soundSrc = soundSrc.substr(soundSrc.indexOf(',') + 1);\r\n          const buffer = decodeBase64ToArrayBuffer(soundSrc);\r\n  \r\n          // Async, so no guarantee of order in array.\r\n          this.audioContext.decodeAudioData(buffer, function(index, audioData) {\r\n              this.soundFx[index] = audioData;\r\n            }.bind(this, sound));\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Sets the game speed. Adjust the speed accordingly if on a smaller screen.\r\n     * @param {number=} opt_speed\r\n     */\r\n    setSpeed(opt_speed) {\r\n      const speed = opt_speed || this.currentSpeed;\r\n  \r\n      // Reduce the speed on smaller mobile screens.\r\n      if (this.dimensions.WIDTH < DEFAULT_WIDTH) {\r\n        const mobileSpeed = Runner.slowDown ? speed :\r\n                                              speed * this.dimensions.WIDTH /\r\n                DEFAULT_WIDTH * this.config.MOBILE_SPEED_COEFFICIENT;\r\n        this.currentSpeed = mobileSpeed > speed ? speed : mobileSpeed;\r\n      } else if (opt_speed) {\r\n        this.currentSpeed = opt_speed;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Game initialiser.\r\n     */\r\n    init() {\r\n      // Hide the static icon.\r\n      document.querySelector('.' + Runner.classes.ICON).style.visibility =\r\n          'hidden';\r\n  \r\n      this.adjustDimensions();\r\n      this.setSpeed();\r\n  \r\n      const ariaLabel = getA11yString(A11Y_STRINGS.ariaLabel);\r\n      this.containerEl = document.createElement('div');\r\n      this.containerEl.setAttribute('role', IS_MOBILE ? 'button' : 'application');\r\n      this.containerEl.setAttribute('tabindex', '0');\r\n      this.containerEl.setAttribute('title', ariaLabel);\r\n  \r\n      this.containerEl.className = Runner.classes.CONTAINER;\r\n  \r\n      // Player canvas container.\r\n      this.canvas = createCanvas(this.containerEl, this.dimensions.WIDTH,\r\n          this.dimensions.HEIGHT);\r\n  \r\n      // Live region for game status updates.\r\n      this.a11yStatusEl = document.createElement('span');\r\n      this.a11yStatusEl.className = 'offline-runner-live-region';\r\n      this.a11yStatusEl.setAttribute('aria-live', 'assertive');\r\n      this.a11yStatusEl.textContent = '';\r\n      Runner.a11yStatusEl = this.a11yStatusEl;\r\n  \r\n      // Add checkbox to slow down the game.\r\n      this.slowSpeedCheckboxLabel = document.createElement('label');\r\n      this.slowSpeedCheckboxLabel.className = 'slow-speed-option hidden';\r\n      this.slowSpeedCheckboxLabel.textContent =\r\n          getA11yString(A11Y_STRINGS.speedLabel);\r\n  \r\n      this.slowSpeedCheckbox = document.createElement('input');\r\n      this.slowSpeedCheckbox.setAttribute('type', 'checkbox');\r\n      this.slowSpeedCheckbox.setAttribute(\r\n          'title', getA11yString(A11Y_STRINGS.speedLabel));\r\n      this.slowSpeedCheckbox.setAttribute('tabindex', '0');\r\n      this.slowSpeedCheckbox.setAttribute('checked', 'checked');\r\n  \r\n      this.slowSpeedToggleEl = document.createElement('span');\r\n      this.slowSpeedToggleEl.className = 'slow-speed-toggle';\r\n  \r\n      this.slowSpeedCheckboxLabel.appendChild(this.slowSpeedCheckbox);\r\n      this.slowSpeedCheckboxLabel.appendChild(this.slowSpeedToggleEl);\r\n  \r\n      if (IS_IOS) {\r\n        this.outerContainerEl.appendChild(this.a11yStatusEl);\r\n      } else {\r\n        this.containerEl.appendChild(this.a11yStatusEl);\r\n      }\r\n  \r\n      announcePhrase(getA11yString(A11Y_STRINGS.description));\r\n  \r\n      this.generatedSoundFx = new GeneratedSoundFx();\r\n  \r\n      this.canvasCtx =\r\n          /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n      this.canvasCtx.fillStyle = '#f7f7f7';\r\n      this.canvasCtx.fill();\r\n      Runner.updateCanvasScaling(this.canvas);\r\n  \r\n      // Horizon contains clouds, obstacles and the ground.\r\n      this.horizon = new Horizon(this.canvas, this.spriteDef, this.dimensions,\r\n          this.config.GAP_COEFFICIENT);\r\n  \r\n      // Distance meter\r\n      this.distanceMeter = new DistanceMeter(this.canvas,\r\n            this.spriteDef.TEXT_SPRITE, this.dimensions.WIDTH);\r\n  \r\n      // Draw t-rex\r\n      this.tRex = new Trex(this.canvas, this.spriteDef.TREX);\r\n  \r\n      this.outerContainerEl.appendChild(this.containerEl);\r\n      this.outerContainerEl.appendChild(this.slowSpeedCheckboxLabel);\r\n  \r\n      this.startListening();\r\n      // console.log(this.currentFrame);\r\n      // console.log(this.typeConfig.numFrames);\r\n      // console.log(deltaTime);\r\n      this.update();\r\n  \r\n      window.addEventListener(Runner.events.RESIZE,\r\n          this.debounceResize.bind(this));\r\n  \r\n      // Handle dark mode\r\n      const darkModeMediaQuery =\r\n          window.matchMedia('(prefers-color-scheme: dark)');\r\n      this.isDarkMode = darkModeMediaQuery && darkModeMediaQuery.matches;\r\n      darkModeMediaQuery.addListener((e) => {\r\n        this.isDarkMode = e.matches;\r\n      });\r\n    },\r\n  \r\n    /**\r\n     * Create the touch controller. A div that covers whole screen.\r\n     */\r\n    createTouchController() {\r\n      this.touchController = document.createElement('div');\r\n      this.touchController.className = Runner.classes.TOUCH_CONTROLLER;\r\n      this.touchController.addEventListener(Runner.events.TOUCHSTART, this);\r\n      this.touchController.addEventListener(Runner.events.TOUCHEND, this);\r\n      this.outerContainerEl.appendChild(this.touchController);\r\n    },\r\n  \r\n    /**\r\n     * Debounce the resize event.\r\n     */\r\n    debounceResize() {\r\n      if (!this.resizeTimerId_) {\r\n        this.resizeTimerId_ =\r\n            setInterval(this.adjustDimensions.bind(this), 250);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Adjust game space dimensions on resize.\r\n     */\r\n    adjustDimensions() {\r\n      clearInterval(this.resizeTimerId_);\r\n      this.resizeTimerId_ = null;\r\n  \r\n      const boxStyles = window.getComputedStyle(this.outerContainerEl);\r\n      const padding = Number(boxStyles.paddingLeft.substr(0,\r\n          boxStyles.paddingLeft.length - 2));\r\n  \r\n      this.dimensions.WIDTH = this.outerContainerEl.offsetWidth - padding * 2;\r\n      if (this.isArcadeMode()) {\r\n        this.dimensions.WIDTH = Math.min(DEFAULT_WIDTH, this.dimensions.WIDTH);\r\n        if (this.activated) {\r\n          this.setArcadeModeContainerScale();\r\n        }\r\n      }\r\n  \r\n      // Redraw the elements back onto the canvas.\r\n      if (this.canvas) {\r\n        this.canvas.width = this.dimensions.WIDTH;\r\n        this.canvas.height = this.dimensions.HEIGHT;\r\n  \r\n        Runner.updateCanvasScaling(this.canvas);\r\n  \r\n        this.distanceMeter.calcXPos(this.dimensions.WIDTH);\r\n        this.clearCanvas();\r\n        this.horizon.update(0, 0, true);\r\n        this.tRex.update(0);\r\n  \r\n        // Outer container and distance meter.\r\n        if (this.playing || this.crashed || this.paused) {\r\n          this.containerEl.style.width = this.dimensions.WIDTH + 'px';\r\n          this.containerEl.style.height = this.dimensions.HEIGHT + 'px';\r\n          this.distanceMeter.update(0, Math.ceil(this.distanceRan));\r\n          this.stop();\r\n        } else {\r\n          this.tRex.draw(0, 0);\r\n        }\r\n  \r\n        // Game over panel.\r\n        if (this.crashed && this.gameOverPanel) {\r\n          this.gameOverPanel.updateDimensions(this.dimensions.WIDTH);\r\n          this.gameOverPanel.draw(this.altGameModeActive, this.tRex);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Play the game intro.\r\n     * Canvas container width expands out to the full width.\r\n     */\r\n    playIntro() {\r\n      if (!this.activated && !this.crashed) {\r\n        this.playingIntro = true;\r\n        this.tRex.playingIntro = true;\r\n  \r\n        // CSS animation definition.\r\n        const keyframes = '@-webkit-keyframes intro { ' +\r\n              'from { width:' + Trex.config.WIDTH + 'px }' +\r\n              'to { width: ' + this.dimensions.WIDTH + 'px }' +\r\n            '}';\r\n        document.styleSheets[0].insertRule(keyframes, 0);\r\n  \r\n        this.containerEl.addEventListener(Runner.events.ANIM_END,\r\n            this.startGame.bind(this));\r\n  \r\n        this.containerEl.style.webkitAnimation = 'intro .4s ease-out 1 both';\r\n        this.containerEl.style.width = this.dimensions.WIDTH + 'px';\r\n  \r\n        this.setPlayStatus(true);\r\n        this.activated = true;\r\n      } else if (this.crashed) {\r\n        this.restart();\r\n      }\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Update the game status to started.\r\n     */\r\n    startGame() {\r\n      if (this.isArcadeMode()) {\r\n        this.setArcadeMode();\r\n      }\r\n      this.toggleSpeed();\r\n      this.runningTime = 0;\r\n      this.playingIntro = false;\r\n      this.tRex.playingIntro = false;\r\n      this.containerEl.style.webkitAnimation = '';\r\n      this.playCount++;\r\n      this.generatedSoundFx.background();\r\n      announcePhrase(getA11yString(A11Y_STRINGS.started));\r\n  \r\n      if (Runner.audioCues) {\r\n        this.containerEl.setAttribute('title', getA11yString(A11Y_STRINGS.jump));\r\n      }\r\n  \r\n      // Handle tabbing off the page. Pause the current game.\r\n      document.addEventListener(Runner.events.VISIBILITY,\r\n            this.onVisibilityChange.bind(this));\r\n  \r\n      window.addEventListener(Runner.events.BLUR,\r\n            this.onVisibilityChange.bind(this));\r\n  \r\n      window.addEventListener(Runner.events.FOCUS,\r\n            this.onVisibilityChange.bind(this));\r\n    },\r\n  \r\n    clearCanvas() {\r\n      this.canvasCtx.clearRect(0, 0, this.dimensions.WIDTH,\r\n          this.dimensions.HEIGHT);\r\n    },\r\n  \r\n    /**\r\n     * Checks whether the canvas area is in the viewport of the browser\r\n     * through the current scroll position.\r\n     * @return boolean.\r\n     */\r\n    isCanvasInView() {\r\n      return this.containerEl.getBoundingClientRect().top >\r\n          Runner.config.CANVAS_IN_VIEW_OFFSET;\r\n    },\r\n  \r\n    /**\r\n     * Enable the alt game mode. Switching out the sprites.\r\n     */\r\n    enableAltGameMode() {\r\n      Runner.imageSprite = Runner.altGameImageSprite;\r\n      Runner.spriteDefinition = Runner_spriteDefinitionByType[Runner.gameType];\r\n  \r\n      if (IS_HIDPI) {\r\n        this.spriteDef = Runner.spriteDefinition.HDPI;\r\n      } else {\r\n        this.spriteDef = Runner.spriteDefinition.LDPI;\r\n      }\r\n  \r\n      this.altGameModeActive = true;\r\n      this.tRex.enableAltGameMode(this.spriteDef.TREX);\r\n      this.horizon.enableAltGameMode(this.spriteDef);\r\n      this.generatedSoundFx.background();\r\n    },\r\n  \r\n    /**\r\n     * Update the game frame and schedules the next one. \r\n     */\r\n    update() {\r\n      this.updatePending = false;\r\n  \r\n      const now = getTimeStamp();\r\n      let deltaTime = now - (this.time || now);\r\n  \r\n      // Flashing when switching game modes.\r\n      if (this.altGameModeFlashTimer < 0 || this.altGameModeFlashTimer === 0) {\r\n        this.altGameModeFlashTimer = null;\r\n        this.tRex.setFlashing(false);\r\n        this.enableAltGameMode();\r\n      } else if (this.altGameModeFlashTimer > 0) {\r\n        this.altGameModeFlashTimer -= deltaTime;\r\n        this.tRex.update(deltaTime);\r\n        deltaTime = 0;\r\n      }\r\n  \r\n      this.time = now;\r\n\r\n      //console.log(this.currentFrame);\r\n      //console.log(this.typeConfig.numFrames);\r\n      //console.log(deltaTime); - getting printed\r\n  \r\n      if (this.playing) {\r\n        this.clearCanvas();\r\n  \r\n        // Additional fade in - Prevents jump when switching sprites\r\n        if (this.altGameModeActive &&\r\n            this.fadeInTimer <= this.config.FADE_DURATION) {\r\n          this.fadeInTimer += deltaTime / 1000;\r\n          this.canvasCtx.globalAlpha = this.fadeInTimer;\r\n        } else {\r\n          this.canvasCtx.globalAlpha = 1;\r\n        }\r\n  \r\n        if (this.tRex.jumping) {\r\n          this.tRex.updateJump(deltaTime);\r\n        }\r\n  \r\n        this.runningTime += deltaTime;\r\n        const hasObstacles = this.runningTime > this.config.CLEAR_TIME;\r\n  \r\n        // First jump triggers the intro.\r\n        if (this.tRex.jumpCount === 1 && !this.playingIntro) {\r\n          this.playIntro();\r\n        }\r\n  \r\n        // The horizon doesn't move until the intro is over.\r\n        if (this.playingIntro) {\r\n          this.horizon.update(0, this.currentSpeed, hasObstacles);\r\n        } else if (!this.crashed) {\r\n          const showNightMode = this.isDarkMode ^ this.inverted;\r\n          deltaTime = !this.activated ? 0 : deltaTime;\r\n          this.horizon.update(\r\n              deltaTime, this.currentSpeed, hasObstacles, showNightMode);\r\n        }\r\n  \r\n        // Check for collisions.\r\n        let collision = hasObstacles &&\r\n            checkForCollision(this.horizon.obstacles[0], this.tRex);\r\n        // console.log(hasObstacles);\r\n        // For a11y, audio cues.\r\n        if (Runner.audioCues && hasObstacles) {\r\n          const jumpObstacle =\r\n              this.horizon.obstacles[0].typeConfig.type != 'COLLECTABLE';\r\n  \r\n          if (!this.horizon.obstacles[0].jumpAlerted) {\r\n            const threshold = Runner.isMobileMouseInput ?\r\n                Runner.config.AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y :\r\n                Runner.config.AUDIOCUE_PROXIMITY_THRESHOLD;\r\n            const adjProximityThreshold = threshold +\r\n                (threshold * Math.log10(this.currentSpeed / Runner.config.SPEED));\r\n  \r\n            if (this.horizon.obstacles[0].xPos < adjProximityThreshold) {\r\n              if (jumpObstacle) {\r\n                this.generatedSoundFx.jump();\r\n              }\r\n              this.horizon.obstacles[0].jumpAlerted = true;\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Activated alt game mode.\r\n        if (Runner.isAltGameModeEnabled() && collision &&\r\n            this.horizon.obstacles[0].typeConfig.type == 'COLLECTABLE') {\r\n          this.horizon.removeFirstObstacle();\r\n          this.tRex.setFlashing(true);\r\n          collision = false;\r\n          this.altGameModeFlashTimer = this.config.FLASH_DURATION;\r\n          this.runningTime = 0;\r\n          this.generatedSoundFx.collect();\r\n        }\r\n  \r\n        if (!collision) {\r\n          this.distanceRan += this.currentSpeed * deltaTime / this.msPerFrame;\r\n  \r\n          if (this.currentSpeed < this.config.MAX_SPEED) {\r\n            this.currentSpeed += this.config.ACCELERATION;\r\n          }\r\n        } else {\r\n          this.gameOver();\r\n        }\r\n  \r\n        const playAchievementSound = this.distanceMeter.update(deltaTime,\r\n            Math.ceil(this.distanceRan));\r\n  \r\n        if (!Runner.audioCues && playAchievementSound) {\r\n          this.playSound(this.soundFx.SCORE);\r\n        }\r\n  \r\n        // Night mode.\r\n        if (!Runner.isAltGameModeEnabled()) {\r\n          if (this.invertTimer > this.config.INVERT_FADE_DURATION) {\r\n            this.invertTimer = 0;\r\n            this.invertTrigger = false;\r\n            this.invert(false);\r\n          } else if (this.invertTimer) {\r\n            this.invertTimer += deltaTime;\r\n          } else {\r\n            const actualDistance =\r\n                this.distanceMeter.getActualDistance(Math.ceil(this.distanceRan));\r\n  \r\n            if (actualDistance > 0) {\r\n              this.invertTrigger =\r\n                  !(actualDistance % this.config.INVERT_DISTANCE);\r\n  \r\n              if (this.invertTrigger && this.invertTimer === 0) {\r\n                this.invertTimer += deltaTime;\r\n                this.invert(false);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.playing || (!this.activated &&\r\n          this.tRex.blinkCount < Runner.config.MAX_BLINK_COUNT)) {\r\n        this.tRex.update(deltaTime);\r\n        this.scheduleNextUpdate();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Event handler.\r\n     * @param {Event} e\r\n     */\r\n    handleEvent(e) {\r\n      return (function(evtType, events) {\r\n        switch (evtType) {\r\n          case events.KEYDOWN:\r\n          case events.TOUCHSTART:\r\n          case events.POINTERDOWN:\r\n            this.onKeyDown(e);\r\n            break;\r\n          case events.KEYUP:\r\n          case events.TOUCHEND:\r\n          case events.POINTERUP:\r\n            this.onKeyUp(e);\r\n            break;\r\n          case events.GAMEPADCONNECTED:\r\n            this.onGamepadConnected(e);\r\n            break;\r\n        }\r\n      }.bind(this))(e.type, Runner.events);\r\n    },\r\n  \r\n    /**\r\n     * Initialize audio cues if activated by focus on the canvas element.\r\n     * @param {Event} e\r\n     */\r\n    handleCanvasKeyPress(e) {\r\n      if (!this.activated && !Runner.audioCues) {\r\n        this.toggleSpeed();\r\n        Runner.audioCues = true;\r\n        this.generatedSoundFx.init();\r\n        Runner.generatedSoundFx = this.generatedSoundFx;\r\n        Runner.config.CLEAR_TIME *= 1.2;\r\n      } else if (e.keyCode && Runner.keycodes.JUMP[e.keyCode]) {\r\n        this.onKeyDown(e);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Prevent space key press from scrolling.\r\n     * @param {Event} e\r\n     */\r\n    preventScrolling(e) {\r\n      if (e.keyCode === 32) {\r\n        e.preventDefault();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Toggle speed setting if toggle is shown.\r\n     */\r\n    toggleSpeed() {\r\n      if (Runner.audioCues) {\r\n        const speedChange = Runner.slowDown != this.slowSpeedCheckbox.checked;\r\n  \r\n        if (speedChange) {\r\n          Runner.slowDown = this.slowSpeedCheckbox.checked;\r\n          const updatedConfig =\r\n              Runner.slowDown ? Runner.slowConfig : Runner.normalConfig;\r\n  \r\n          Runner.config = Object.assign(Runner.config, updatedConfig);\r\n          this.currentSpeed = updatedConfig.SPEED;\r\n          this.tRex.enableSlowConfig();\r\n          this.horizon.adjustObstacleSpeed();\r\n        }\r\n        if (this.playing) {\r\n          this.disableSpeedToggle(true);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Show the speed toggle.\r\n     * From focus event or when audio cues are activated.\r\n     * @param {Event=} e\r\n     */\r\n    showSpeedToggle(e) {\r\n      const isFocusEvent = e && e.type == 'focus';\r\n      if (Runner.audioCues || isFocusEvent) {\r\n        this.slowSpeedCheckboxLabel.classList.toggle(\r\n            HIDDEN_CLASS, isFocusEvent ? false : !this.crashed);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Disable the speed toggle.\r\n     * @param {boolean} disable\r\n     */\r\n    disableSpeedToggle(disable) {\r\n      if (disable) {\r\n        this.slowSpeedCheckbox.setAttribute('disabled', 'disabled');\r\n      } else {\r\n        this.slowSpeedCheckbox.removeAttribute('disabled');\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Bind relevant key / mouse / touch listeners.\r\n     */\r\n    startListening() {\r\n      // A11y keyboard / screen reader activation.\r\n      this.containerEl.addEventListener(\r\n          Runner.events.KEYDOWN, this.handleCanvasKeyPress.bind(this));\r\n      if (!IS_MOBILE) {\r\n        this.containerEl.addEventListener(\r\n            Runner.events.FOCUS, this.showSpeedToggle.bind(this));\r\n      }\r\n      this.canvas.addEventListener(\r\n          Runner.events.KEYDOWN, this.preventScrolling.bind(this));\r\n      this.canvas.addEventListener(\r\n          Runner.events.KEYUP, this.preventScrolling.bind(this));\r\n  \r\n      // Keys.\r\n      document.addEventListener(Runner.events.KEYDOWN, this);\r\n      document.addEventListener(Runner.events.KEYUP, this);\r\n  \r\n      // Touch / pointer.\r\n      this.containerEl.addEventListener(Runner.events.TOUCHSTART, this);\r\n      document.addEventListener(Runner.events.POINTERDOWN, this);\r\n      document.addEventListener(Runner.events.POINTERUP, this);\r\n  \r\n      if (this.isArcadeMode()) {\r\n        // Gamepad\r\n        window.addEventListener(Runner.events.GAMEPADCONNECTED, this);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Remove all listeners.\r\n     */\r\n    stopListening() {\r\n      document.removeEventListener(Runner.events.KEYDOWN, this);\r\n      document.removeEventListener(Runner.events.KEYUP, this);\r\n  \r\n      if (this.touchController) {\r\n        this.touchController.removeEventListener(Runner.events.TOUCHSTART, this);\r\n        this.touchController.removeEventListener(Runner.events.TOUCHEND, this);\r\n      }\r\n  \r\n      this.containerEl.removeEventListener(Runner.events.TOUCHSTART, this);\r\n      document.removeEventListener(Runner.events.POINTERDOWN, this);\r\n      document.removeEventListener(Runner.events.POINTERUP, this);\r\n  \r\n      if (this.isArcadeMode()) {\r\n        window.removeEventListener(Runner.events.GAMEPADCONNECTED, this);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Process keydown.\r\n     * @param {Event} e\r\n     */\r\n    onKeyDown(e) {\r\n      // Prevent native page scrolling whilst tapping on mobile.\r\n      if (IS_MOBILE && this.playing) {\r\n        e.preventDefault();\r\n      }\r\n      // e.keyCode =32;\r\n      console.log(e.keyCode);\r\n      //e.keyCode =32;\r\n  \r\n      if (this.isCanvasInView()) {\r\n        // Allow toggling of speed toggle.\r\n        if (Runner.keycodes.JUMP[e.keyCode] &&\r\n            e.target == this.slowSpeedCheckbox) {\r\n          return;\r\n        }\r\n  \r\n        if (!this.crashed && !this.paused) {\r\n          // For a11y, screen reader activation.\r\n          const isMobileMouseInput = IS_MOBILE &&\r\n                  e.type === Runner.events.POINTERDOWN &&\r\n                  e.pointerType == 'mouse' && e.target == this.containerEl ||\r\n              (IS_IOS && e.pointerType == 'touch' &&\r\n               document.activeElement == this.containerEl);\r\n  \r\n          if (Runner.keycodes.JUMP[e.keyCode] ||\r\n              e.type === Runner.events.TOUCHSTART || isMobileMouseInput ||\r\n              (Runner.keycodes.DUCK[e.keyCode] && this.altGameModeActive)) {\r\n            e.preventDefault();\r\n            // Starting the game for the first time.\r\n            if (!this.playing) {\r\n              // Started by touch so create a touch controller.\r\n              if (!this.touchController && e.type === Runner.events.TOUCHSTART) {\r\n                this.createTouchController();\r\n              }\r\n  \r\n              if (isMobileMouseInput) {\r\n                this.handleCanvasKeyPress(e);\r\n              }\r\n              // this.loadSounds();\r\n              this.setPlayStatus(true);\r\n              this.update();\r\n              if (window.errorPageController) {\r\n                errorPageController.trackEasterEgg();\r\n              }\r\n            }\r\n            // Start jump.\r\n            if (!this.tRex.jumping && !this.tRex.ducking) {\r\n              if (Runner.audioCues) {\r\n                this.generatedSoundFx.cancelFootSteps();\r\n              } else {\r\n                this.playSound(this.soundFx.BUTTON_PRESS);\r\n              }\r\n              this.tRex.startJump(this.currentSpeed);\r\n            }\r\n            // Ducking is disabled on alt game modes.\r\n          } else if (\r\n              !this.altGameModeActive && this.playing &&\r\n              Runner.keycodes.DUCK[e.keyCode]) {\r\n            e.preventDefault();\r\n            if (this.tRex.jumping) {\r\n              // Speed drop, activated only when jump key is not pressed.\r\n              this.tRex.setSpeedDrop();\r\n            } else if (!this.tRex.jumping && !this.tRex.ducking) {\r\n              // Duck.\r\n              this.tRex.setDuck(true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Process key up.\r\n     * @param {Event} e\r\n     */\r\n    onKeyUp(e) {\r\n      const keyCode = String(e.keyCode);\r\n      const isjumpKey = Runner.keycodes.JUMP[keyCode] ||\r\n          e.type === Runner.events.TOUCHEND || e.type === Runner.events.POINTERUP;\r\n  \r\n      if (this.isRunning() && isjumpKey) {\r\n        this.tRex.endJump();\r\n      } else if (Runner.keycodes.DUCK[keyCode]) {\r\n        this.tRex.speedDrop = false;\r\n        this.tRex.setDuck(false);\r\n      } else if (this.crashed) {\r\n        // Check that enough time has elapsed before allowing jump key to restart.\r\n        const deltaTime = getTimeStamp() - this.time;\r\n  \r\n        if (this.isCanvasInView() &&\r\n            (Runner.keycodes.RESTART[keyCode] || this.isLeftClickOnCanvas(e) ||\r\n            (deltaTime >= this.config.GAMEOVER_CLEAR_TIME &&\r\n            Runner.keycodes.JUMP[keyCode]))) {\r\n          this.handleGameOverClicks(e);\r\n        }\r\n      } else if (this.paused && isjumpKey) {\r\n        // Reset the jump state\r\n        this.tRex.reset();\r\n        this.play();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Process gamepad connected event.\r\n     * @param {Event} e\r\n     */\r\n    onGamepadConnected(e) {\r\n      if (!this.pollingGamepads) {\r\n        this.pollGamepadState();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * rAF loop for gamepad polling.\r\n     */\r\n    pollGamepadState() {\r\n      const gamepads = navigator.getGamepads();\r\n      this.pollActiveGamepad(gamepads);\r\n  \r\n      this.pollingGamepads = true;\r\n      requestAnimationFrame(this.pollGamepadState.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Polls for a gamepad with the jump button pressed. If one is found this\r\n     * becomes the \"active\" gamepad and all others are ignored.\r\n     * @param {!Array<Gamepad>} gamepads\r\n     */\r\n    pollForActiveGamepad(gamepads) {\r\n      for (let i = 0; i < gamepads.length; ++i) {\r\n        if (gamepads[i] && gamepads[i].buttons.length > 0 &&\r\n            gamepads[i].buttons[0].pressed) {\r\n          this.gamepadIndex = i;\r\n          this.pollActiveGamepad(gamepads);\r\n          return;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Polls the chosen gamepad for button presses and generates KeyboardEvents\r\n     * to integrate with the rest of the game logic.\r\n     * @param {!Array<Gamepad>} gamepads\r\n     */\r\n    pollActiveGamepad(gamepads) {\r\n      if (this.gamepadIndex === undefined) {\r\n        this.pollForActiveGamepad(gamepads);\r\n        return;\r\n      }\r\n  \r\n      const gamepad = gamepads[this.gamepadIndex];\r\n      if (!gamepad) {\r\n        this.gamepadIndex = undefined;\r\n        this.pollForActiveGamepad(gamepads);\r\n        return;\r\n      }\r\n  \r\n      // The gamepad specification defines the typical mapping of physical buttons\r\n      // to button indicies: https://w3c.github.io/gamepad/#remapping\r\n      this.pollGamepadButton(gamepad, 0, 38);  // Jump\r\n      if (gamepad.buttons.length >= 2) {\r\n        this.pollGamepadButton(gamepad, 1, 40);  // Duck\r\n      }\r\n      if (gamepad.buttons.length >= 10) {\r\n        this.pollGamepadButton(gamepad, 9, 13);  // Restart\r\n      }\r\n  \r\n      this.previousGamepad = gamepad;\r\n    },\r\n  \r\n    /**\r\n     * Generates a key event based on a gamepad button.\r\n     * @param {!Gamepad} gamepad\r\n     * @param {number} buttonIndex\r\n     * @param {number} keyCode\r\n     */\r\n    pollGamepadButton(gamepad, buttonIndex, keyCode) {\r\n      const state = gamepad.buttons[buttonIndex].pressed;\r\n      let previousState = false;\r\n      if (this.previousGamepad) {\r\n        previousState = this.previousGamepad.buttons[buttonIndex].pressed;\r\n      }\r\n      // Generate key events on the rising and falling edge of a button press.\r\n      if (state !== previousState) {\r\n        const e = new KeyboardEvent(state ? Runner.events.KEYDOWN\r\n                                        : Runner.events.KEYUP,\r\n                                  { keyCode: keyCode });\r\n        document.dispatchEvent(e);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Handle interactions on the game over screen state.\r\n     * A user is able to tap the high score twice to reset it.\r\n     * @param {Event} e\r\n     */\r\n    handleGameOverClicks(e) {\r\n      if (e.target != this.slowSpeedCheckbox) {\r\n        e.preventDefault();\r\n        if (this.distanceMeter.hasClickedOnHighScore(e) && this.highestScore) {\r\n          if (this.distanceMeter.isHighScoreFlashing()) {\r\n            // Subsequent click, reset the high score.\r\n            this.saveHighScore(0, true);\r\n            this.distanceMeter.resetHighScore();\r\n          } else {\r\n            // First click, flash the high score.\r\n            this.distanceMeter.startHighScoreFlashing();\r\n          }\r\n        } else {\r\n          this.distanceMeter.cancelHighScoreFlashing();\r\n          this.restart();\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Returns whether the event was a left click on canvas.\r\n     * On Windows right click is registered as a click.\r\n     * @param {Event} e\r\n     * @return {boolean}\r\n     */\r\n    isLeftClickOnCanvas(e) {\r\n      return e.button != null && e.button < 2 &&\r\n          e.type === Runner.events.POINTERUP &&\r\n          (e.target === this.canvas ||\r\n           (IS_MOBILE && Runner.audioCues && e.target === this.containerEl));\r\n    },\r\n  \r\n    /**\r\n     * RequestAnimationFrame wrapper.\r\n     */\r\n    scheduleNextUpdate() {\r\n      if (!this.updatePending) {\r\n        this.updatePending = true;\r\n        this.raqId = requestAnimationFrame(this.update.bind(this));\r\n      }\r\n      //console.log(this.currentFrame);\r\n     // console.log(this.typeConfig.numFrames);\r\n      //console.log(deltaTime);\r\n    },\r\n  \r\n    /**\r\n     * Whether the game is running.\r\n     * @return {boolean}\r\n     */\r\n    isRunning() {\r\n      return !!this.raqId;\r\n    },\r\n  \r\n    /**\r\n     * Set the initial high score as stored in the user's profile.\r\n     * @param {number} highScore\r\n     */\r\n    initializeHighScore(highScore) {\r\n      this.syncHighestScore = true;\r\n      highScore = Math.ceil(highScore);\r\n      if (highScore < this.highestScore) {\r\n        if (window.errorPageController) {\r\n          errorPageController.updateEasterEggHighScore(this.highestScore);\r\n        }\r\n        return;\r\n      }\r\n      this.highestScore = highScore;\r\n      this.distanceMeter.setHighScore(this.highestScore);\r\n    },\r\n  \r\n    /**\r\n     * Sets the current high score and saves to the profile if available.\r\n     * @param {number} distanceRan Total distance ran.\r\n     * @param {boolean=} opt_resetScore Whether to reset the score.\r\n     */\r\n    saveHighScore(distanceRan, opt_resetScore) {\r\n      this.highestScore = Math.ceil(distanceRan);\r\n      this.distanceMeter.setHighScore(this.highestScore);\r\n  \r\n      // Store the new high score in the profile.\r\n      if (this.syncHighestScore && window.errorPageController) {\r\n        if (opt_resetScore) {\r\n          errorPageController.resetEasterEggHighScore();\r\n        } else {\r\n          errorPageController.updateEasterEggHighScore(this.highestScore);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Game over state.\r\n     */\r\n    gameOver() {\r\n      this.playSound(this.soundFx.HIT);\r\n      vibrate(200);\r\n  \r\n      this.stop();\r\n      this.crashed = true;\r\n      this.distanceMeter.achievement = false;\r\n  \r\n      this.tRex.update(100, Trex.status.CRASHED);\r\n  \r\n      // Game over panel.\r\n      if (!this.gameOverPanel) {\r\n        const origSpriteDef = IS_HIDPI ?\r\n            Runner_spriteDefinitionByType.original.HDPI :\r\n            Runner_spriteDefinitionByType.original.LDPI;\r\n  \r\n        if (this.canvas) {\r\n          if (Runner.isAltGameModeEnabled) {\r\n            this.gameOverPanel = new GameOverPanel(\r\n                this.canvas, origSpriteDef.TEXT_SPRITE, origSpriteDef.RESTART,\r\n                this.dimensions, origSpriteDef.ALT_GAME_END,\r\n                this.altGameModeActive);\r\n          } else {\r\n            this.gameOverPanel = new GameOverPanel(\r\n                this.canvas, origSpriteDef.TEXT_SPRITE, origSpriteDef.RESTART,\r\n                this.dimensions);\r\n          }\r\n        }\r\n      }\r\n  \r\n      this.gameOverPanel.draw(this.altGameModeActive, this.tRex);\r\n  \r\n      // Update the high score.\r\n      if (this.distanceRan > this.highestScore) {\r\n        this.saveHighScore(this.distanceRan);\r\n      }\r\n\r\n      document.getElementById(\"dino-scores1\").innerHTML = \"Congratulations! \" + ((this.distanceRan - ((this.distanceRan)%1))/100).toString() + \" $DINO coins have been added to your Near wallet\";\r\n      console.log(document.getElementById(\"dino-scores1\"));\r\n  \r\n      // Reset the time clock.\r\n      this.time = getTimeStamp();\r\n  \r\n      if (Runner.audioCues) {\r\n        this.generatedSoundFx.stopAll();\r\n        announcePhrase(\r\n            getA11yString(A11Y_STRINGS.gameOver)\r\n                .replace(\r\n                    '$1',\r\n                    this.distanceMeter.getActualDistance(this.distanceRan)\r\n                        .toString()) +\r\n            ' ' +\r\n            getA11yString(A11Y_STRINGS.highScore)\r\n                .replace(\r\n                    '$1',\r\n  \r\n                    this.distanceMeter.getActualDistance(this.highestScore)\r\n                        .toString()));\r\n        this.containerEl.setAttribute(\r\n            'title', getA11yString(A11Y_STRINGS.ariaLabel));\r\n      }\r\n      this.showSpeedToggle();\r\n      this.disableSpeedToggle(false);\r\n    },\r\n  \r\n    stop() {\r\n      this.setPlayStatus(false);\r\n      this.paused = true;\r\n      cancelAnimationFrame(this.raqId);\r\n      this.raqId = 0;\r\n      this.generatedSoundFx.stopAll();\r\n    },\r\n  \r\n    play() {\r\n      if (!this.crashed) {\r\n        this.setPlayStatus(true);\r\n        this.paused = false;\r\n        this.tRex.update(0, Trex.status.RUNNING);\r\n        this.time = getTimeStamp();\r\n        this.update();\r\n        this.generatedSoundFx.background();\r\n      }\r\n    },\r\n  \r\n    restart() {\r\n      if (!this.raqId) {\r\n        this.playCount++;\r\n        this.runningTime = 0;\r\n        this.setPlayStatus(true);\r\n        this.toggleSpeed();\r\n        this.paused = false;\r\n        this.crashed = false;\r\n        this.distanceRan = 0;\r\n        this.setSpeed(this.config.SPEED);\r\n        this.time = getTimeStamp();\r\n        this.containerEl.classList.remove(Runner.classes.CRASHED);\r\n        this.clearCanvas();\r\n        this.distanceMeter.reset();\r\n        this.horizon.reset();\r\n        this.tRex.reset();\r\n        this.playSound(this.soundFx.BUTTON_PRESS);\r\n        this.invert(true);\r\n        this.flashTimer = null;\r\n        this.update();\r\n        this.gameOverPanel.reset();\r\n        this.generatedSoundFx.background();\r\n        this.containerEl.setAttribute('title', getA11yString(A11Y_STRINGS.jump));\r\n        announcePhrase(getA11yString(A11Y_STRINGS.started));\r\n      }\r\n    },\r\n  \r\n    setPlayStatus(isPlaying) {\r\n      if (this.touchController) {\r\n        this.touchController.classList.toggle(HIDDEN_CLASS, !isPlaying);\r\n      }\r\n      this.playing = isPlaying;\r\n    },\r\n  \r\n    /**\r\n     * Whether the game should go into arcade mode.\r\n     * @return {boolean}\r\n     */\r\n    isArcadeMode() {\r\n      // In RTL languages the title is wrapped with the left to right mark\r\n      // control characters &#x202A; and &#x202C but are invisible.\r\n      return IS_RTL ? document.title.indexOf(ARCADE_MODE_URL) == 1 :\r\n                      document.title === ARCADE_MODE_URL;\r\n    },\r\n  \r\n    /**\r\n     * Hides offline messaging for a fullscreen game only experience.\r\n     */\r\n    setArcadeMode() {\r\n      document.body.classList.add(Runner.classes.ARCADE_MODE);\r\n      this.setArcadeModeContainerScale();\r\n    },\r\n  \r\n    /**\r\n     * Sets the scaling for arcade mode.\r\n     */\r\n    setArcadeModeContainerScale() {\r\n      const windowHeight = window.innerHeight;\r\n      const scaleHeight = windowHeight / this.dimensions.HEIGHT;\r\n      const scaleWidth = window.innerWidth / this.dimensions.WIDTH;\r\n      const scale = Math.max(1, Math.min(scaleHeight, scaleWidth));\r\n      const scaledCanvasHeight = this.dimensions.HEIGHT * scale;\r\n      // Positions the game container at 10% of the available vertical window\r\n      // height minus the game container height.\r\n      const translateY = Math.ceil(Math.max(0, (windowHeight - scaledCanvasHeight -\r\n          Runner.config.ARCADE_MODE_INITIAL_TOP_POSITION) *\r\n          Runner.config.ARCADE_MODE_TOP_POSITION_PERCENT)) *\r\n          window.devicePixelRatio;\r\n  \r\n      const cssScale = IS_RTL ? -scale + ',' + scale : scale;\r\n      this.containerEl.style.transform =\r\n          'scale(' + cssScale + ') translateY(' + translateY + 'px)';\r\n    },\r\n  \r\n    /**\r\n     * Pause the game if the tab is not in focus.\r\n     */\r\n    onVisibilityChange(e) {\r\n      if (document.hidden || document.webkitHidden || e.type === 'blur' ||\r\n          document.visibilityState !== 'visible') {\r\n        this.stop();\r\n      } else if (!this.crashed) {\r\n        this.tRex.reset();\r\n        this.play();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Play a sound.\r\n     * @param {AudioBuffer} soundBuffer\r\n     */\r\n    playSound(soundBuffer) {\r\n      if (soundBuffer) {\r\n        const sourceNode = this.audioContext.createBufferSource();\r\n        sourceNode.buffer = soundBuffer;\r\n        sourceNode.connect(this.audioContext.destination);\r\n        sourceNode.start(0);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Inverts the current page / canvas colors.\r\n     * @param {boolean} reset Whether to reset colors.\r\n     */\r\n    invert(reset) {\r\n      const htmlEl = document.firstElementChild;\r\n  \r\n      if (reset) {\r\n        htmlEl.classList.toggle(Runner.classes.INVERTED,\r\n            false);\r\n        this.invertTimer = 0;\r\n        this.inverted = false;\r\n      } else {\r\n        this.inverted = htmlEl.classList.toggle(\r\n            Runner.classes.INVERTED, this.invertTrigger);\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Updates the canvas size taking into\r\n   * account the backing store pixel ratio and\r\n   * the device pixel ratio.\r\n   *\r\n   * See article by Paul Lewis:\r\n   * http://www.html5rocks.com/en/tutorials/canvas/hidpi/\r\n   *\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {number=} opt_width\r\n   * @param {number=} opt_height\r\n   * @return {boolean} Whether the canvas was scaled.\r\n   */\r\n  Runner.updateCanvasScaling = function(canvas, opt_width, opt_height) {\r\n    const context =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n  \r\n    // Query the various pixel ratios\r\n    const devicePixelRatio = Math.floor(window.devicePixelRatio) || 1;\r\n    /** @suppress {missingProperties} */\r\n    const backingStoreRatio =\r\n        Math.floor(context.webkitBackingStorePixelRatio) || 1;\r\n    const ratio = devicePixelRatio / backingStoreRatio;\r\n  \r\n    // Upscale the canvas if the two ratios don't match\r\n    if (devicePixelRatio !== backingStoreRatio) {\r\n      const oldWidth = opt_width || canvas.width;\r\n      const oldHeight = opt_height || canvas.height;\r\n  \r\n      canvas.width = oldWidth * ratio;\r\n      canvas.height = oldHeight * ratio;\r\n  \r\n      canvas.style.width = oldWidth + 'px';\r\n      canvas.style.height = oldHeight + 'px';\r\n  \r\n      // Scale the context to counter the fact that we've manually scaled\r\n      // our canvas element.\r\n      context.scale(ratio, ratio);\r\n      return true;\r\n    } else if (devicePixelRatio === 1) {\r\n      // Reset the canvas width / height. Fixes scaling bug when the page is\r\n      // zoomed and the devicePixelRatio changes accordingly.\r\n      canvas.style.width = canvas.width + 'px';\r\n      canvas.style.height = canvas.height + 'px';\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Whether events are enabled.\r\n   * @return {boolean}\r\n   */\r\n  Runner.isAltGameModeEnabled = function() {\r\n    // return loadTimeData && loadTimeData.valueExists('enableAltGameMode');\r\n    return false;\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Generated sound FX class for audio cues.\r\n   * @constructor\r\n   */\r\n  function GeneratedSoundFx() {\r\n    this.audioCues = false;\r\n    this.context = null;\r\n    this.panner = null;\r\n  }\r\n  \r\n  GeneratedSoundFx.prototype = {\r\n    init() {\r\n      this.audioCues = true;\r\n      if (!this.context) {\r\n        // iOS only supports the webkit version.\r\n        this.context = window.webkitAudioContext ? new webkitAudioContext() :\r\n                                                   new AudioContext();\r\n        if (IS_IOS) {\r\n          this.context.onstatechange = (function() {\r\n                                         if (this.context.state != 'running') {\r\n                                           this.context.resume();\r\n                                         }\r\n                                       }).bind(this);\r\n          this.context.resume();\r\n        }\r\n        this.panner = this.context.createStereoPanner ?\r\n            this.context.createStereoPanner() :\r\n            null;\r\n      }\r\n    },\r\n  \r\n    stopAll() {\r\n      this.cancelFootSteps();\r\n    },\r\n  \r\n    /**\r\n     * Play oscillators at certain frequency and for a certain time.\r\n     * @param {number} frequency\r\n     * @param {number} startTime\r\n     * @param {number} duration\r\n     * @param {?number=} opt_vol\r\n     * @param {number=} opt_pan\r\n     */\r\n    playNote(frequency, startTime, duration, opt_vol, opt_pan) {\r\n      const osc1 = this.context.createOscillator();\r\n      const osc2 = this.context.createOscillator();\r\n      const volume = this.context.createGain();\r\n  \r\n      // Set oscillator wave type\r\n      osc1.type = 'triangle';\r\n      osc2.type = 'triangle';\r\n      volume.gain.value = 0.1;\r\n  \r\n      // Set up node routing\r\n      if (this.panner) {\r\n        this.panner.pan.value = opt_pan || 0;\r\n        osc1.connect(volume).connect(this.panner);\r\n        osc2.connect(volume).connect(this.panner);\r\n        this.panner.connect(this.context.destination);\r\n      } else {\r\n        osc1.connect(volume);\r\n        osc2.connect(volume);\r\n        volume.connect(this.context.destination);\r\n      }\r\n  \r\n      // Detune oscillators for chorus effect\r\n      osc1.frequency.value = frequency + 1;\r\n      osc2.frequency.value = frequency - 2;\r\n  \r\n      // Fade out\r\n      volume.gain.setValueAtTime(opt_vol || 0.01, startTime + duration - 0.05);\r\n      volume.gain.linearRampToValueAtTime(0.00001, startTime + duration);\r\n  \r\n      // Start oscillators\r\n      osc1.start(startTime);\r\n      osc2.start(startTime);\r\n      // Stop oscillators\r\n      osc1.stop(startTime + duration);\r\n      osc2.stop(startTime + duration);\r\n    },\r\n  \r\n    background() {\r\n      if (this.audioCues) {\r\n        const now = this.context.currentTime;\r\n        this.playNote(493.883, now, 0.116);\r\n        this.playNote(659.255, now + 0.116, 0.232);\r\n        this.loopFootSteps();\r\n      }\r\n    },\r\n  \r\n    loopFootSteps() {\r\n      if (this.audioCues && !this.bgSoundIntervalId) {\r\n        this.bgSoundIntervalId = setInterval(function() {\r\n          this.playNote(73.42, this.context.currentTime, 0.05, 0.16);\r\n          this.playNote(69.30, this.context.currentTime + 0.116, 0.116, 0.16);\r\n        }.bind(this), 280);\r\n      }\r\n    },\r\n  \r\n    cancelFootSteps() {\r\n      if (this.audioCues && this.bgSoundIntervalId) {\r\n        clearInterval(this.bgSoundIntervalId);\r\n        this.bgSoundIntervalId = null;\r\n        this.playNote(103.83, this.context.currentTime, 0.232, 0.02);\r\n        this.playNote(116.54, this.context.currentTime + 0.116, 0.232, 0.02);\r\n      }\r\n    },\r\n  \r\n    collect() {\r\n      if (this.audioCues) {\r\n        this.cancelFootSteps();\r\n        const now = this.context.currentTime;\r\n        this.playNote(830.61, now, 0.116);\r\n        this.playNote(1318.51, now + 0.116, 0.232);\r\n      }\r\n    },\r\n  \r\n    jump() {\r\n      if (this.audioCues) {\r\n        const now = this.context.currentTime;\r\n        this.playNote(659.25, now, 0.116, 0.3, -0.6);\r\n        this.playNote(880, now + 0.116, 0.232, 0.3, -0.6);\r\n      }\r\n    },\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Speak a phrase using Speech Synthesis API for a11y.\r\n   * @param {string} phrase Sentence to speak.\r\n   */\r\n  function speakPhrase(phrase) {\r\n    if ('speechSynthesis' in window) {\r\n      const msg = new SpeechSynthesisUtterance(phrase);\r\n      const voices = window.speechSynthesis.getVoices();\r\n      msg.text = phrase;\r\n      speechSynthesis.speak(msg);\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * For screen readers make an announcement to the live region.\r\n   * @param {string} phrase Sentence to speak.\r\n   */\r\n  function announcePhrase(phrase) {\r\n    if (Runner.a11yStatusEl) {\r\n      Runner.a11yStatusEl.textContent = '';\r\n      Runner.a11yStatusEl.textContent = phrase;\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Returns a string from loadTimeData data object.\r\n   * @param {string} stringName\r\n   * @return {string}\r\n   */\r\n  function getA11yString(stringName) {\r\n    // return loadTimeData && loadTimeData.valueExists(stringName) ?\r\n    //     loadTimeData.getString(stringName) :\r\n    //     '';\r\n    return ''\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Get random number.\r\n   * @param {number} min\r\n   * @param {number} max\r\n   */\r\n  function getRandomNum(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Vibrate on mobile devices.\r\n   * @param {number} duration Duration of the vibration in milliseconds.\r\n   */\r\n  function vibrate(duration) {\r\n    if (IS_MOBILE && window.navigator.vibrate) {\r\n      window.navigator.vibrate(duration);\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Create canvas element.\r\n   * @param {Element} container Element to append canvas to.\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string=} opt_classname\r\n   * @return {HTMLCanvasElement}\r\n   */\r\n  function createCanvas(container, width, height, opt_classname) {\r\n    const canvas =\r\n        /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));\r\n    canvas.className = opt_classname ? Runner.classes.CANVAS + ' ' +\r\n        opt_classname : Runner.classes.CANVAS;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    container.appendChild(canvas);\r\n  \r\n    return canvas;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Decodes the base 64 audio to ArrayBuffer used by Web Audio.\r\n   * @param {string} base64String\r\n   */\r\n  function decodeBase64ToArrayBuffer(base64String) {\r\n    const len = (base64String.length / 4) * 3;\r\n    const str = atob(base64String);\r\n    const arrayBuffer = new ArrayBuffer(len);\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n  \r\n    for (let i = 0; i < len; i++) {\r\n      bytes[i] = str.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Return the current timestamp.\r\n   * @return {number}\r\n   */\r\n  function getTimeStamp() {\r\n    return IS_IOS ? new Date().getTime() : performance.now();\r\n  }\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  \r\n  /**\r\n   * Game over panel.\r\n   * @param {!HTMLCanvasElement} canvas\r\n   * @param {Object} textImgPos\r\n   * @param {Object} restartImgPos\r\n   * @param {!Object} dimensions Canvas dimensions.\r\n   * @param {Object=} opt_altGameEndImgPos\r\n   * @param {boolean=} opt_altGameActive\r\n   * @constructor\r\n   */\r\n  function GameOverPanel(\r\n      canvas, textImgPos, restartImgPos, dimensions, opt_altGameEndImgPos,\r\n      opt_altGameActive) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.canvasDimensions = dimensions;\r\n    this.textImgPos = textImgPos;\r\n    this.restartImgPos = restartImgPos;\r\n    this.altGameEndImgPos = opt_altGameEndImgPos;\r\n    this.altGameModeActive = opt_altGameActive;\r\n  \r\n    // Retry animation.\r\n    this.frameTimeStamp = 0;\r\n    this.animTimer = 0;\r\n    this.currentFrame = 0;\r\n  \r\n    this.gameOverRafId = null;\r\n  \r\n    this.flashTimer = 0;\r\n    this.flashCounter = 0;\r\n    this.originalText = true;\r\n  }\r\n  \r\n  GameOverPanel.RESTART_ANIM_DURATION = 875;\r\n  GameOverPanel.LOGO_PAUSE_DURATION = 875;\r\n  GameOverPanel.FLASH_ITERATIONS = 5;\r\n  \r\n  /**\r\n   * Animation frames spec.\r\n   */\r\n  GameOverPanel.animConfig = {\r\n    frames: [0, 36, 72, 108, 144, 180, 216, 252],\r\n    msPerFrame: GameOverPanel.RESTART_ANIM_DURATION / 8\r\n  };\r\n  \r\n  /**\r\n   * Dimensions used in the panel.\r\n   * @enum {number}\r\n   */\r\n  GameOverPanel.dimensions = {\r\n    TEXT_X: 0,\r\n    TEXT_Y: 13,\r\n    TEXT_WIDTH: 191,\r\n    TEXT_HEIGHT: 11,\r\n    RESTART_WIDTH: 36,\r\n    RESTART_HEIGHT: 32\r\n  };\r\n  \r\n  \r\n  GameOverPanel.prototype = {\r\n    /**\r\n     * Update the panel dimensions.\r\n     * @param {number} width New canvas width.\r\n     * @param {number} opt_height Optional new canvas height.\r\n     */\r\n    updateDimensions(width, opt_height) {\r\n      this.canvasDimensions.WIDTH = width;\r\n      if (opt_height) {\r\n        this.canvasDimensions.HEIGHT = opt_height;\r\n      }\r\n      this.currentFrame = GameOverPanel.animConfig.frames.length - 1;\r\n    },\r\n  \r\n    drawGameOverText(dimensions, opt_useAltText) {\r\n      const centerX = this.canvasDimensions.WIDTH / 2;\r\n      let textSourceX = dimensions.TEXT_X;\r\n      let textSourceY = dimensions.TEXT_Y;\r\n      let textSourceWidth = dimensions.TEXT_WIDTH;\r\n      let textSourceHeight = dimensions.TEXT_HEIGHT;\r\n  \r\n      const textTargetX = Math.round(centerX - (dimensions.TEXT_WIDTH / 2));\r\n      const textTargetY = Math.round((this.canvasDimensions.HEIGHT - 25) / 3);\r\n      const textTargetWidth = dimensions.TEXT_WIDTH;\r\n      const textTargetHeight = dimensions.TEXT_HEIGHT;\r\n  \r\n      if (IS_HIDPI) {\r\n        textSourceY *= 2;\r\n        textSourceX *= 2;\r\n        textSourceWidth *= 2;\r\n        textSourceHeight *= 2;\r\n      }\r\n  \r\n      if (!opt_useAltText) {\r\n        textSourceX += this.textImgPos.x;\r\n        textSourceY += this.textImgPos.y;\r\n      }\r\n  \r\n      const spriteSource =\r\n          opt_useAltText ? Runner.altCommonImageSprite : Runner.origImageSprite;\r\n  \r\n      this.canvasCtx.save();\r\n  \r\n      if (IS_RTL) {\r\n        this.canvasCtx.translate(this.canvasDimensions.WIDTH, 0);\r\n        this.canvasCtx.scale(-1, 1);\r\n      }\r\n  \r\n      // Game over text from sprite.\r\n      this.canvasCtx.drawImage(\r\n          spriteSource, textSourceX, textSourceY, textSourceWidth,\r\n          textSourceHeight, textTargetX, textTargetY, textTargetWidth,\r\n          textTargetHeight);\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Draw additional adornments for alternative game types.\r\n     */\r\n    drawAltGameElements(tRex) {\r\n      // Additional adornments.\r\n      if (this.altGameModeActive && Runner.spriteDefinition.ALT_GAME_END_CONFIG) {\r\n        const altGameEndConfig = Runner.spriteDefinition.ALT_GAME_END_CONFIG;\r\n  \r\n        let altGameEndSourceWidth = altGameEndConfig.WIDTH;\r\n        let altGameEndSourceHeight = altGameEndConfig.HEIGHT;\r\n        const altGameEndTargetX = tRex.xPos + altGameEndConfig.X_OFFSET;\r\n        const altGameEndTargetY = tRex.yPos + altGameEndConfig.Y_OFFSET;\r\n  \r\n        if (IS_HIDPI) {\r\n          altGameEndSourceWidth *= 2;\r\n          altGameEndSourceHeight *= 2;\r\n        }\r\n  \r\n        this.canvasCtx.drawImage(\r\n            Runner.altCommonImageSprite, this.altGameEndImgPos.x,\r\n            this.altGameEndImgPos.y, altGameEndSourceWidth,\r\n            altGameEndSourceHeight, altGameEndTargetX, altGameEndTargetY,\r\n            altGameEndConfig.WIDTH, altGameEndConfig.HEIGHT);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Draw restart button.\r\n     */\r\n    drawRestartButton() {\r\n      const dimensions = GameOverPanel.dimensions;\r\n      let framePosX = GameOverPanel.animConfig.frames[this.currentFrame];\r\n      let restartSourceWidth = dimensions.RESTART_WIDTH;\r\n      let restartSourceHeight = dimensions.RESTART_HEIGHT;\r\n      const restartTargetX =\r\n          (this.canvasDimensions.WIDTH / 2) - (dimensions.RESTART_WIDTH / 2);\r\n      const restartTargetY = this.canvasDimensions.HEIGHT / 2;\r\n  \r\n      if (IS_HIDPI) {\r\n        restartSourceWidth *= 2;\r\n        restartSourceHeight *= 2;\r\n        framePosX *= 2;\r\n      }\r\n  \r\n      this.canvasCtx.save();\r\n  \r\n      if (IS_RTL) {\r\n        this.canvasCtx.translate(this.canvasDimensions.WIDTH, 0);\r\n        this.canvasCtx.scale(-1, 1);\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(\r\n          Runner.origImageSprite, this.restartImgPos.x + framePosX,\r\n          this.restartImgPos.y, restartSourceWidth, restartSourceHeight,\r\n          restartTargetX, restartTargetY, dimensions.RESTART_WIDTH,\r\n          dimensions.RESTART_HEIGHT);\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Draw the panel.\r\n     * @param {boolean} opt_altGameModeActive\r\n     * @param {!Trex} opt_tRex\r\n     */\r\n    draw(opt_altGameModeActive, opt_tRex) {\r\n      if (opt_altGameModeActive) {\r\n        this.altGameModeActive = opt_altGameModeActive;\r\n      }\r\n  \r\n      this.drawGameOverText(GameOverPanel.dimensions, false);\r\n      this.drawRestartButton();\r\n      this.drawAltGameElements(opt_tRex);\r\n      this.update();\r\n    },\r\n  \r\n    /**\r\n     * Update animation frames.\r\n     */\r\n    update() {\r\n      // console.log(\"Why not here?\");\r\n      const now = getTimeStamp();\r\n      const deltaTime = now - (this.frameTimeStamp || now);\r\n  \r\n      this.frameTimeStamp = now;\r\n      this.animTimer += deltaTime;\r\n      this.flashTimer += deltaTime;\r\n  \r\n      // console.log(this.currentFrame);\r\n      // console.log(this.typeConfig.numFrames);\r\n      //console.log(deltaTime);\r\n      // Restart Button\r\n      if (this.currentFrame == 0 &&\r\n          this.animTimer > GameOverPanel.LOGO_PAUSE_DURATION) {\r\n        this.animTimer = 0;\r\n        this.currentFrame++;\r\n        this.drawRestartButton();\r\n      } else if (\r\n          this.currentFrame > 0 &&\r\n          this.currentFrame < GameOverPanel.animConfig.frames.length) {\r\n        if (this.animTimer >= GameOverPanel.animConfig.msPerFrame) {\r\n          this.currentFrame++;\r\n          this.drawRestartButton();\r\n        }\r\n      } else if (\r\n          !this.altGameModeActive &&\r\n          this.currentFrame == GameOverPanel.animConfig.frames.length) {\r\n        this.reset();\r\n        return;\r\n      }\r\n  \r\n      // Game over text\r\n      if (this.altGameModeActive &&\r\n          Runner_spriteDefinitionByType.original.ALT_GAME_OVER_TEXT_CONFIG) {\r\n        const altTextConfig =\r\n            Runner_spriteDefinitionByType.original.ALT_GAME_OVER_TEXT_CONFIG;\r\n  \r\n        if (this.flashCounter < GameOverPanel.FLASH_ITERATIONS &&\r\n            this.flashTimer > altTextConfig.FLASH_DURATION) {\r\n          this.flashTimer = 0;\r\n          this.originalText = !this.originalText;\r\n  \r\n          this.clearGameOverTextBounds();\r\n          if (this.originalText) {\r\n            this.drawGameOverText(GameOverPanel.dimensions, false);\r\n            this.flashCounter++;\r\n          } else {\r\n            this.drawGameOverText(altTextConfig, true);\r\n          }\r\n        } else if (this.flashCounter >= GameOverPanel.FLASH_ITERATIONS) {\r\n          this.reset();\r\n          return;\r\n        }\r\n      }\r\n  \r\n      this.gameOverRafId = requestAnimationFrame(this.update.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Clear game over text.\r\n     */\r\n    clearGameOverTextBounds() {\r\n      this.canvasCtx.save();\r\n  \r\n      this.canvasCtx.clearRect(\r\n          Math.round(\r\n              this.canvasDimensions.WIDTH / 2 -\r\n              (GameOverPanel.dimensions.TEXT_WIDTH / 2)),\r\n          Math.round((this.canvasDimensions.HEIGHT - 25) / 3),\r\n          GameOverPanel.dimensions.TEXT_WIDTH,\r\n          GameOverPanel.dimensions.TEXT_HEIGHT + 4);\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    reset() {\r\n      if (this.gameOverRafId) {\r\n        cancelAnimationFrame(this.gameOverRafId);\r\n        this.gameOverRafId = null;\r\n      }\r\n      this.animTimer = 0;\r\n      this.frameTimeStamp = 0;\r\n      this.currentFrame = 0;\r\n      this.flashTimer = 0;\r\n      this.flashCounter = 0;\r\n      this.originalText = true;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Check for a collision.\r\n   * @param {!Obstacle} obstacle\r\n   * @param {!Trex} tRex T-rex object.\r\n   * @param {CanvasRenderingContext2D=} opt_canvasCtx Optional canvas context for\r\n   *    drawing collision boxes.\r\n   * @return {Array<CollisionBox>|undefined}\r\n   */\r\n  function checkForCollision(obstacle, tRex, opt_canvasCtx) {\r\n    const obstacleBoxXPos = Runner.defaultDimensions.WIDTH + obstacle.xPos;\r\n    // console.log(obstacleBoxXPos);\r\n  \r\n    // Adjustments are made to the bounding box as there is a 1 pixel white\r\n    // border around the t-rex and obstacles.\r\n    const tRexBox = new CollisionBox(\r\n        tRex.xPos + 1,\r\n        tRex.yPos + 1,\r\n        tRex.config.WIDTH - 2,\r\n        tRex.config.HEIGHT - 2);\r\n    // console.log(tRexBox);\r\n  \r\n    const obstacleBox = new CollisionBox(\r\n        obstacle.xPos + 1,\r\n        obstacle.yPos + 1,\r\n        obstacle.typeConfig.width * obstacle.size - 2,\r\n        obstacle.typeConfig.height - 2);\r\n    // console.log(obstacleBox);\r\n  \r\n    // Debug outer box\r\n    if (opt_canvasCtx) {\r\n      drawCollisionBoxes(opt_canvasCtx, tRexBox, obstacleBox);\r\n    }\r\n  \r\n    // Simple outer bounds check.\r\n    if (boxCompare(tRexBox, obstacleBox)) {\r\n      const collisionBoxes = obstacle.collisionBoxes;\r\n      let tRexCollisionBoxes = [];\r\n  \r\n      if (Runner.isAltGameModeEnabled()) {\r\n        tRexCollisionBoxes = Runner.spriteDefinition.TREX.COLLISION_BOXES;\r\n      } else {\r\n        tRexCollisionBoxes = tRex.ducking ? Trex.collisionBoxes.DUCKING :\r\n                                            Trex.collisionBoxes.RUNNING;\r\n      }\r\n  \r\n      // Detailed axis aligned box check.\r\n      for (let t = 0; t < tRexCollisionBoxes.length; t++) {\r\n        for (let i = 0; i < collisionBoxes.length; i++) {\r\n          // Adjust the box to actual positions.\r\n          const adjTrexBox =\r\n              createAdjustedCollisionBox(tRexCollisionBoxes[t], tRexBox);\r\n          const adjObstacleBox =\r\n              createAdjustedCollisionBox(collisionBoxes[i], obstacleBox);\r\n          const crashed = boxCompare(adjTrexBox, adjObstacleBox);\r\n  \r\n          // Draw boxes for debug.\r\n          if (opt_canvasCtx) {\r\n            drawCollisionBoxes(opt_canvasCtx, adjTrexBox, adjObstacleBox);\r\n          }\r\n  \r\n          if (crashed) {\r\n            return [adjTrexBox, adjObstacleBox];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Adjust the collision box.\r\n   * @param {!CollisionBox} box The original box.\r\n   * @param {!CollisionBox} adjustment Adjustment box.\r\n   * @return {CollisionBox} The adjusted collision box object.\r\n   */\r\n  function createAdjustedCollisionBox(box, adjustment) {\r\n    return new CollisionBox(\r\n        box.x + adjustment.x,\r\n        box.y + adjustment.y,\r\n        box.width,\r\n        box.height);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Draw the collision boxes for debug.\r\n   */\r\n  function drawCollisionBoxes(canvasCtx, tRexBox, obstacleBox) {\r\n    canvasCtx.save();\r\n    canvasCtx.strokeStyle = '#f00';\r\n    canvasCtx.strokeRect(tRexBox.x, tRexBox.y, tRexBox.width, tRexBox.height);\r\n  \r\n    canvasCtx.strokeStyle = '#0f0';\r\n    canvasCtx.strokeRect(obstacleBox.x, obstacleBox.y,\r\n        obstacleBox.width, obstacleBox.height);\r\n    canvasCtx.restore();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Compare two collision boxes for a collision.\r\n   * @param {CollisionBox} tRexBox\r\n   * @param {CollisionBox} obstacleBox\r\n   * @return {boolean} Whether the boxes intersected.\r\n   */\r\n  function boxCompare(tRexBox, obstacleBox) {\r\n    let crashed = false;\r\n    const tRexBoxX = tRexBox.x;\r\n    const tRexBoxY = tRexBox.y;\r\n  \r\n    const obstacleBoxX = obstacleBox.x;\r\n    const obstacleBoxY = obstacleBox.y;\r\n  \r\n    // Axis-Aligned Bounding Box method.\r\n    if (tRexBox.x < obstacleBoxX + obstacleBox.width &&\r\n        tRexBox.x + tRexBox.width > obstacleBoxX &&\r\n        tRexBox.y < obstacleBox.y + obstacleBox.height &&\r\n        tRexBox.height + tRexBox.y > obstacleBox.y) {\r\n      crashed = true;\r\n    }\r\n  \r\n    return crashed;\r\n  }\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Collision box object.\r\n   * @param {number} x X position.\r\n   * @param {number} y Y Position.\r\n   * @param {number} w Width.\r\n   * @param {number} h Height.\r\n   * @constructor\r\n   */\r\n  export function CollisionBox(x, y, w, h) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = w;\r\n    this.height = h;\r\n  }\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Obstacle.\r\n   * @param {CanvasRenderingContext2D} canvasCtx\r\n   * @param {ObstacleType} type\r\n   * @param {Object} spriteImgPos Obstacle position in sprite.\r\n   * @param {Object} dimensions\r\n   * @param {number} gapCoefficient Mutipler in determining the gap.\r\n   * @param {number} speed\r\n   * @param {number=} opt_xOffset\r\n   * @param {boolean=} opt_isAltGameMode\r\n   * @constructor\r\n   */\r\n  function Obstacle(\r\n      canvasCtx, type, spriteImgPos, dimensions, gapCoefficient, speed,\r\n      opt_xOffset, opt_isAltGameMode) {\r\n    this.canvasCtx = canvasCtx;\r\n    this.spritePos = spriteImgPos;\r\n    this.typeConfig = type;\r\n    this.gapCoefficient = Runner.slowDown ? gapCoefficient * 2 : gapCoefficient;\r\n    this.size = getRandomNum(1, Obstacle.MAX_OBSTACLE_LENGTH);\r\n    this.dimensions = dimensions;\r\n    this.remove = false;\r\n    this.xPos = dimensions.WIDTH + (opt_xOffset || 0);\r\n    this.yPos = 0;\r\n    this.width = 0;\r\n    this.collisionBoxes = [];\r\n    this.gap = 0;\r\n    this.speedOffset = 0;\r\n    this.altGameModeActive = opt_isAltGameMode;\r\n    this.imageSprite = this.typeConfig.type == 'COLLECTABLE' ?\r\n        Runner.altCommonImageSprite :\r\n        this.altGameModeActive ? Runner.altGameImageSprite : Runner.imageSprite;\r\n  \r\n    // For animated obstacles.\r\n    this.currentFrame = 0;\r\n    this.timer = 0;\r\n  \r\n    this.init(speed);\r\n  }\r\n  \r\n  /**\r\n   * Coefficient for calculating the maximum gap.\r\n   */\r\n  Obstacle.MAX_GAP_COEFFICIENT = 1.5;\r\n  \r\n  /**\r\n   * Maximum obstacle grouping count.\r\n   */\r\n  Obstacle.MAX_OBSTACLE_LENGTH = 3;\r\n  \r\n  \r\n  Obstacle.prototype = {\r\n    /**\r\n     * Initialise the DOM for the obstacle.\r\n     * @param {number} speed\r\n     */\r\n    init(speed) {\r\n      this.cloneCollisionBoxes();\r\n  \r\n      // Only allow sizing if we're at the right speed.\r\n      if (this.size > 1 && this.typeConfig.multipleSpeed > speed) {\r\n        this.size = 1;\r\n      }\r\n  \r\n      this.width = this.typeConfig.width * this.size;\r\n  \r\n      // Check if obstacle can be positioned at various heights.\r\n      if (Array.isArray(this.typeConfig.yPos)) {\r\n        const yPosConfig =\r\n            IS_MOBILE ? this.typeConfig.yPosMobile : this.typeConfig.yPos;\r\n        this.yPos = yPosConfig[getRandomNum(0, yPosConfig.length - 1)];\r\n      } else {\r\n        this.yPos = this.typeConfig.yPos;\r\n      }\r\n  \r\n      this.draw();\r\n  \r\n      // Make collision box adjustments,\r\n      // Central box is adjusted to the size as one box.\r\n      //      ____        ______        ________\r\n      //    _|   |-|    _|     |-|    _|       |-|\r\n      //   | |<->| |   | |<--->| |   | |<----->| |\r\n      //   | | 1 | |   | |  2  | |   | |   3   | |\r\n      //   |_|___|_|   |_|_____|_|   |_|_______|_|\r\n      //\r\n      if (this.size > 1) {\r\n        this.collisionBoxes[1].width = this.width - this.collisionBoxes[0].width -\r\n            this.collisionBoxes[2].width;\r\n        this.collisionBoxes[2].x = this.width - this.collisionBoxes[2].width;\r\n      }\r\n  \r\n      // For obstacles that go at a different speed from the horizon.\r\n      if (this.typeConfig.speedOffset) {\r\n        this.speedOffset = Math.random() > 0.5 ? this.typeConfig.speedOffset :\r\n                                                 -this.typeConfig.speedOffset;\r\n      }\r\n  \r\n      this.gap = this.getGap(this.gapCoefficient, speed);\r\n  \r\n      // Increase gap for audio cues enabled.\r\n      if (Runner.audioCues) {\r\n        this.gap *= 2;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Draw and crop based on size.\r\n     */\r\n    draw() {\r\n      let sourceWidth = this.typeConfig.width;\r\n      let sourceHeight = this.typeConfig.height;\r\n  \r\n      if (IS_HIDPI) {\r\n        sourceWidth = sourceWidth * 2;\r\n        sourceHeight = sourceHeight * 2;\r\n      }\r\n  \r\n      // X position in sprite.\r\n      let sourceX =\r\n          (sourceWidth * this.size) * (0.5 * (this.size - 1)) + this.spritePos.x;\r\n  \r\n      // Animation frames.\r\n      if (this.currentFrame > 0) {\r\n        sourceX += sourceWidth * this.currentFrame;\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(\r\n          this.imageSprite, sourceX, this.spritePos.y, sourceWidth * this.size,\r\n          sourceHeight, this.xPos, this.yPos, this.typeConfig.width * this.size,\r\n          this.typeConfig.height);\r\n    },\r\n  \r\n    /**\r\n     * Obstacle frame update.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    update(deltaTime, speed) {\r\n      if (!this.remove) {\r\n        if (this.typeConfig.speedOffset) {\r\n          speed += this.speedOffset;\r\n        }\r\n        this.xPos -= Math.floor((speed * FPS / 1000) * deltaTime);\r\n  \r\n        // Update frame\r\n        if (this.typeConfig.numFrames) {\r\n          this.timer += deltaTime;\r\n          if (this.timer >= this.typeConfig.frameRate) {\r\n            this.currentFrame =\r\n                this.currentFrame === this.typeConfig.numFrames - 1 ?\r\n                0 :\r\n                this.currentFrame + 1;\r\n            this.timer = 0;\r\n          }\r\n        }\r\n        this.draw();\r\n  \r\n        if (!this.isVisible()) {\r\n          this.remove = true;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Calculate a random gap size.\r\n     * - Minimum gap gets wider as speed increses\r\n     * @param {number} gapCoefficient\r\n     * @param {number} speed\r\n     * @return {number} The gap size.\r\n     */\r\n    getGap(gapCoefficient, speed) {\r\n      const minGap = Math.round(\r\n          this.width * speed + this.typeConfig.minGap * gapCoefficient);\r\n      const maxGap = Math.round(minGap * Obstacle.MAX_GAP_COEFFICIENT);\r\n      return getRandomNum(minGap, maxGap);\r\n    },\r\n  \r\n    /**\r\n     * Check if obstacle is visible.\r\n     * @return {boolean} Whether the obstacle is in the game area.\r\n     */\r\n    isVisible() {\r\n      return this.xPos + this.width > 0;\r\n    },\r\n  \r\n    /**\r\n     * Make a copy of the collision boxes, since these will change based on\r\n     * obstacle type and size.\r\n     */\r\n    cloneCollisionBoxes() {\r\n      const collisionBoxes = this.typeConfig.collisionBoxes;\r\n  \r\n      for (let i = collisionBoxes.length - 1; i >= 0; i--) {\r\n        this.collisionBoxes[i] = new CollisionBox(\r\n            collisionBoxes[i].x, collisionBoxes[i].y, collisionBoxes[i].width,\r\n            collisionBoxes[i].height);\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  /**\r\n   * T-rex game character.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {Object} spritePos Positioning within image sprite.\r\n   * @constructor\r\n   */\r\n  function Trex(canvas, spritePos) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.spritePos = spritePos;\r\n    this.xPos = 0;\r\n    this.yPos = 0;\r\n    this.xInitialPos = 0;\r\n    // Position when on the ground.\r\n    this.groundYPos = 0;\r\n    this.currentFrame = 0;\r\n    this.currentAnimFrames = [];\r\n    this.blinkDelay = 0;\r\n    this.blinkCount = 0;\r\n    this.animStartTime = 0;\r\n    this.timer = 0;\r\n    this.msPerFrame = 1000 / FPS;\r\n    this.config = Object.assign(Trex.config, Trex.normalJumpConfig);\r\n    // Current status.\r\n    this.status = Trex.status.WAITING;\r\n    this.jumping = false;\r\n    this.ducking = false;\r\n    this.jumpVelocity = 0;\r\n    this.reachedMinHeight = false;\r\n    this.speedDrop = false;\r\n    this.jumpCount = 0;\r\n    this.jumpspotX = 0;\r\n    this.altGameModeEnabled = false;\r\n    this.flashing = false;\r\n  \r\n    this.init();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * T-rex player config.\r\n   */\r\n  Trex.config = {\r\n    DROP_VELOCITY: -5,\r\n    FLASH_OFF: 175,\r\n    FLASH_ON: 100,\r\n    HEIGHT: 47,\r\n    HEIGHT_DUCK: 25,\r\n    INTRO_DURATION: 1500,\r\n    SPEED_DROP_COEFFICIENT: 3,\r\n    SPRITE_WIDTH: 262,\r\n    START_X_POS: 50,\r\n    WIDTH: 44,\r\n    WIDTH_DUCK: 59\r\n  };\r\n  \r\n  Trex.slowJumpConfig = {\r\n    GRAVITY: 0.25,\r\n    MAX_JUMP_HEIGHT: 50,\r\n    MIN_JUMP_HEIGHT: 45,\r\n    INITIAL_JUMP_VELOCITY: -20,\r\n  };\r\n  \r\n  Trex.normalJumpConfig = {\r\n    GRAVITY: 0.6,\r\n    MAX_JUMP_HEIGHT: 30,\r\n    MIN_JUMP_HEIGHT: 30,\r\n    INITIAL_JUMP_VELOCITY: -10,\r\n  };\r\n  \r\n  /**\r\n   * Used in collision detection.\r\n   * @enum {Array<CollisionBox>}\r\n   */\r\n  Trex.collisionBoxes = {\r\n    DUCKING: [new CollisionBox(1, 18, 55, 25)],\r\n    RUNNING: [\r\n      new CollisionBox(22, 0, 17, 16), new CollisionBox(1, 18, 30, 9),\r\n      new CollisionBox(10, 35, 14, 8), new CollisionBox(1, 24, 29, 5),\r\n      new CollisionBox(5, 30, 21, 4), new CollisionBox(9, 34, 15, 4)\r\n    ]\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Animation states.\r\n   * @enum {string}\r\n   */\r\n  Trex.status = {\r\n    CRASHED: 'CRASHED',\r\n    DUCKING: 'DUCKING',\r\n    JUMPING: 'JUMPING',\r\n    RUNNING: 'RUNNING',\r\n    WAITING: 'WAITING'\r\n  };\r\n  \r\n  /**\r\n   * Blinking coefficient.\r\n   * @const\r\n   */\r\n  Trex.BLINK_TIMING = 7000;\r\n  \r\n  \r\n  /**\r\n   * Animation config for different states.\r\n   * @enum {Object}\r\n   */\r\n  Trex.animFrames = {\r\n    WAITING: {\r\n      frames: [44, 0],\r\n      msPerFrame: 1000 / 3\r\n    },\r\n    RUNNING: {\r\n      frames: [88, 132],\r\n      msPerFrame: 1000 / 12\r\n    },\r\n    CRASHED: {\r\n      frames: [220],\r\n      msPerFrame: 1000 / 60\r\n    },\r\n    JUMPING: {\r\n      frames: [0],\r\n      msPerFrame: 1000 / 60\r\n    },\r\n    DUCKING: {\r\n      frames: [264, 323],\r\n      msPerFrame: 1000 / 8\r\n    }\r\n  };\r\n  \r\n  \r\n  Trex.prototype = {\r\n    /**\r\n     * T-rex player initaliser.\r\n     * Sets the t-rex to blink at random intervals.\r\n     */\r\n    init() {\r\n      this.groundYPos = Runner.defaultDimensions.HEIGHT - this.config.HEIGHT -\r\n          Runner.config.BOTTOM_PAD;\r\n      this.yPos = this.groundYPos;\r\n      this.minJumpHeight = this.groundYPos - this.config.MIN_JUMP_HEIGHT;\r\n  \r\n      this.draw(0, 0);\r\n      this.update(0, Trex.status.WAITING);\r\n    },\r\n  \r\n    /**\r\n     * Assign the appropriate jump parameters based on the game speed.\r\n     */\r\n    enableSlowConfig: function() {\r\n      const jumpConfig =\r\n          Runner.slowDown ? Trex.slowJumpConfig : Trex.normalJumpConfig;\r\n      Trex.config = Object.assign(Trex.config, jumpConfig);\r\n  \r\n      this.adjustAltGameConfigForSlowSpeed();\r\n    },\r\n  \r\n    /**\r\n     * Enables the alternative game. Redefines the dino config.\r\n     * @param {Object} spritePos New positioning within image sprite.\r\n     */\r\n    enableAltGameMode: function(spritePos) {\r\n      this.altGameModeEnabled = true;\r\n      this.spritePos = spritePos;\r\n      const spriteDefinition = Runner.spriteDefinition['TREX'];\r\n  \r\n      // Update animation frames.\r\n      Trex.animFrames.RUNNING.frames =\r\n          [spriteDefinition.RUNNING_1.x, spriteDefinition.RUNNING_2.x];\r\n      Trex.animFrames.CRASHED.frames = [spriteDefinition.CRASHED.x];\r\n  \r\n      if (typeof spriteDefinition.JUMPING.x == 'object') {\r\n        Trex.animFrames.JUMPING.frames = spriteDefinition.JUMPING.x;\r\n      } else {\r\n        Trex.animFrames.JUMPING.frames = [spriteDefinition.JUMPING.x];\r\n      }\r\n  \r\n      Trex.animFrames.DUCKING.frames =\r\n          [spriteDefinition.RUNNING_1.x, spriteDefinition.RUNNING_2.x];\r\n  \r\n      // Update Trex config\r\n      Trex.config.GRAVITY = spriteDefinition.GRAVITY || Trex.config.GRAVITY;\r\n      Trex.config.HEIGHT = spriteDefinition.RUNNING_1.h,\r\n      Trex.config.INITIAL_JUMP_VELOCITY = spriteDefinition.INITIAL_JUMP_VELOCITY;\r\n      Trex.config.MAX_JUMP_HEIGHT = spriteDefinition.MAX_JUMP_HEIGHT;\r\n      Trex.config.MIN_JUMP_HEIGHT = spriteDefinition.MIN_JUMP_HEIGHT;\r\n      Trex.config.WIDTH = spriteDefinition.RUNNING_1.w;\r\n      Trex.config.WIDTH_JUMP = spriteDefinition.JUMPING.w;\r\n      Trex.config.INVERT_JUMP = spriteDefinition.INVERT_JUMP;\r\n  \r\n      this.adjustAltGameConfigForSlowSpeed(spriteDefinition.GRAVITY);\r\n      this.config = Trex.config;\r\n  \r\n      // Adjust bottom horizon placement.\r\n      this.groundYPos = Runner.defaultDimensions.HEIGHT - this.config.HEIGHT -\r\n          Runner.spriteDefinition['BOTTOM_PAD'];\r\n      this.yPos = this.groundYPos;\r\n      this.reset();\r\n    },\r\n  \r\n    /**\r\n     * Slow speeds adjustments for the alt game modes.\r\n     * @param {number=} opt_gravityValue\r\n     */\r\n    adjustAltGameConfigForSlowSpeed: function(opt_gravityValue) {\r\n      if (Runner.slowDown) {\r\n        if (opt_gravityValue) {\r\n          Trex.config.GRAVITY = opt_gravityValue / 1.5;\r\n        }\r\n        Trex.config.MIN_JUMP_HEIGHT *= 1.5;\r\n        Trex.config.MAX_JUMP_HEIGHT *= 1.5;\r\n        Trex.config.INITIAL_JUMP_VELOCITY =\r\n            Trex.config.INITIAL_JUMP_VELOCITY * 1.5;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Setter whether dino is flashing.\r\n     * @param {boolean} status\r\n     */\r\n    setFlashing: function(status) {\r\n      this.flashing = status;\r\n    },\r\n  \r\n    /**\r\n     * Setter for the jump velocity.\r\n     * The approriate drop velocity is also set.\r\n     * @param {number} setting\r\n     */\r\n    setJumpVelocity(setting) {\r\n      this.config.INITIAL_JUMP_VELOCITY = -setting;\r\n      this.config.DROP_VELOCITY = -setting / 2;\r\n    },\r\n  \r\n    /**\r\n     * Set the animation status.\r\n     * @param {!number} deltaTime\r\n     * @param {Trex.status=} opt_status Optional status to switch to.\r\n     */\r\n    update(deltaTime, opt_status) {\r\n      this.timer += deltaTime;\r\n  \r\n      // Update the status.\r\n      if (opt_status) {\r\n        this.status = opt_status;\r\n        this.currentFrame = 0;\r\n        this.msPerFrame = Trex.animFrames[opt_status].msPerFrame;\r\n        this.currentAnimFrames = Trex.animFrames[opt_status].frames;\r\n  \r\n        if (opt_status === Trex.status.WAITING) {\r\n          this.animStartTime = getTimeStamp();\r\n          this.setBlinkDelay();\r\n        }\r\n      }\r\n      // Game intro animation, T-rex moves in from the left.\r\n      if (this.playingIntro && this.xPos < this.config.START_X_POS) {\r\n        this.xPos += Math.round((this.config.START_X_POS /\r\n            this.config.INTRO_DURATION) * deltaTime);\r\n        this.xInitialPos = this.xPos;\r\n      }\r\n  \r\n      if (this.status === Trex.status.WAITING) {\r\n        this.blink(getTimeStamp());\r\n      } else {\r\n        this.draw(this.currentAnimFrames[this.currentFrame], 0);\r\n      }\r\n  \r\n      // Update the frame position.\r\n      if (!this.flashing && this.timer >= this.msPerFrame) {\r\n        this.currentFrame = this.currentFrame ==\r\n            this.currentAnimFrames.length - 1 ? 0 : this.currentFrame + 1;\r\n        this.timer = 0;\r\n      }\r\n  \r\n      if (!this.altGameModeEnabled) {\r\n        // Speed drop becomes duck if the down key is still being pressed.\r\n        if (this.speedDrop && this.yPos === this.groundYPos) {\r\n          this.speedDrop = false;\r\n          this.setDuck(true);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Draw the t-rex to a particular position.\r\n     * @param {number} x\r\n     * @param {number} y\r\n     */\r\n    draw(x, y) {\r\n      let sourceX = x;\r\n      let sourceY = y;\r\n      let sourceWidth = this.ducking && this.status !== Trex.status.CRASHED ?\r\n          this.config.WIDTH_DUCK :\r\n          this.config.WIDTH;\r\n      let sourceHeight = this.config.HEIGHT;\r\n      const outputHeight = sourceHeight;\r\n  \r\n      let jumpOffset = Runner.spriteDefinition.TREX.JUMPING.xOffset;\r\n  \r\n      // Width of sprite changes on jump.\r\n      if (this.altGameModeEnabled && this.jumping &&\r\n          this.status !== Trex.status.CRASHED) {\r\n        sourceWidth = this.config.WIDTH_JUMP;\r\n      }\r\n  \r\n      if (IS_HIDPI) {\r\n        sourceX *= 2;\r\n        sourceY *= 2;\r\n        sourceWidth *= 2;\r\n        sourceHeight *= 2;\r\n        jumpOffset *= 2;\r\n      }\r\n  \r\n      // Adjustments for sprite sheet position.\r\n      sourceX += this.spritePos.x;\r\n      sourceY += this.spritePos.y;\r\n  \r\n      // Flashing.\r\n      if (this.flashing) {\r\n        if (this.timer < this.config.FLASH_ON) {\r\n          this.canvasCtx.globalAlpha = 0.5;\r\n        } else if (this.timer > this.config.FLASH_OFF) {\r\n          this.timer = 0;\r\n        }\r\n      }\r\n  \r\n      // Ducking.\r\n      if (!this.altGameModeEnabled && this.ducking &&\r\n          this.status !== Trex.status.CRASHED) {\r\n        this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\r\n            sourceWidth, sourceHeight,\r\n            this.xPos, this.yPos,\r\n            this.config.WIDTH_DUCK, outputHeight);\r\n      } else if (\r\n          this.altGameModeEnabled && this.jumping &&\r\n          this.status !== Trex.status.CRASHED) {\r\n        // Jumping with adjustments.\r\n        this.canvasCtx.drawImage(\r\n            Runner.imageSprite, sourceX, sourceY, sourceWidth, sourceHeight,\r\n            this.xPos - jumpOffset, this.yPos, this.config.WIDTH_JUMP,\r\n            outputHeight);\r\n      } else {\r\n        // Crashed whilst ducking. Trex is standing up so needs adjustment.\r\n        if (this.ducking && this.status === Trex.status.CRASHED) {\r\n          this.xPos++;\r\n        }\r\n        // Standing / running\r\n        this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\r\n            sourceWidth, sourceHeight,\r\n            this.xPos, this.yPos,\r\n            this.config.WIDTH, outputHeight);\r\n      }\r\n      this.canvasCtx.globalAlpha = 1;\r\n    },\r\n  \r\n    /**\r\n     * Sets a random time for the blink to happen.\r\n     */\r\n    setBlinkDelay() {\r\n      this.blinkDelay = Math.ceil(Math.random() * Trex.BLINK_TIMING);\r\n    },\r\n  \r\n    /**\r\n     * Make t-rex blink at random intervals.\r\n     * @param {number} time Current time in milliseconds.\r\n     */\r\n    blink(time) {\r\n      const deltaTime = time - this.animStartTime;\r\n  \r\n      if (deltaTime >= this.blinkDelay) {\r\n        this.draw(this.currentAnimFrames[this.currentFrame], 0);\r\n  \r\n        if (this.currentFrame === 1) {\r\n          // Set new random delay to blink.\r\n          this.setBlinkDelay();\r\n          this.animStartTime = time;\r\n          this.blinkCount++;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Initialise a jump.\r\n     * @param {number} speed\r\n     */\r\n    startJump(speed) {\r\n      if (!this.jumping) {\r\n        this.update(0, Trex.status.JUMPING);\r\n        // Tweak the jump velocity based on the speed.\r\n        this.jumpVelocity = this.config.INITIAL_JUMP_VELOCITY - (speed / 10);\r\n        this.jumping = true;\r\n        this.reachedMinHeight = false;\r\n        this.speedDrop = false;\r\n  \r\n        if (this.config.INVERT_JUMP) {\r\n          this.minJumpHeight = this.groundYPos + this.config.MIN_JUMP_HEIGHT;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Jump is complete, falling down.\r\n     */\r\n    endJump() {\r\n      if (this.reachedMinHeight &&\r\n          this.jumpVelocity < this.config.DROP_VELOCITY) {\r\n        this.jumpVelocity = this.config.DROP_VELOCITY;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update frame for a jump.\r\n     * @param {number} deltaTime\r\n     */\r\n    updateJump(deltaTime) {\r\n      const msPerFrame = Trex.animFrames[this.status].msPerFrame;\r\n      const framesElapsed = deltaTime / msPerFrame;\r\n  \r\n      // Speed drop makes Trex fall faster.\r\n      if (this.speedDrop) {\r\n        this.yPos += Math.round(this.jumpVelocity *\r\n            this.config.SPEED_DROP_COEFFICIENT * framesElapsed);\r\n      } else if (this.config.INVERT_JUMP) {\r\n        this.yPos -= Math.round(this.jumpVelocity * framesElapsed);\r\n      } else {\r\n        this.yPos += Math.round(this.jumpVelocity * framesElapsed);\r\n      }\r\n  \r\n      this.jumpVelocity += this.config.GRAVITY * framesElapsed;\r\n  \r\n      // Minimum height has been reached.\r\n      if (this.config.INVERT_JUMP && (this.yPos > this.minJumpHeight) ||\r\n          !this.config.INVERT_JUMP && (this.yPos < this.minJumpHeight) ||\r\n          this.speedDrop) {\r\n        this.reachedMinHeight = true;\r\n      }\r\n  \r\n      // Reached max height.\r\n      if (this.config.INVERT_JUMP && (this.yPos > -this.config.MAX_JUMP_HEIGHT) ||\r\n          !this.config.INVERT_JUMP && (this.yPos < this.config.MAX_JUMP_HEIGHT) ||\r\n          this.speedDrop) {\r\n        this.endJump();\r\n      }\r\n  \r\n      // Back down at ground level. Jump completed.\r\n      if ((this.config.INVERT_JUMP && this.yPos) < this.groundYPos ||\r\n          (!this.config.INVERT_JUMP && this.yPos) > this.groundYPos) {\r\n        this.reset();\r\n        this.jumpCount++;\r\n  \r\n        if (Runner.audioCues) {\r\n          Runner.generatedSoundFx.loopFootSteps();\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Set the speed drop. Immediately cancels the current jump.\r\n     */\r\n    setSpeedDrop() {\r\n      this.speedDrop = true;\r\n      this.jumpVelocity = 1;\r\n    },\r\n  \r\n    /**\r\n     * @param {boolean} isDucking\r\n     */\r\n    setDuck(isDucking) {\r\n      if (isDucking && this.status !== Trex.status.DUCKING) {\r\n        this.update(0, Trex.status.DUCKING);\r\n        this.ducking = true;\r\n      } else if (this.status === Trex.status.DUCKING) {\r\n        this.update(0, Trex.status.RUNNING);\r\n        this.ducking = false;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Reset the t-rex to running at start of game.\r\n     */\r\n    reset() {\r\n      this.xPos = this.xInitialPos;\r\n      this.yPos = this.groundYPos;\r\n      this.jumpVelocity = 0;\r\n      this.jumping = false;\r\n      this.ducking = false;\r\n      this.update(0, Trex.status.RUNNING);\r\n      this.midair = false;\r\n      this.speedDrop = false;\r\n      this.jumpCount = 0;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Handles displaying the distance meter.\r\n   * @param {!HTMLCanvasElement} canvas\r\n   * @param {Object} spritePos Image position in sprite.\r\n   * @param {number} canvasWidth\r\n   * @constructor\r\n   */\r\n  function DistanceMeter(canvas, spritePos, canvasWidth) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.image = Runner.imageSprite;\r\n    this.spritePos = spritePos;\r\n    this.x = 0;\r\n    this.y = 5;\r\n  \r\n    this.currentDistance = 0;\r\n    this.maxScore = 0;\r\n    this.highScore = '0';\r\n    this.container = null;\r\n  \r\n    this.digits = [];\r\n    this.achievement = false;\r\n    this.defaultString = '';\r\n    this.flashTimer = 0;\r\n    this.flashIterations = 0;\r\n    this.invertTrigger = false;\r\n    this.flashingRafId = null;\r\n    this.highScoreBounds = {};\r\n    this.highScoreFlashing = false;\r\n  \r\n    this.config = DistanceMeter.config;\r\n    this.maxScoreUnits = this.config.MAX_DISTANCE_UNITS;\r\n    this.canvasWidth = canvasWidth;\r\n    this.init(canvasWidth);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @enum {number}\r\n   */\r\n  DistanceMeter.dimensions = {\r\n    WIDTH: 10,\r\n    HEIGHT: 13,\r\n    DEST_WIDTH: 11\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Y positioning of the digits in the sprite sheet.\r\n   * X position is always 0.\r\n   * @type {Array<number>}\r\n   */\r\n  DistanceMeter.yPos = [0, 13, 27, 40, 53, 67, 80, 93, 107, 120];\r\n  \r\n  \r\n  /**\r\n   * Distance meter config.\r\n   * @enum {number}\r\n   */\r\n  DistanceMeter.config = {\r\n    // Number of digits.\r\n    MAX_DISTANCE_UNITS: 5,\r\n  \r\n    // Distance that causes achievement animation.\r\n    ACHIEVEMENT_DISTANCE: 100,\r\n  \r\n    // Used for conversion from pixel distance to a scaled unit.\r\n    COEFFICIENT: 0.025,\r\n  \r\n    // Flash duration in milliseconds.\r\n    FLASH_DURATION: 1000 / 4,\r\n  \r\n    // Flash iterations for achievement animation.\r\n    FLASH_ITERATIONS: 3,\r\n  \r\n    // Padding around the high score hit area.\r\n    HIGH_SCORE_HIT_AREA_PADDING: 4\r\n  };\r\n  \r\n  \r\n  DistanceMeter.prototype = {\r\n    /**\r\n     * Initialise the distance meter to '00000'.\r\n     * @param {number} width Canvas width in px.\r\n     */\r\n    init(width) {\r\n      let maxDistanceStr = '';\r\n  \r\n      this.calcXPos(width);\r\n      this.maxScore = this.maxScoreUnits;\r\n      for (let i = 0; i < this.maxScoreUnits; i++) {\r\n        this.draw(i, 0);\r\n        this.defaultString += '0';\r\n        maxDistanceStr += '9';\r\n      }\r\n  \r\n      this.maxScore = parseInt(maxDistanceStr, 10);\r\n    },\r\n  \r\n    /**\r\n     * Calculate the xPos in the canvas.\r\n     * @param {number} canvasWidth\r\n     */\r\n    calcXPos(canvasWidth) {\r\n      this.x = canvasWidth - (DistanceMeter.dimensions.DEST_WIDTH *\r\n          (this.maxScoreUnits + 1));\r\n    },\r\n  \r\n    /**\r\n     * Draw a digit to canvas.\r\n     * @param {number} digitPos Position of the digit.\r\n     * @param {number} value Digit value 0-9.\r\n     * @param {boolean=} opt_highScore Whether drawing the high score.\r\n     */\r\n    draw(digitPos, value, opt_highScore) {\r\n      let sourceWidth = DistanceMeter.dimensions.WIDTH;\r\n      let sourceHeight = DistanceMeter.dimensions.HEIGHT;\r\n      let sourceX = DistanceMeter.dimensions.WIDTH * value;\r\n      let sourceY = 0;\r\n  \r\n      const targetX = digitPos * DistanceMeter.dimensions.DEST_WIDTH;\r\n      const targetY = this.y;\r\n      const targetWidth = DistanceMeter.dimensions.WIDTH;\r\n      const targetHeight = DistanceMeter.dimensions.HEIGHT;\r\n  \r\n      // For high DPI we 2x source values.\r\n      if (IS_HIDPI) {\r\n        sourceWidth *= 2;\r\n        sourceHeight *= 2;\r\n        sourceX *= 2;\r\n      }\r\n  \r\n      sourceX += this.spritePos.x;\r\n      sourceY += this.spritePos.y;\r\n  \r\n      this.canvasCtx.save();\r\n  \r\n      if (IS_RTL) {\r\n        if (opt_highScore) {\r\n          this.canvasCtx.translate(\r\n              this.canvasWidth -\r\n                  (DistanceMeter.dimensions.WIDTH * (this.maxScoreUnits + 3)),\r\n              this.y);\r\n        } else {\r\n          this.canvasCtx.translate(\r\n              this.canvasWidth - DistanceMeter.dimensions.WIDTH, this.y);\r\n        }\r\n        this.canvasCtx.scale(-1, 1);\r\n      } else {\r\n        const highScoreX =\r\n            this.x - (this.maxScoreUnits * 2) * DistanceMeter.dimensions.WIDTH;\r\n        if (opt_highScore) {\r\n          this.canvasCtx.translate(highScoreX, this.y);\r\n        } else {\r\n          this.canvasCtx.translate(this.x, this.y);\r\n        }\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(this.image, sourceX, sourceY,\r\n          sourceWidth, sourceHeight,\r\n          targetX, targetY,\r\n          targetWidth, targetHeight\r\n        );\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Covert pixel distance to a 'real' distance.\r\n     * @param {number} distance Pixel distance ran.\r\n     * @return {number} The 'real' distance ran.\r\n     */\r\n    getActualDistance(distance) {\r\n      return distance ? Math.round(distance * this.config.COEFFICIENT) : 0;\r\n    },\r\n  \r\n    /**\r\n     * Update the distance meter.\r\n     * @param {number} distance\r\n     * @param {number} deltaTime\r\n     * @return {boolean} Whether the acheivement sound fx should be played.\r\n     */\r\n    update(deltaTime, distance) {\r\n      let paint = true;\r\n      let playSound = false;\r\n  \r\n      if (!this.achievement) {\r\n        distance = this.getActualDistance(distance);\r\n        // Score has gone beyond the initial digit count.\r\n        if (distance > this.maxScore && this.maxScoreUnits ==\r\n          this.config.MAX_DISTANCE_UNITS) {\r\n          this.maxScoreUnits++;\r\n          this.maxScore = parseInt(this.maxScore + '9', 10);\r\n        } else {\r\n          this.distance = 0;\r\n        }\r\n  \r\n        if (distance > 0) {\r\n          // Achievement unlocked.\r\n          if (distance % this.config.ACHIEVEMENT_DISTANCE === 0) {\r\n            // Flash score and play sound.\r\n            this.achievement = true;\r\n            this.flashTimer = 0;\r\n            playSound = true;\r\n          }\r\n  \r\n          // Create a string representation of the distance with leading 0.\r\n          const distanceStr = (this.defaultString +\r\n              distance).substr(-this.maxScoreUnits);\r\n          this.digits = distanceStr.split('');\r\n        } else {\r\n          this.digits = this.defaultString.split('');\r\n        }\r\n      } else {\r\n        // Control flashing of the score on reaching acheivement.\r\n        if (this.flashIterations <= this.config.FLASH_ITERATIONS) {\r\n          this.flashTimer += deltaTime;\r\n  \r\n          if (this.flashTimer < this.config.FLASH_DURATION) {\r\n            paint = false;\r\n          } else if (this.flashTimer > this.config.FLASH_DURATION * 2) {\r\n            this.flashTimer = 0;\r\n            this.flashIterations++;\r\n          }\r\n        } else {\r\n          this.achievement = false;\r\n          this.flashIterations = 0;\r\n          this.flashTimer = 0;\r\n        }\r\n      }\r\n  \r\n      // Draw the digits if not flashing.\r\n      if (paint) {\r\n        for (let i = this.digits.length - 1; i >= 0; i--) {\r\n          this.draw(i, parseInt(this.digits[i], 10));\r\n        }\r\n      }\r\n  \r\n      this.drawHighScore();\r\n      return playSound;\r\n    },\r\n  \r\n    /**\r\n     * Draw the high score.\r\n     */\r\n    drawHighScore() {\r\n      if (parseInt(this.highScore, 10) > 0) {\r\n        this.canvasCtx.save();\r\n        this.canvasCtx.globalAlpha = .8;\r\n        for (let i = this.highScore.length - 1; i >= 0; i--) {\r\n          this.draw(i, parseInt(this.highScore[i], 10), true);\r\n        }\r\n        this.canvasCtx.restore();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Set the highscore as a array string.\r\n     * Position of char in the sprite: H - 10, I - 11.\r\n     * @param {number} distance Distance ran in pixels.\r\n     */\r\n    setHighScore(distance) {\r\n      distance = this.getActualDistance(distance);\r\n      const highScoreStr = (this.defaultString +\r\n          distance).substr(-this.maxScoreUnits);\r\n  \r\n      this.highScore = ['10', '11', ''].concat(highScoreStr.split(''));\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Whether a clicked is in the high score area.\r\n     * @param {Event} e Event object.\r\n     * @return {boolean} Whether the click was in the high score bounds.\r\n     */\r\n    hasClickedOnHighScore(e) {\r\n      let x = 0;\r\n      let y = 0;\r\n  \r\n      if (e.touches) {\r\n        // Bounds for touch differ from pointer.\r\n        const canvasBounds = this.canvas.getBoundingClientRect();\r\n        x = e.touches[0].clientX - canvasBounds.left;\r\n        y = e.touches[0].clientY - canvasBounds.top;\r\n      } else {\r\n        x = e.offsetX;\r\n        y = e.offsetY;\r\n      }\r\n  \r\n      this.highScoreBounds = this.getHighScoreBounds();\r\n      return x >= this.highScoreBounds.x && x <=\r\n          this.highScoreBounds.x + this.highScoreBounds.width &&\r\n          y >= this.highScoreBounds.y && y <=\r\n          this.highScoreBounds.y + this.highScoreBounds.height;\r\n    },\r\n  \r\n    /**\r\n     * Get the bounding box for the high score.\r\n     * @return {Object} Object with x, y, width and height properties.\r\n     */\r\n    getHighScoreBounds() {\r\n      return {\r\n        x: (this.x - (this.maxScoreUnits * 2) *\r\n            DistanceMeter.dimensions.WIDTH) -\r\n            DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING,\r\n        y: this.y,\r\n        width: DistanceMeter.dimensions.WIDTH * (this.highScore.length + 1) +\r\n            DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING,\r\n        height: DistanceMeter.dimensions.HEIGHT +\r\n            (DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING * 2)\r\n      };\r\n    },\r\n  \r\n    /**\r\n     * Animate flashing the high score to indicate ready for resetting.\r\n     * The flashing stops following this.config.FLASH_ITERATIONS x 2 flashes.\r\n     */\r\n    flashHighScore() {\r\n      const now = getTimeStamp();\r\n      const deltaTime = now - (this.frameTimeStamp || now);\r\n      let paint = true;\r\n      this.frameTimeStamp = now;\r\n  \r\n      // Reached the max number of flashes.\r\n      if (this.flashIterations > this.config.FLASH_ITERATIONS * 2) {\r\n        this.cancelHighScoreFlashing();\r\n        return;\r\n      }\r\n  \r\n      this.flashTimer += deltaTime;\r\n  \r\n      if (this.flashTimer < this.config.FLASH_DURATION) {\r\n        paint = false;\r\n      } else if (this.flashTimer > this.config.FLASH_DURATION * 2) {\r\n        this.flashTimer = 0;\r\n        this.flashIterations++;\r\n      }\r\n  \r\n      if (paint) {\r\n        this.drawHighScore();\r\n      } else {\r\n        this.clearHighScoreBounds();\r\n      }\r\n      // Frame update.\r\n      this.flashingRafId =\r\n          requestAnimationFrame(this.flashHighScore.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Draw empty rectangle over high score.\r\n     */\r\n    clearHighScoreBounds() {\r\n      this.canvasCtx.save();\r\n      this.canvasCtx.fillStyle = '#fff';\r\n      this.canvasCtx.rect(this.highScoreBounds.x, this.highScoreBounds.y,\r\n          this.highScoreBounds.width, this.highScoreBounds.height);\r\n      this.canvasCtx.fill();\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Starts the flashing of the high score.\r\n     */\r\n    startHighScoreFlashing() {\r\n      this.highScoreFlashing = true;\r\n      this.flashHighScore();\r\n    },\r\n  \r\n    /**\r\n     * Whether high score is flashing.\r\n     * @return {boolean}\r\n     */\r\n    isHighScoreFlashing() {\r\n      return this.highScoreFlashing;\r\n    },\r\n  \r\n    /**\r\n     * Stop flashing the high score.\r\n     */\r\n    cancelHighScoreFlashing() {\r\n      if (this.flashingRafId) {\r\n        cancelAnimationFrame(this.flashingRafId);\r\n      }\r\n      this.flashIterations = 0;\r\n      this.flashTimer = 0;\r\n      this.highScoreFlashing = false;\r\n      this.clearHighScoreBounds();\r\n      this.drawHighScore();\r\n    },\r\n  \r\n    /**\r\n     * Clear the high score.\r\n     */\r\n    resetHighScore() {\r\n      this.setHighScore(0);\r\n      this.cancelHighScoreFlashing();\r\n    },\r\n  \r\n    /**\r\n     * Reset the distance meter back to '00000'.\r\n     */\r\n    reset() {\r\n      this.update(0, 0);\r\n      this.achievement = false;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Cloud background item.\r\n   * Similar to an obstacle object but without collision boxes.\r\n   * @param {HTMLCanvasElement} canvas Canvas element.\r\n   * @param {Object} spritePos Position of image in sprite.\r\n   * @param {number} containerWidth\r\n   * @constructor\r\n   */\r\n  function Cloud(canvas, spritePos, containerWidth) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n    this.spritePos = spritePos;\r\n    this.containerWidth = containerWidth;\r\n    this.xPos = containerWidth;\r\n    this.yPos = 0;\r\n    this.remove = false;\r\n    this.gap =\r\n        getRandomNum(Cloud.config.MIN_CLOUD_GAP, Cloud.config.MAX_CLOUD_GAP);\r\n  \r\n    this.init();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Cloud object config.\r\n   * @enum {number}\r\n   */\r\n  Cloud.config = {\r\n    HEIGHT: 14,\r\n    MAX_CLOUD_GAP: 400,\r\n    MAX_SKY_LEVEL: 30,\r\n    MIN_CLOUD_GAP: 100,\r\n    MIN_SKY_LEVEL: 71,\r\n    WIDTH: 46\r\n  };\r\n  \r\n  \r\n  Cloud.prototype = {\r\n    /**\r\n     * Initialise the cloud. Sets the Cloud height.\r\n     */\r\n    init() {\r\n      this.yPos = getRandomNum(Cloud.config.MAX_SKY_LEVEL,\r\n          Cloud.config.MIN_SKY_LEVEL);\r\n      this.draw();\r\n    },\r\n  \r\n    /**\r\n     * Draw the cloud.\r\n     */\r\n    draw() {\r\n      this.canvasCtx.save();\r\n      let sourceWidth = Cloud.config.WIDTH;\r\n      let sourceHeight = Cloud.config.HEIGHT;\r\n      const outputWidth = sourceWidth;\r\n      const outputHeight = sourceHeight;\r\n      if (IS_HIDPI) {\r\n        sourceWidth = sourceWidth * 2;\r\n        sourceHeight = sourceHeight * 2;\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(Runner.imageSprite, this.spritePos.x,\r\n          this.spritePos.y,\r\n          sourceWidth, sourceHeight,\r\n          this.xPos, this.yPos,\r\n          outputWidth, outputHeight);\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Update the cloud position.\r\n     * @param {number} speed\r\n     */\r\n    update(speed) {\r\n      if (!this.remove) {\r\n        this.xPos -= Math.ceil(speed);\r\n        this.draw();\r\n  \r\n        // Mark as removeable if no longer in the canvas.\r\n        if (!this.isVisible()) {\r\n          this.remove = true;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Check if the cloud is visible on the stage.\r\n     * @return {boolean}\r\n     */\r\n    isVisible() {\r\n      return this.xPos + Cloud.config.WIDTH > 0;\r\n    }\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Background item.\r\n   * Similar to cloud, without random y position.\r\n   * @param {HTMLCanvasElement} canvas Canvas element.\r\n   * @param {Object} spritePos Position of image in sprite.\r\n   * @param {number} containerWidth\r\n   * @param {string} type Element type.\r\n   * @constructor\r\n   */\r\n  function BackgroundEl(canvas, spritePos, containerWidth, type) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n    this.spritePos = spritePos;\r\n    this.containerWidth = containerWidth;\r\n    this.xPos = containerWidth;\r\n    this.yPos = 0;\r\n    this.remove = false;\r\n    this.type = type;\r\n    this.gap =\r\n        getRandomNum(BackgroundEl.config.MIN_GAP, BackgroundEl.config.MAX_GAP);\r\n    this.animTimer = 0;\r\n    this.switchFrames = false;\r\n  \r\n    this.spriteConfig = {};\r\n    this.init();\r\n  }\r\n  \r\n  /**\r\n   * Background element object config.\r\n   * Real values assigned when game type changes.\r\n   * @enum {number}\r\n   */\r\n  BackgroundEl.config = {\r\n    MAX_BG_ELS: 0,\r\n    MAX_GAP: 0,\r\n    MIN_GAP: 0,\r\n    POS: 0,\r\n    SPEED: 0,\r\n    Y_POS: 0,\r\n    MS_PER_FRAME: 0  // only needed when BACKGROUND_EL.FIXED is true\r\n  };\r\n  \r\n  \r\n  BackgroundEl.prototype = {\r\n    /**\r\n     * Initialise the element setting the y position.\r\n     */\r\n    init() {\r\n      this.spriteConfig = Runner.spriteDefinition.BACKGROUND_EL[this.type];\r\n      if (this.spriteConfig.FIXED) {\r\n        this.xPos = this.spriteConfig.FIXED_X_POS;\r\n      }\r\n      this.yPos = BackgroundEl.config.Y_POS - this.spriteConfig.HEIGHT +\r\n          this.spriteConfig.OFFSET;\r\n      this.draw();\r\n    },\r\n  \r\n    /**\r\n     * Draw the element.\r\n     */\r\n    draw() {\r\n      this.canvasCtx.save();\r\n      let sourceWidth = this.spriteConfig.WIDTH;\r\n      let sourceHeight = this.spriteConfig.HEIGHT;\r\n      let sourceX = this.spriteConfig.X_POS;\r\n      const outputWidth = sourceWidth;\r\n      const outputHeight = sourceHeight;\r\n  \r\n      if (IS_HIDPI) {\r\n        sourceWidth *= 2;\r\n        sourceHeight *= 2;\r\n        sourceX *= 2;\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(\r\n          Runner.imageSprite, sourceX, this.spritePos.y, sourceWidth,\r\n          sourceHeight, this.xPos, this.yPos, outputWidth, outputHeight);\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Update the background element position.\r\n     * @param {number} speed\r\n     */\r\n    update(speed) {\r\n      if (!this.remove) {\r\n        if (this.spriteConfig.FIXED) {\r\n          this.animTimer += speed;\r\n          if (this.animTimer > BackgroundEl.config.MS_PER_FRAME) {\r\n            this.animTimer = 0;\r\n            this.switchFrames = !this.switchFrames;\r\n          }\r\n  \r\n          if (this.spriteConfig.FIXED_Y_POS_1 &&\r\n              this.spriteConfig.FIXED_Y_POS_2) {\r\n            this.yPos = this.switchFrames ? this.spriteConfig.FIXED_Y_POS_1 :\r\n                                            this.spriteConfig.FIXED_Y_POS_2;\r\n          }\r\n        } else {\r\n          // Fixed speed, regardless of actual game speed.\r\n          this.xPos -= BackgroundEl.config.SPEED;\r\n        }\r\n        this.draw();\r\n  \r\n        // Mark as removable if no longer in the canvas.\r\n        if (!this.isVisible()) {\r\n          this.remove = true;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Check if the element is visible on the stage.\r\n     * @return {boolean}\r\n     */\r\n    isVisible() {\r\n      return this.xPos + this.spriteConfig.WIDTH > 0;\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Nightmode shows a moon and stars on the horizon.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {number} spritePos\r\n   * @param {number} containerWidth\r\n   * @constructor\r\n   */\r\n  function NightMode(canvas, spritePos, containerWidth) {\r\n    this.spritePos = spritePos;\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.xPos = containerWidth - 50;\r\n    this.yPos = 30;\r\n    this.currentPhase = 0;\r\n    this.opacity = 0;\r\n    this.containerWidth = containerWidth;\r\n    this.stars = [];\r\n    this.drawStars = false;\r\n    this.placeStars();\r\n  }\r\n  \r\n  /**\r\n   * @enum {number}\r\n   */\r\n  NightMode.config = {\r\n    FADE_SPEED: 0.035,\r\n    HEIGHT: 40,\r\n    MOON_SPEED: 0.25,\r\n    NUM_STARS: 2,\r\n    STAR_SIZE: 9,\r\n    STAR_SPEED: 0.3,\r\n    STAR_MAX_Y: 70,\r\n    WIDTH: 20\r\n  };\r\n  \r\n  NightMode.phases = [140, 120, 100, 60, 40, 20, 0];\r\n  \r\n  NightMode.prototype = {\r\n    /**\r\n     * Update moving moon, changing phases.\r\n     * @param {boolean} activated Whether night mode is activated.\r\n     */\r\n    update(activated) {\r\n      // Moon phase.\r\n      if (activated && this.opacity === 0) {\r\n        this.currentPhase++;\r\n  \r\n        if (this.currentPhase >= NightMode.phases.length) {\r\n          this.currentPhase = 0;\r\n        }\r\n      }\r\n  \r\n      // Fade in / out.\r\n      if (activated && (this.opacity < 1 || this.opacity === 0)) {\r\n        this.opacity += NightMode.config.FADE_SPEED;\r\n      } else if (this.opacity > 0) {\r\n        this.opacity -= NightMode.config.FADE_SPEED;\r\n      }\r\n  \r\n      // Set moon positioning.\r\n      if (this.opacity > 0) {\r\n        this.xPos = this.updateXPos(this.xPos, NightMode.config.MOON_SPEED);\r\n  \r\n        // Update stars.\r\n        if (this.drawStars) {\r\n          for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\r\n            this.stars[i].x =\r\n                this.updateXPos(this.stars[i].x, NightMode.config.STAR_SPEED);\r\n          }\r\n        }\r\n        this.draw();\r\n      } else {\r\n        this.opacity = 0;\r\n        this.placeStars();\r\n      }\r\n      this.drawStars = true;\r\n    },\r\n  \r\n    updateXPos(currentPos, speed) {\r\n      if (currentPos < -NightMode.config.WIDTH) {\r\n        currentPos = this.containerWidth;\r\n      } else {\r\n        currentPos -= speed;\r\n      }\r\n      return currentPos;\r\n    },\r\n  \r\n    draw() {\r\n      let moonSourceWidth = this.currentPhase === 3 ? NightMode.config.WIDTH * 2 :\r\n                                                      NightMode.config.WIDTH;\r\n      let moonSourceHeight = NightMode.config.HEIGHT;\r\n      let moonSourceX = this.spritePos.x + NightMode.phases[this.currentPhase];\r\n      const moonOutputWidth = moonSourceWidth;\r\n      let starSize = NightMode.config.STAR_SIZE;\r\n      let starSourceX = Runner_spriteDefinitionByType.original.LDPI.STAR.x;\r\n  \r\n      if (IS_HIDPI) {\r\n        moonSourceWidth *= 2;\r\n        moonSourceHeight *= 2;\r\n        moonSourceX = this.spritePos.x +\r\n            (NightMode.phases[this.currentPhase] * 2);\r\n        starSize *= 2;\r\n        starSourceX = Runner_spriteDefinitionByType.original.HDPI.STAR.x;\r\n      }\r\n  \r\n      this.canvasCtx.save();\r\n      this.canvasCtx.globalAlpha = this.opacity;\r\n  \r\n      // Stars.\r\n      if (this.drawStars) {\r\n        for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\r\n          this.canvasCtx.drawImage(\r\n              Runner.origImageSprite, starSourceX, this.stars[i].sourceY,\r\n              starSize, starSize, Math.round(this.stars[i].x), this.stars[i].y,\r\n              NightMode.config.STAR_SIZE, NightMode.config.STAR_SIZE);\r\n        }\r\n      }\r\n  \r\n      // Moon.\r\n      this.canvasCtx.drawImage(\r\n          Runner.origImageSprite, moonSourceX, this.spritePos.y, moonSourceWidth,\r\n          moonSourceHeight, Math.round(this.xPos), this.yPos, moonOutputWidth,\r\n          NightMode.config.HEIGHT);\r\n  \r\n      this.canvasCtx.globalAlpha = 1;\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    // Do star placement.\r\n    placeStars() {\r\n      const segmentSize = Math.round(this.containerWidth /\r\n          NightMode.config.NUM_STARS);\r\n  \r\n      for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\r\n        this.stars[i] = {};\r\n        this.stars[i].x = getRandomNum(segmentSize * i, segmentSize * (i + 1));\r\n        this.stars[i].y = getRandomNum(0, NightMode.config.STAR_MAX_Y);\r\n  \r\n        if (IS_HIDPI) {\r\n          this.stars[i].sourceY =\r\n              Runner_spriteDefinitionByType.original.HDPI.STAR.y +\r\n              NightMode.config.STAR_SIZE * 2 * i;\r\n        } else {\r\n          this.stars[i].sourceY =\r\n              Runner_spriteDefinitionByType.original.LDPI.STAR.y +\r\n              NightMode.config.STAR_SIZE * i;\r\n        }\r\n      }\r\n    },\r\n  \r\n    reset() {\r\n      this.currentPhase = 0;\r\n      this.opacity = 0;\r\n      this.update(false);\r\n    }\r\n  \r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Horizon Line.\r\n   * Consists of two connecting lines. Randomly assigns a flat / bumpy horizon.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {Object} lineConfig Configuration object.\r\n   * @constructor\r\n   */\r\n  function HorizonLine(canvas, lineConfig) {\r\n    let sourceX = lineConfig.SOURCE_X;\r\n    let sourceY = lineConfig.SOURCE_Y;\r\n  \r\n    if (IS_HIDPI) {\r\n      sourceX *= 2;\r\n      sourceY *= 2;\r\n    }\r\n  \r\n    this.spritePos = {x: sourceX, y: sourceY};\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.sourceDimensions = {};\r\n    this.dimensions = lineConfig;\r\n  \r\n    this.sourceXPos = [this.spritePos.x, this.spritePos.x +\r\n        this.dimensions.WIDTH];\r\n    this.xPos = [];\r\n    this.yPos = 0;\r\n    this.bumpThreshold = 0.5;\r\n  \r\n    this.setSourceDimensions(lineConfig);\r\n    this.draw();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Horizon line dimensions.\r\n   * @enum {number}\r\n   */\r\n  HorizonLine.dimensions = {\r\n    WIDTH: 600,\r\n    HEIGHT: 12,\r\n    YPOS: 127\r\n  };\r\n  \r\n  \r\n  HorizonLine.prototype = {\r\n    /**\r\n     * Set the source dimensions of the horizon line.\r\n     */\r\n    setSourceDimensions(newDimensions) {\r\n      for (const dimension in newDimensions) {\r\n        if (dimension !== 'SOURCE_X' && dimension !== 'SOURCE_Y') {\r\n          if (IS_HIDPI) {\r\n            if (dimension !== 'YPOS') {\r\n              this.sourceDimensions[dimension] = newDimensions[dimension] * 2;\r\n            }\r\n          } else {\r\n            this.sourceDimensions[dimension] = newDimensions[dimension];\r\n          }\r\n          this.dimensions[dimension] = newDimensions[dimension];\r\n        }\r\n      }\r\n  \r\n      this.xPos = [0, newDimensions.WIDTH];\r\n      this.yPos = newDimensions.YPOS;\r\n    },\r\n  \r\n    /**\r\n     * Return the crop x position of a type.\r\n     */\r\n    getRandomType() {\r\n      return Math.random() > this.bumpThreshold ? this.dimensions.WIDTH : 0;\r\n    },\r\n  \r\n    /**\r\n     * Draw the horizon line.\r\n     */\r\n    draw() {\r\n      this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[0],\r\n          this.spritePos.y,\r\n          this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\r\n          this.xPos[0], this.yPos,\r\n          this.dimensions.WIDTH, this.dimensions.HEIGHT);\r\n  \r\n      this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[1],\r\n          this.spritePos.y,\r\n          this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\r\n          this.xPos[1], this.yPos,\r\n          this.dimensions.WIDTH, this.dimensions.HEIGHT);\r\n    },\r\n  \r\n    /**\r\n     * Update the x position of an indivdual piece of the line.\r\n     * @param {number} pos Line position.\r\n     * @param {number} increment\r\n     */\r\n    updateXPos(pos, increment) {\r\n      const line1 = pos;\r\n      const line2 = pos === 0 ? 1 : 0;\r\n  \r\n      this.xPos[line1] -= increment;\r\n      this.xPos[line2] = this.xPos[line1] + this.dimensions.WIDTH;\r\n  \r\n      if (this.xPos[line1] <= -this.dimensions.WIDTH) {\r\n        this.xPos[line1] += this.dimensions.WIDTH * 2;\r\n        this.xPos[line2] = this.xPos[line1] - this.dimensions.WIDTH;\r\n        this.sourceXPos[line1] = this.getRandomType() + this.spritePos.x;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update the horizon line.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    update(deltaTime, speed) {\r\n      const increment = Math.floor(speed * (FPS / 1000) * deltaTime);\r\n  \r\n      if (this.xPos[0] <= 0) {\r\n        this.updateXPos(0, increment);\r\n      } else {\r\n        this.updateXPos(1, increment);\r\n      }\r\n      this.draw();\r\n    },\r\n  \r\n    /**\r\n     * Reset horizon to the starting position.\r\n     */\r\n    reset() {\r\n      this.xPos[0] = 0;\r\n      this.xPos[1] = this.dimensions.WIDTH;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Horizon background class.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {Object} spritePos Sprite positioning.\r\n   * @param {Object} dimensions Canvas dimensions.\r\n   * @param {number} gapCoefficient\r\n   * @constructor\r\n   */\r\n  function Horizon(canvas, spritePos, dimensions, gapCoefficient) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n    this.config = Horizon.config;\r\n    this.dimensions = dimensions;\r\n    this.gapCoefficient = gapCoefficient;\r\n    this.obstacles = [];\r\n    this.obstacleHistory = [];\r\n    this.horizonOffsets = [0, 0];\r\n    this.cloudFrequency = this.config.CLOUD_FREQUENCY;\r\n    this.spritePos = spritePos;\r\n    this.nightMode = null;\r\n    this.altGameModeActive = false;\r\n  \r\n    // Cloud\r\n    this.clouds = [];\r\n    this.cloudSpeed = this.config.BG_CLOUD_SPEED;\r\n  \r\n    // Background elements\r\n    this.backgroundEls = [];\r\n    this.lastEl = null;\r\n    this.backgroundSpeed = this.config.BG_CLOUD_SPEED;\r\n  \r\n    // Horizon\r\n    this.horizonLine = null;\r\n    this.horizonLines = [];\r\n    this.init();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Horizon config.\r\n   * @enum {number}\r\n   */\r\n  Horizon.config = {\r\n    BG_CLOUD_SPEED: 0.2,\r\n    BUMPY_THRESHOLD: .3,\r\n    CLOUD_FREQUENCY: .5,\r\n    HORIZON_HEIGHT: 16,\r\n    MAX_CLOUDS: 6\r\n  };\r\n  \r\n  \r\n  Horizon.prototype = {\r\n    /**\r\n     * Initialise the horizon. Just add the line and a cloud. No obstacles.\r\n     */\r\n    init() {\r\n      Obstacle.types = Runner_spriteDefinitionByType.original.OBSTACLES;\r\n      // Obstacle.types[0].yPos = 100;\r\n      //       Obstacle.types[0].xPos = 350;  //@jsikka\r\n      //       console.log(Obstacle.types[0].yPos);\r\n      //       console.log(Obstacle.types[0].xPos);\r\n      this.addCloud();\r\n      // Multiple Horizon lines\r\n      for (let i = 0; i < Runner.spriteDefinition.LINES.length; i++) {\r\n        this.horizonLines.push(\r\n            new HorizonLine(this.canvas, Runner.spriteDefinition.LINES[i]));\r\n      }\r\n  \r\n      this.nightMode = new NightMode(this.canvas, this.spritePos.MOON,\r\n          this.dimensions.WIDTH);\r\n    },\r\n  \r\n    /**\r\n     * Update obstacle definitions based on the speed of the game.\r\n     */\r\n    adjustObstacleSpeed: function() {\r\n      for (let i = 0; i < Obstacle.types.length; i++) {\r\n        if (Runner.slowDown) {\r\n          Obstacle.types[i].multipleSpeed = Obstacle.types[i].multipleSpeed / 2;\r\n          Obstacle.types[i].minGap *= 1.5;\r\n          Obstacle.types[i].minSpeed = Obstacle.types[i].minSpeed / 2;\r\n  \r\n          // Convert variable y position obstacles to fixed.\r\n          if (typeof (Obstacle.types[i].yPos) == 'object') {\r\n            Obstacle.types[i].yPos = Obstacle.types[i].yPos[0];\r\n            // Obstacle.types[i].xPos = 350;  //@jsikka\r\n            // console.log(Obstacle.types[i].yPos);\r\n            // console.log(Obstacle.types[i].xPos);\r\n            Obstacle.types[i].yPosMobile = Obstacle.types[i].yPos[0];\r\n          }\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update sprites to correspond to change in sprite sheet.\r\n     * @param {number} spritePos\r\n     */\r\n    enableAltGameMode: function(spritePos) {\r\n      // Clear existing horizon objects.\r\n      this.clouds = [];\r\n      this.backgroundEls = [];\r\n  \r\n      this.altGameModeActive = true;\r\n      this.spritePos = spritePos;\r\n  \r\n      Obstacle.types = Runner.spriteDefinition.OBSTACLES;\r\n      this.adjustObstacleSpeed();\r\n  \r\n      Obstacle.MAX_GAP_COEFFICIENT = Runner.spriteDefinition.MAX_GAP_COEFFICIENT;\r\n      Obstacle.MAX_OBSTACLE_LENGTH = Runner.spriteDefinition.MAX_OBSTACLE_LENGTH;\r\n  \r\n      BackgroundEl.config = Runner.spriteDefinition.BACKGROUND_EL_CONFIG;\r\n  \r\n      this.horizonLines = [];\r\n      for (let i = 0; i < Runner.spriteDefinition.LINES.length; i++) {\r\n        this.horizonLines.push(\r\n            new HorizonLine(this.canvas, Runner.spriteDefinition.LINES[i]));\r\n      }\r\n      this.reset();\r\n    },\r\n  \r\n    /**\r\n     * @param {number} deltaTime\r\n     * @param {number} currentSpeed\r\n     * @param {boolean} updateObstacles Used as an override to prevent\r\n     *     the obstacles from being updated / added. This happens in the\r\n     *     ease in section.\r\n     * @param {boolean} showNightMode Night mode activated.\r\n     */\r\n    update(deltaTime, currentSpeed, updateObstacles, showNightMode) {\r\n      // console.log(\"Here?\");\r\n      this.runningTime += deltaTime;\r\n  \r\n      if (this.altGameModeActive) {\r\n        this.updateBackgroundEls(deltaTime, currentSpeed);\r\n      }\r\n  \r\n      for (let i = 0; i < this.horizonLines.length; i++) {\r\n        this.horizonLines[i].update(deltaTime, currentSpeed);\r\n      }\r\n  \r\n      if (!this.altGameModeActive || Runner.spriteDefinition.HAS_CLOUDS) {\r\n        this.nightMode.update(showNightMode);\r\n        this.updateClouds(deltaTime, currentSpeed);\r\n      }\r\n  \r\n      if (updateObstacles) {\r\n        this.updateObstacles(deltaTime, currentSpeed);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update background element positions. Also handles creating new elements.\r\n     * @param {number} elSpeed\r\n     * @param {Array<Object>} bgElArray\r\n     * @param {number} maxBgEl\r\n     * @param {Function} bgElAddFunction\r\n     * @param {number} frequency\r\n     */\r\n    updateBackgroundEl(elSpeed, bgElArray, maxBgEl, bgElAddFunction, frequency) {\r\n      const numElements = bgElArray.length;\r\n  \r\n      if (numElements) {\r\n        for (let i = numElements - 1; i >= 0; i--) {\r\n          bgElArray[i].update(elSpeed);\r\n        }\r\n  \r\n        const lastEl = bgElArray[numElements - 1];\r\n  \r\n        // Check for adding a new element.\r\n        if (numElements < maxBgEl &&\r\n            (this.dimensions.WIDTH - lastEl.xPos) > lastEl.gap &&\r\n            frequency > Math.random()) {\r\n          bgElAddFunction();\r\n        }\r\n      } else {\r\n        bgElAddFunction();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update the cloud positions.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    updateClouds(deltaTime, speed) {\r\n      const elSpeed = this.cloudSpeed / 1000 * deltaTime * speed;\r\n      this.updateBackgroundEl(\r\n          elSpeed, this.clouds, this.config.MAX_CLOUDS, this.addCloud.bind(this),\r\n          this.cloudFrequency);\r\n  \r\n      // Remove expired elements.\r\n      this.clouds = this.clouds.filter((obj) => !obj.remove);\r\n    },\r\n  \r\n    /**\r\n     * Update the background element positions.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    updateBackgroundEls(deltaTime, speed) {\r\n      this.updateBackgroundEl(\r\n          deltaTime, this.backgroundEls, BackgroundEl.config.MAX_BG_ELS,\r\n          this.addBackgroundEl.bind(this), this.cloudFrequency);\r\n  \r\n      // Remove expired elements.\r\n      this.backgroundEls = this.backgroundEls.filter((obj) => !obj.remove);\r\n    },\r\n  \r\n    /**\r\n     * Update the obstacle positions.\r\n     * @param {number} deltaTime\r\n     * @param {number} currentSpeed\r\n     */\r\n    updateObstacles(deltaTime, currentSpeed) {\r\n      // console.log(this.obstacles);\r\n      if(this.obstacles.length > 0 ){\r\n      this.obstacles[0].typeConfig.xPos = 300;\r\n      this.obstacles[0].typeConfig.yPos = 80;}\r\n      const updatedObstacles = this.obstacles.slice(0);\r\n    \r\n      for (let i = 0; i < this.obstacles.length; i++) {\r\n        const obstacle = this.obstacles[i];\r\n        obstacle.update(deltaTime, currentSpeed);\r\n  \r\n        // Clean up existing obstacles.\r\n        if (obstacle.remove) {\r\n          updatedObstacles.shift();\r\n        }\r\n      }\r\n      this.obstacles = updatedObstacles;\r\n  \r\n      if (this.obstacles.length > 0) {\r\n        const lastObstacle = this.obstacles[this.obstacles.length - 1];\r\n  \r\n        if (lastObstacle && !lastObstacle.followingObstacleCreated &&\r\n            lastObstacle.isVisible() &&\r\n            (lastObstacle.xPos + lastObstacle.width + lastObstacle.gap) <\r\n            this.dimensions.WIDTH) {\r\n          this.addNewObstacle(currentSpeed);\r\n          lastObstacle.followingObstacleCreated = true;\r\n        }\r\n      } else {\r\n        // Create new obstacles.\r\n        this.addNewObstacle(currentSpeed);\r\n      }\r\n    },\r\n  \r\n    removeFirstObstacle() {\r\n      this.obstacles.shift();\r\n    },\r\n  \r\n    /**\r\n     * Add a new obstacle.\r\n     * @param {number} currentSpeed\r\n     */\r\n    addNewObstacle(currentSpeed) {\r\n      const obstacleCount =\r\n          Runner.isAltGameModeEnabled() && !this.altGameModeActive ||\r\n              this.altGameModeActive ?\r\n          Obstacle.types.length - 1 :\r\n          Obstacle.types.length - 2;\r\n      const obstacleTypeIndex =\r\n          obstacleCount > 0 ? getRandomNum(0, obstacleCount) : 0;\r\n      const obstacleType = Obstacle.types[obstacleTypeIndex];\r\n  \r\n      // Check for multiples of the same type of obstacle.\r\n      // Also check obstacle is available at current speed.\r\n      if ((obstacleCount > 0 && this.duplicateObstacleCheck(obstacleType.type)) ||\r\n          currentSpeed < obstacleType.minSpeed) {\r\n        this.addNewObstacle(currentSpeed);\r\n      } else {\r\n        const obstacleSpritePos = this.spritePos[obstacleType.type];\r\n  \r\n        this.obstacles.push(new Obstacle(\r\n            this.canvasCtx, obstacleType, obstacleSpritePos, this.dimensions,\r\n            this.gapCoefficient, currentSpeed, obstacleType.width,\r\n            this.altGameModeActive));\r\n  \r\n        this.obstacleHistory.unshift(obstacleType.type);\r\n  \r\n        if (this.obstacleHistory.length > 1) {\r\n          this.obstacleHistory.splice(Runner.config.MAX_OBSTACLE_DUPLICATION);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Returns whether the previous two obstacles are the same as the next one.\r\n     * Maximum duplication is set in config value MAX_OBSTACLE_DUPLICATION.\r\n     * @return {boolean}\r\n     */\r\n    duplicateObstacleCheck(nextObstacleType) {\r\n      let duplicateCount = 0;\r\n  \r\n      for (let i = 0; i < this.obstacleHistory.length; i++) {\r\n        duplicateCount =\r\n            this.obstacleHistory[i] === nextObstacleType ? duplicateCount + 1 : 0;\r\n      }\r\n      return duplicateCount >= Runner.config.MAX_OBSTACLE_DUPLICATION;\r\n    },\r\n  \r\n    /**\r\n     * Reset the horizon layer.\r\n     * Remove existing obstacles and reposition the horizon line.\r\n     */\r\n    reset() {\r\n      this.obstacles = [];\r\n      for (let l = 0; l < this.horizonLines.length; l++) {\r\n        this.horizonLines[l].reset();\r\n      }\r\n  \r\n      this.nightMode.reset();\r\n    },\r\n  \r\n    /**\r\n     * Update the canvas width and scaling.\r\n     * @param {number} width Canvas width.\r\n     * @param {number} height Canvas height.\r\n     */\r\n    resize(width, height) {\r\n      this.canvas.width = width;\r\n      this.canvas.height = height;\r\n    },\r\n  \r\n    /**\r\n     * Add a new cloud to the horizon.\r\n     */\r\n    addCloud() {\r\n      this.clouds.push(new Cloud(this.canvas, this.spritePos.CLOUD,\r\n          this.dimensions.WIDTH));\r\n    },\r\n  \r\n    /**\r\n     * Add a random background element to the horizon.\r\n     */\r\n    addBackgroundEl() {\r\n      const backgroundElTypes =\r\n          Object.keys(Runner.spriteDefinition.BACKGROUND_EL);\r\n  \r\n      if (backgroundElTypes.length > 0) {\r\n        let index = getRandomNum(0, backgroundElTypes.length - 1);\r\n        let type = backgroundElTypes[index];\r\n  \r\n        // Add variation if available.\r\n        while (type == this.lastEl && backgroundElTypes.length > 1) {\r\n          index = getRandomNum(0, backgroundElTypes.length - 1);\r\n          type = backgroundElTypes[index];\r\n        }\r\n  \r\n        this.lastEl = type;\r\n        this.backgroundEls.push(new BackgroundEl(\r\n            this.canvas, this.spritePos.BACKGROUND_EL, this.dimensions.WIDTH,\r\n            type));\r\n      }\r\n    }\r\n  };"]}