{"version":3,"sources":["offline.js","offline-sprite-definitions.js"],"names":["Runner","outerContainerId","opt_config","console","log","instance_","outerContainerEl","document","querySelector","containerEl","snackbarEl","touchController","config","Object","assign","normalConfig","dimensions","defaultDimensions","gameType","spriteDefinition","Runner_spriteDefinitionByType","altGameImageSprite","altGameModeActive","altGameModeFlashTimer","fadeInTimer","canvas","canvasCtx","tRex","distanceMeter","distanceRan","highestScore","syncHighestScore","time","runningTime","msPerFrame","FPS","currentSpeed","SPEED","slowDown","obstacles","activated","playing","crashed","paused","inverted","invertTimer","resizeTimerId_","playCount","audioBuffer","soundFx","generatedSoundFx","audioContext","images","imagesLoaded","pollingGamepads","gamepadIndex","undefined","previousGamepad","isDisabled","setupDisabledRunner","isAltGameModeEnabled","initAltGameType","loadImages","window","initializeHighScore","bind","DEFAULT_WIDTH","IS_HIDPI","devicePixelRatio","IS_IOS","test","navigator","userAgent","IS_MOBILE","IS_RTL","dir","ARCADE_MODE_URL","RESOURCE_POSTFIX","A11Y_STRINGS","ariaLabel","description","gameOver","highScore","jump","started","speedLabel","AUDIOCUE_PROXIMITY_THRESHOLD","AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y","BG_CLOUD_SPEED","BOTTOM_PAD","CANVAS_IN_VIEW_OFFSET","CLEAR_TIME","CLOUD_FREQUENCY","FADE_DURATION","FLASH_DURATION","GAMEOVER_CLEAR_TIME","INITIAL_JUMP_VELOCITY","INVERT_FADE_DURATION","MAX_BLINK_COUNT","MAX_CLOUDS","MAX_OBSTACLE_LENGTH","MAX_OBSTACLE_DUPLICATION","RESOURCE_TEMPLATE_ID","SPEED_DROP_COEFFICIENT","ARCADE_MODE_INITIAL_TOP_POSITION","ARCADE_MODE_TOP_POSITION_PERCENT","ACCELERATION","GAP_COEFFICIENT","INVERT_DISTANCE","MAX_SPEED","MOBILE_SPEED_COEFFICIENT","slowConfig","WIDTH","HEIGHT","classes","ARCADE_MODE","CANVAS","CONTAINER","CRASHED","ICON","INVERTED","SNACKBAR","SNACKBAR_SHOW","TOUCH_CONTROLLER","sounds","BUTTON_PRESS","HIT","SCORE","keycodes","JUMP","DUCK","RESTART","events","ANIM_END","CLICK","KEYDOWN","KEYUP","POINTERDOWN","POINTERUP","RESIZE","TOUCHEND","TOUCHSTART","VISIBILITY","BLUR","FOCUS","LOAD","GAMEPADCONNECTED","prototype","GAME_TYPE","length","createElement","className","appendChild","addEventListener","e","keyCode","classList","add","updateConfigSetting","setting","value","setJumpVelocity","setSpeed","createImageElement","resourceName","imgSrc","el","id","src","getElementById","scale","spriteDef","LDPI","HDPI","imageSprite","altCommonImageSprite","origImageSprite","complete","init","loadSounds","AudioContext","resourceTemplate","content","sound","soundSrc","substr","indexOf","buffer","decodeBase64ToArrayBuffer","decodeAudioData","index","audioData","opt_speed","speed","mobileSpeed","style","visibility","adjustDimensions","getA11yString","setAttribute","createCanvas","a11yStatusEl","textContent","slowSpeedCheckboxLabel","slowSpeedCheckbox","slowSpeedToggleEl","announcePhrase","GeneratedSoundFx","getContext","fillStyle","fill","updateCanvasScaling","horizon","Horizon","DistanceMeter","TEXT_SPRITE","Trex","TREX","startListening","update","debounceResize","darkModeMediaQuery","matchMedia","isDarkMode","matches","addListener","createTouchController","setInterval","clearInterval","boxStyles","getComputedStyle","padding","Number","paddingLeft","offsetWidth","isArcadeMode","Math","min","setArcadeModeContainerScale","width","height","calcXPos","clearCanvas","ceil","stop","draw","gameOverPanel","updateDimensions","playIntro","playingIntro","keyframes","styleSheets","insertRule","startGame","webkitAnimation","setPlayStatus","restart","setArcadeMode","toggleSpeed","background","audioCues","onVisibilityChange","clearRect","isCanvasInView","getBoundingClientRect","top","enableAltGameMode","updatePending","now","getTimeStamp","deltaTime","setFlashing","globalAlpha","jumping","updateJump","hasObstacles","jumpCount","showNightMode","collision","checkForCollision","jumpObstacle","typeConfig","type","jumpAlerted","threshold","isMobileMouseInput","adjProximityThreshold","log10","xPos","removeFirstObstacle","collect","playAchievementSound","playSound","invertTrigger","invert","actualDistance","getActualDistance","blinkCount","scheduleNextUpdate","handleEvent","evtType","onKeyDown","onKeyUp","onGamepadConnected","handleCanvasKeyPress","preventScrolling","preventDefault","speedChange","checked","updatedConfig","enableSlowConfig","adjustObstacleSpeed","disableSpeedToggle","showSpeedToggle","isFocusEvent","toggle","HIDDEN_CLASS","disable","removeAttribute","stopListening","removeEventListener","target","pointerType","activeElement","errorPageController","trackEasterEgg","ducking","cancelFootSteps","startJump","setSpeedDrop","setDuck","String","isjumpKey","isRunning","endJump","speedDrop","isLeftClickOnCanvas","handleGameOverClicks","reset","play","pollGamepadState","gamepads","getGamepads","pollActiveGamepad","requestAnimationFrame","pollForActiveGamepad","i","buttons","pressed","gamepad","pollGamepadButton","buttonIndex","state","previousState","KeyboardEvent","dispatchEvent","hasClickedOnHighScore","isHighScoreFlashing","saveHighScore","resetHighScore","startHighScoreFlashing","cancelHighScoreFlashing","button","raqId","updateEasterEggHighScore","setHighScore","opt_resetScore","resetEasterEggHighScore","vibrate","achievement","status","origSpriteDef","original","GameOverPanel","ALT_GAME_END","innerHTML","toString","stopAll","replace","cancelAnimationFrame","RUNNING","remove","flashTimer","isPlaying","title","body","windowHeight","innerHeight","scaleHeight","scaleWidth","innerWidth","max","scaledCanvasHeight","translateY","cssScale","transform","hidden","webkitHidden","visibilityState","soundBuffer","sourceNode","createBufferSource","connect","destination","start","htmlEl","firstElementChild","opt_width","opt_height","context","floor","backingStoreRatio","webkitBackingStorePixelRatio","ratio","oldWidth","oldHeight","panner","webkitAudioContext","onstatechange","resume","createStereoPanner","playNote","frequency","startTime","duration","opt_vol","opt_pan","osc1","createOscillator","osc2","volume","createGain","gain","pan","setValueAtTime","linearRampToValueAtTime","currentTime","loopFootSteps","bgSoundIntervalId","speakPhrase","phrase","msg","SpeechSynthesisUtterance","voices","speechSynthesis","getVoices","text","speak","stringName","getRandomNum","random","container","opt_classname","base64String","len","str","atob","arrayBuffer","ArrayBuffer","bytes","Uint8Array","charCodeAt","Date","getTime","performance","textImgPos","restartImgPos","opt_altGameEndImgPos","opt_altGameActive","canvasDimensions","altGameEndImgPos","frameTimeStamp","animTimer","currentFrame","gameOverRafId","flashCounter","originalText","RESTART_ANIM_DURATION","LOGO_PAUSE_DURATION","FLASH_ITERATIONS","animConfig","frames","TEXT_X","TEXT_Y","TEXT_WIDTH","TEXT_HEIGHT","RESTART_WIDTH","RESTART_HEIGHT","drawGameOverText","opt_useAltText","centerX","textSourceX","textSourceY","textSourceWidth","textSourceHeight","textTargetX","round","textTargetY","textTargetWidth","textTargetHeight","x","y","spriteSource","save","translate","drawImage","restore","drawAltGameElements","ALT_GAME_END_CONFIG","altGameEndConfig","altGameEndSourceWidth","altGameEndSourceHeight","altGameEndTargetX","X_OFFSET","altGameEndTargetY","yPos","Y_OFFSET","drawRestartButton","framePosX","restartSourceWidth","restartSourceHeight","restartTargetX","restartTargetY","opt_altGameModeActive","opt_tRex","ALT_GAME_OVER_TEXT_CONFIG","altTextConfig","clearGameOverTextBounds","obstacle","opt_canvasCtx","obstacleBoxXPos","tRexBox","CollisionBox","obstacleBox","size","drawCollisionBoxes","boxCompare","collisionBoxes","tRexCollisionBoxes","COLLISION_BOXES","DUCKING","t","adjTrexBox","createAdjustedCollisionBox","adjObstacleBox","box","adjustment","strokeStyle","strokeRect","tRexBoxX","tRexBoxY","obstacleBoxX","obstacleBoxY","w","h","Obstacle","spriteImgPos","gapCoefficient","opt_xOffset","opt_isAltGameMode","spritePos","gap","speedOffset","timer","MAX_GAP_COEFFICIENT","cloneCollisionBoxes","multipleSpeed","Array","isArray","yPosConfig","yPosMobile","getGap","sourceWidth","sourceHeight","sourceX","numFrames","frameRate","isVisible","minGap","maxGap","xInitialPos","groundYPos","currentAnimFrames","blinkDelay","animStartTime","normalJumpConfig","WAITING","jumpVelocity","reachedMinHeight","jumpspotX","altGameModeEnabled","flashing","DROP_VELOCITY","FLASH_OFF","FLASH_ON","HEIGHT_DUCK","INTRO_DURATION","SPRITE_WIDTH","START_X_POS","WIDTH_DUCK","slowJumpConfig","GRAVITY","MAX_JUMP_HEIGHT","MIN_JUMP_HEIGHT","JUMPING","BLINK_TIMING","animFrames","minJumpHeight","jumpConfig","adjustAltGameConfigForSlowSpeed","RUNNING_1","RUNNING_2","WIDTH_JUMP","INVERT_JUMP","opt_gravityValue","opt_status","setBlinkDelay","blink","sourceY","outputHeight","jumpOffset","xOffset","framesElapsed","isDucking","midair","canvasWidth","image","currentDistance","maxScore","digits","defaultString","flashIterations","flashingRafId","highScoreBounds","highScoreFlashing","maxScoreUnits","MAX_DISTANCE_UNITS","DEST_WIDTH","ACHIEVEMENT_DISTANCE","COEFFICIENT","HIGH_SCORE_HIT_AREA_PADDING","maxDistanceStr","parseInt","digitPos","opt_highScore","targetX","targetY","targetWidth","targetHeight","highScoreX","distance","paint","distanceStr","split","drawHighScore","highScoreStr","concat","touches","canvasBounds","clientX","left","clientY","offsetX","offsetY","getHighScoreBounds","flashHighScore","clearHighScoreBounds","rect","Cloud","containerWidth","MIN_CLOUD_GAP","MAX_CLOUD_GAP","MAX_SKY_LEVEL","MIN_SKY_LEVEL","outputWidth","BackgroundEl","MIN_GAP","MAX_GAP","switchFrames","spriteConfig","MAX_BG_ELS","POS","Y_POS","MS_PER_FRAME","BACKGROUND_EL","FIXED","FIXED_X_POS","OFFSET","X_POS","FIXED_Y_POS_1","FIXED_Y_POS_2","NightMode","currentPhase","opacity","stars","drawStars","placeStars","FADE_SPEED","MOON_SPEED","NUM_STARS","STAR_SIZE","STAR_SPEED","STAR_MAX_Y","phases","updateXPos","currentPos","moonSourceWidth","moonSourceHeight","moonSourceX","moonOutputWidth","starSize","starSourceX","STAR","segmentSize","HorizonLine","lineConfig","SOURCE_X","SOURCE_Y","sourceDimensions","sourceXPos","bumpThreshold","setSourceDimensions","YPOS","newDimensions","dimension","getRandomType","pos","increment","line1","line2","obstacleHistory","horizonOffsets","cloudFrequency","nightMode","clouds","cloudSpeed","backgroundEls","lastEl","backgroundSpeed","horizonLine","horizonLines","BUMPY_THRESHOLD","HORIZON_HEIGHT","types","OBSTACLES","addCloud","LINES","push","MOON","minSpeed","BACKGROUND_EL_CONFIG","updateObstacles","updateBackgroundEls","HAS_CLOUDS","updateClouds","updateBackgroundEl","elSpeed","bgElArray","maxBgEl","bgElAddFunction","numElements","filter","obj","addBackgroundEl","updatedObstacles","slice","shift","lastObstacle","followingObstacleCreated","addNewObstacle","obstacleCount","obstacleTypeIndex","obstacleType","duplicateObstacleCheck","obstacleSpritePos","unshift","splice","nextObstacleType","duplicateCount","l","resize","CLOUD","backgroundElTypes","keys","ObstacleType","CACTUS_LARGE","CACTUS_SMALL","OBSTACLE_2","OBSTACLE","HORIZON","PTERODACTYL","COLLECTABLE","WAITING_1","WAITING_2"],"mappings":"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","file":"offline-sprite-definitions.2c5ba578.js","sourceRoot":"../src","sourcesContent":["// Copyright (c) 2014 The Chromium Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport {Runner_spriteDefinitionByType} from \"./offline-sprite-definitions\";\r\n\r\n/**\r\n * T-Rex runner.\r\n * @param {string} outerContainerId Outer containing element id.\r\n * @param {!Object=} opt_config\r\n * @constructor\r\n * @implements {EventListener}\r\n * @export\r\n */\r\n export function Runner(outerContainerId, opt_config) {\r\n    // Singleton\r\n    console.log(\"??\");\r\n    if (Runner.instance_) {\r\n      return Runner.instance_;\r\n    }\r\n    Runner.instance_ = this;\r\n  \r\n    this.outerContainerEl = document.querySelector(outerContainerId);\r\n    this.containerEl = null;\r\n    this.snackbarEl = null;\r\n    // A div to intercept touch events. Only set while (playing && useTouch).\r\n    this.touchController = null;\r\n  \r\n    this.config = opt_config || Object.assign(Runner.config, Runner.normalConfig);\r\n    // Logical dimensions of the container.\r\n    this.dimensions = Runner.defaultDimensions;\r\n  \r\n    this.gameType = null;\r\n    Runner.spriteDefinition = Runner_spriteDefinitionByType['original'];\r\n  \r\n    this.altGameImageSprite = null;\r\n    this.altGameModeActive = false;\r\n    this.altGameModeFlashTimer = null;\r\n    this.fadeInTimer = 0;\r\n  \r\n    this.canvas = null;\r\n    this.canvasCtx = null;\r\n  \r\n    this.tRex = null;\r\n  \r\n    this.distanceMeter = null;\r\n    this.distanceRan = 0;\r\n  \r\n    this.highestScore = 0;\r\n    this.syncHighestScore = false;\r\n  \r\n    this.time = 0;\r\n    this.runningTime = 0;\r\n    this.msPerFrame = 1000 / FPS;\r\n    this.currentSpeed = this.config.SPEED;\r\n    Runner.slowDown = false;\r\n  \r\n    this.obstacles = [];\r\n  \r\n    this.activated = false; // Whether the easter egg has been activated.\r\n    this.playing = false; // Whether the game is currently in play state.\r\n    this.crashed = false;\r\n    this.paused = false;\r\n    this.inverted = false;\r\n    this.invertTimer = 0;\r\n    this.resizeTimerId_ = null;\r\n  \r\n    this.playCount = 0;\r\n  \r\n    // Sound FX.\r\n    this.audioBuffer = null;\r\n  \r\n    /** @type {Object} */\r\n    this.soundFx = {};\r\n    this.generatedSoundFx = null;\r\n  \r\n    // Global web audio context for playing sounds.\r\n    this.audioContext = null;\r\n  \r\n    // Images.\r\n    this.images = {};\r\n    this.imagesLoaded = 0;\r\n  \r\n    // Gamepad state.\r\n    this.pollingGamepads = false;\r\n    this.gamepadIndex = undefined;\r\n    this.previousGamepad = null;\r\n  \r\n    if (this.isDisabled()) {\r\n      this.setupDisabledRunner();\r\n    } else {\r\n      if (Runner.isAltGameModeEnabled()) {\r\n        this.initAltGameType();\r\n        Runner.gameType = this.gameType;\r\n      }\r\n      this.loadImages();\r\n  \r\n      window['initializeEasterEggHighScore'] =\r\n          this.initializeHighScore.bind(this);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Default game width.\r\n   * @const\r\n   */\r\n  const DEFAULT_WIDTH = 600;\r\n  \r\n  /**\r\n   * Frames per second.\r\n   * @const\r\n   */\r\n  const FPS = 60;\r\n  \r\n  /** @const */\r\n  const IS_HIDPI = window.devicePixelRatio > 1;\r\n  \r\n  /** @const */\r\n  const IS_IOS = /CriOS/.test(window.navigator.userAgent);\r\n  \r\n  /** @const */\r\n  const IS_MOBILE = /Android/.test(window.navigator.userAgent) || IS_IOS;\r\n  \r\n  /** @const */\r\n  const IS_RTL = document.querySelector('html').dir == 'rtl';\r\n  \r\n  /** @const */\r\n  const ARCADE_MODE_URL = 'chrome://dino/';\r\n  \r\n  /** @const */\r\n  const RESOURCE_POSTFIX = 'offline-resources-';\r\n  \r\n  /** @const */\r\n  const A11Y_STRINGS = {\r\n    ariaLabel: 'dinoGameA11yAriaLabel',\r\n    description: 'dinoGameA11yDescription',\r\n    gameOver: 'dinoGameA11yGameOver',\r\n    highScore: 'dinoGameA11yHighScore',\r\n    jump: 'dinoGameA11yJump',\r\n    started: 'dinoGameA11yStartGame',\r\n    speedLabel: 'dinoGameA11ySpeedToggle'\r\n  };\r\n  \r\n  /**\r\n   * Default game configuration.\r\n   * Shared config for all  versions of the game. Additional parameters are\r\n   * defined in Runner.normalConfig and Runner.slowConfig.\r\n   */\r\n  Runner.config = {\r\n    AUDIOCUE_PROXIMITY_THRESHOLD: 190,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 250,\r\n    BG_CLOUD_SPEED: 0.2,\r\n    BOTTOM_PAD: 10,\r\n    // Scroll Y threshold at which the game can be activated.\r\n    CANVAS_IN_VIEW_OFFSET: -10,\r\n    CLEAR_TIME: 3000,\r\n    CLOUD_FREQUENCY: 0.5,\r\n    FADE_DURATION: 1,\r\n    FLASH_DURATION: 1000,\r\n    GAMEOVER_CLEAR_TIME: 1200,\r\n    INITIAL_JUMP_VELOCITY: 12,\r\n    INVERT_FADE_DURATION: 12000,\r\n    MAX_BLINK_COUNT: 3,\r\n    MAX_CLOUDS: 6,\r\n    MAX_OBSTACLE_LENGTH: 3,\r\n    MAX_OBSTACLE_DUPLICATION: 2,\r\n    RESOURCE_TEMPLATE_ID: 'audio-resources',\r\n    SPEED: 6,\r\n    SPEED_DROP_COEFFICIENT: 3,\r\n    ARCADE_MODE_INITIAL_TOP_POSITION: 35,\r\n    ARCADE_MODE_TOP_POSITION_PERCENT: 0.1\r\n  };\r\n  \r\n  Runner.normalConfig = {\r\n    ACCELERATION: 0.001,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD: 190,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 250,\r\n    GAP_COEFFICIENT: 0.6,\r\n    INVERT_DISTANCE: 700,\r\n    MAX_SPEED: 13,\r\n    MOBILE_SPEED_COEFFICIENT: 1.2,\r\n    SPEED: 6\r\n  };\r\n  \r\n  \r\n  Runner.slowConfig = {\r\n    ACCELERATION: 0.0005,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD: 170,\r\n    AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y: 220,\r\n    GAP_COEFFICIENT: 0.3,\r\n    INVERT_DISTANCE: 350,\r\n    MAX_SPEED: 9,\r\n    MOBILE_SPEED_COEFFICIENT: 1.5,\r\n    SPEED: 4.2\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Default dimensions.\r\n   */\r\n  Runner.defaultDimensions = {\r\n    WIDTH: DEFAULT_WIDTH,\r\n    HEIGHT: 150\r\n  };\r\n  \r\n  \r\n  /**\r\n   * CSS class names.\r\n   * @enum {string}\r\n   */\r\n  Runner.classes = {\r\n    ARCADE_MODE: 'arcade-mode',\r\n    CANVAS: 'runner-canvas',\r\n    CONTAINER: 'runner-container',\r\n    CRASHED: 'crashed',\r\n    ICON: 'icon-offline',\r\n    INVERTED: 'inverted',\r\n    SNACKBAR: 'snackbar',\r\n    SNACKBAR_SHOW: 'snackbar-show',\r\n    TOUCH_CONTROLLER: 'controller'\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Sound FX. Reference to the ID of the audio tag on interstitial page.\r\n   * @enum {string}\r\n   */\r\n  Runner.sounds = {\r\n    BUTTON_PRESS: 'offline-sound-press',\r\n    HIT: 'offline-sound-hit',\r\n    SCORE: 'offline-sound-reached'\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Key code mapping.\r\n   * @enum {Object}\r\n   */\r\n  Runner.keycodes = {\r\n    JUMP: {'38': 1, '32': 1},  // Up, spacebar\r\n    DUCK: {'40': 1},  // Down\r\n    RESTART: {'13': 1}  // Enter\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Runner event names.\r\n   * @enum {string}\r\n   */\r\n  Runner.events = {\r\n    ANIM_END: 'webkitAnimationEnd',\r\n    CLICK: 'click',\r\n    KEYDOWN: 'keydown',\r\n    KEYUP: 'keyup',\r\n    POINTERDOWN: 'pointerdown',\r\n    POINTERUP: 'pointerup',\r\n    RESIZE: 'resize',\r\n    TOUCHEND: 'touchend',\r\n    TOUCHSTART: 'touchstart',\r\n    VISIBILITY: 'visibilitychange',\r\n    BLUR: 'blur',\r\n    FOCUS: 'focus',\r\n    LOAD: 'load',\r\n    GAMEPADCONNECTED: 'gamepadconnected',\r\n  };\r\n  \r\n  Runner.prototype = {\r\n    /**\r\n     * Initialize alternative game type.\r\n     */\r\n    initAltGameType() {\r\n      if (GAME_TYPE.length > 0) {\r\n        // this.gameType = loadTimeData && loadTimeData.valueExists('altGameType') ?\r\n        //     GAME_TYPE[parseInt(loadTimeData.getValue('altGameType'), 10) - 1] :\r\n        //     '';\r\n        this.gameType = '';\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Whether the easter egg has been disabled. CrOS enterprise enrolled devices.\r\n     * @return {boolean}\r\n     */\r\n    isDisabled() {\r\n      // return loadTimeData && loadTimeData.valueExists('disabledEasterEgg');\r\n      return false;\r\n    },\r\n  \r\n    /**\r\n     * For disabled instances, set up a snackbar with the disabled message.\r\n     */\r\n    setupDisabledRunner() {\r\n      this.containerEl = document.createElement('div');\r\n      this.containerEl.className = Runner.classes.SNACKBAR;\r\n      // this.containerEl.textContent = loadTimeData.getValue('disabledEasterEgg');\r\n      this.outerContainerEl.appendChild(this.containerEl);\r\n  \r\n      // Show notification when the activation key is pressed.\r\n      document.addEventListener(Runner.events.KEYDOWN, function(e) {\r\n        if (Runner.keycodes.JUMP[e.keyCode]) {\r\n          this.containerEl.classList.add(Runner.classes.SNACKBAR_SHOW);\r\n          document.querySelector('.icon').classList.add('icon-disabled');\r\n        }\r\n      }.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Setting individual settings for debugging.\r\n     * @param {string} setting\r\n     * @param {number|string} value\r\n     */\r\n    updateConfigSetting(setting, value) {\r\n      if (setting in this.config && value !== undefined) {\r\n        this.config[setting] = value;\r\n  \r\n        switch (setting) {\r\n          case 'GRAVITY':\r\n          case 'MIN_JUMP_HEIGHT':\r\n          case 'SPEED_DROP_COEFFICIENT':\r\n            this.tRex.config[setting] = value;\r\n            break;\r\n          case 'INITIAL_JUMP_VELOCITY':\r\n            this.tRex.setJumpVelocity(value);\r\n            break;\r\n          case 'SPEED':\r\n            this.setSpeed(/** @type {number} */ (value));\r\n            break;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Creates an on page image element from the base 64 encoded string source.\r\n     * @param {string} resourceName Name in data object,\r\n     * @return {HTMLImageElement} The created element.\r\n     */\r\n    createImageElement(resourceName) {\r\n      // const imgSrc = loadTimeData && loadTimeData.valueExists(resourceName) ?\r\n      //     loadTimeData.getString(resourceName) :\r\n      //     null;\r\n      const imgSrc = null;\r\n  \r\n      if (imgSrc) {\r\n        const el =\r\n            /** @type {HTMLImageElement} */ (document.createElement('img'));\r\n        el.id = resourceName;\r\n        el.src = imgSrc;\r\n        document.getElementById('offline-resources').appendChild(el);\r\n        return el;\r\n      }\r\n      return null;\r\n    },\r\n  \r\n    /**\r\n     * Cache the appropriate image sprite from the page and get the sprite sheet\r\n     * definition.\r\n     */\r\n    loadImages() {\r\n      let scale = '1x';\r\n      this.spriteDef = Runner.spriteDefinition.LDPI;\r\n      if (IS_HIDPI) {\r\n        scale = '2x';\r\n        this.spriteDef = Runner.spriteDefinition.HDPI;\r\n      }\r\n  \r\n      Runner.imageSprite = /** @type {HTMLImageElement} */\r\n          (document.getElementById(RESOURCE_POSTFIX + scale));\r\n  \r\n      if (this.gameType) {\r\n        Runner.altGameImageSprite = /** @type {HTMLImageElement} */\r\n            (this.createImageElement('altGameSpecificImage' + scale));\r\n        Runner.altCommonImageSprite = /** @type {HTMLImageElement} */\r\n            (this.createImageElement('altGameCommonImage' + scale));\r\n      }\r\n      Runner.origImageSprite = Runner.imageSprite;\r\n  \r\n      // Disable the alt game mode if the sprites can't be loaded.\r\n      if (!Runner.altGameImageSprite || !Runner.altCommonImageSprite) {\r\n        Runner.isAltGameModeEnabled = () => false;\r\n        this.altGameModeActive = false;\r\n      }\r\n  \r\n      if (Runner.imageSprite.complete) {\r\n        this.init();\r\n      } else {\r\n        // If the images are not yet loaded, add a listener.\r\n        Runner.imageSprite.addEventListener(Runner.events.LOAD,\r\n            this.init.bind(this));\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Load and decode base 64 encoded sounds.\r\n     */\r\n    loadSounds() {\r\n      if (!IS_IOS) {\r\n        this.audioContext = new AudioContext();\r\n  \r\n        const resourceTemplate =\r\n            document.getElementById(this.config.RESOURCE_TEMPLATE_ID).content;\r\n  \r\n        for (const sound in Runner.sounds) {\r\n          let soundSrc =\r\n              resourceTemplate.getElementById(Runner.sounds[sound]).src;\r\n          soundSrc = soundSrc.substr(soundSrc.indexOf(',') + 1);\r\n          const buffer = decodeBase64ToArrayBuffer(soundSrc);\r\n  \r\n          // Async, so no guarantee of order in array.\r\n          this.audioContext.decodeAudioData(buffer, function(index, audioData) {\r\n              this.soundFx[index] = audioData;\r\n            }.bind(this, sound));\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Sets the game speed. Adjust the speed accordingly if on a smaller screen.\r\n     * @param {number=} opt_speed\r\n     */\r\n    setSpeed(opt_speed) {\r\n      const speed = opt_speed || this.currentSpeed;\r\n  \r\n      // Reduce the speed on smaller mobile screens.\r\n      if (this.dimensions.WIDTH < DEFAULT_WIDTH) {\r\n        const mobileSpeed = Runner.slowDown ? speed :\r\n                                              speed * this.dimensions.WIDTH /\r\n                DEFAULT_WIDTH * this.config.MOBILE_SPEED_COEFFICIENT;\r\n        this.currentSpeed = mobileSpeed > speed ? speed : mobileSpeed;\r\n      } else if (opt_speed) {\r\n        this.currentSpeed = opt_speed;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Game initialiser.\r\n     */\r\n    init() {\r\n      // Hide the static icon.\r\n      document.querySelector('.' + Runner.classes.ICON).style.visibility =\r\n          'hidden';\r\n  \r\n      this.adjustDimensions();\r\n      this.setSpeed();\r\n  \r\n      const ariaLabel = getA11yString(A11Y_STRINGS.ariaLabel);\r\n      this.containerEl = document.createElement('div');\r\n      this.containerEl.setAttribute('role', IS_MOBILE ? 'button' : 'application');\r\n      this.containerEl.setAttribute('tabindex', '0');\r\n      this.containerEl.setAttribute('title', ariaLabel);\r\n  \r\n      this.containerEl.className = Runner.classes.CONTAINER;\r\n  \r\n      // Player canvas container.\r\n      this.canvas = createCanvas(this.containerEl, this.dimensions.WIDTH,\r\n          this.dimensions.HEIGHT);\r\n  \r\n      // Live region for game status updates.\r\n      this.a11yStatusEl = document.createElement('span');\r\n      this.a11yStatusEl.className = 'offline-runner-live-region';\r\n      this.a11yStatusEl.setAttribute('aria-live', 'assertive');\r\n      this.a11yStatusEl.textContent = '';\r\n      Runner.a11yStatusEl = this.a11yStatusEl;\r\n  \r\n      // Add checkbox to slow down the game.\r\n      this.slowSpeedCheckboxLabel = document.createElement('label');\r\n      this.slowSpeedCheckboxLabel.className = 'slow-speed-option hidden';\r\n      this.slowSpeedCheckboxLabel.textContent =\r\n          getA11yString(A11Y_STRINGS.speedLabel);\r\n  \r\n      this.slowSpeedCheckbox = document.createElement('input');\r\n      this.slowSpeedCheckbox.setAttribute('type', 'checkbox');\r\n      this.slowSpeedCheckbox.setAttribute(\r\n          'title', getA11yString(A11Y_STRINGS.speedLabel));\r\n      this.slowSpeedCheckbox.setAttribute('tabindex', '0');\r\n      this.slowSpeedCheckbox.setAttribute('checked', 'checked');\r\n  \r\n      this.slowSpeedToggleEl = document.createElement('span');\r\n      this.slowSpeedToggleEl.className = 'slow-speed-toggle';\r\n  \r\n      this.slowSpeedCheckboxLabel.appendChild(this.slowSpeedCheckbox);\r\n      this.slowSpeedCheckboxLabel.appendChild(this.slowSpeedToggleEl);\r\n  \r\n      if (IS_IOS) {\r\n        this.outerContainerEl.appendChild(this.a11yStatusEl);\r\n      } else {\r\n        this.containerEl.appendChild(this.a11yStatusEl);\r\n      }\r\n  \r\n      announcePhrase(getA11yString(A11Y_STRINGS.description));\r\n  \r\n      this.generatedSoundFx = new GeneratedSoundFx();\r\n  \r\n      this.canvasCtx =\r\n          /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n      this.canvasCtx.fillStyle = '#f7f7f7';\r\n      this.canvasCtx.fill();\r\n      Runner.updateCanvasScaling(this.canvas);\r\n  \r\n      // Horizon contains clouds, obstacles and the ground.\r\n      this.horizon = new Horizon(this.canvas, this.spriteDef, this.dimensions,\r\n          this.config.GAP_COEFFICIENT);\r\n  \r\n      // Distance meter\r\n      this.distanceMeter = new DistanceMeter(this.canvas,\r\n            this.spriteDef.TEXT_SPRITE, this.dimensions.WIDTH);\r\n  \r\n      // Draw t-rex\r\n      this.tRex = new Trex(this.canvas, this.spriteDef.TREX);\r\n  \r\n      this.outerContainerEl.appendChild(this.containerEl);\r\n      this.outerContainerEl.appendChild(this.slowSpeedCheckboxLabel);\r\n  \r\n      this.startListening();\r\n      // console.log(this.currentFrame);\r\n      // console.log(this.typeConfig.numFrames);\r\n      // console.log(deltaTime);\r\n      this.update();\r\n  \r\n      window.addEventListener(Runner.events.RESIZE,\r\n          this.debounceResize.bind(this));\r\n  \r\n      // Handle dark mode\r\n      const darkModeMediaQuery =\r\n          window.matchMedia('(prefers-color-scheme: dark)');\r\n      this.isDarkMode = darkModeMediaQuery && darkModeMediaQuery.matches;\r\n      darkModeMediaQuery.addListener((e) => {\r\n        this.isDarkMode = e.matches;\r\n      });\r\n    },\r\n  \r\n    /**\r\n     * Create the touch controller. A div that covers whole screen.\r\n     */\r\n    createTouchController() {\r\n      this.touchController = document.createElement('div');\r\n      this.touchController.className = Runner.classes.TOUCH_CONTROLLER;\r\n      this.touchController.addEventListener(Runner.events.TOUCHSTART, this);\r\n      this.touchController.addEventListener(Runner.events.TOUCHEND, this);\r\n      this.outerContainerEl.appendChild(this.touchController);\r\n    },\r\n  \r\n    /**\r\n     * Debounce the resize event.\r\n     */\r\n    debounceResize() {\r\n      if (!this.resizeTimerId_) {\r\n        this.resizeTimerId_ =\r\n            setInterval(this.adjustDimensions.bind(this), 250);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Adjust game space dimensions on resize.\r\n     */\r\n    adjustDimensions() {\r\n      clearInterval(this.resizeTimerId_);\r\n      this.resizeTimerId_ = null;\r\n  \r\n      const boxStyles = window.getComputedStyle(this.outerContainerEl);\r\n      const padding = Number(boxStyles.paddingLeft.substr(0,\r\n          boxStyles.paddingLeft.length - 2));\r\n  \r\n      this.dimensions.WIDTH = this.outerContainerEl.offsetWidth - padding * 2;\r\n      if (this.isArcadeMode()) {\r\n        this.dimensions.WIDTH = Math.min(DEFAULT_WIDTH, this.dimensions.WIDTH);\r\n        if (this.activated) {\r\n          this.setArcadeModeContainerScale();\r\n        }\r\n      }\r\n  \r\n      // Redraw the elements back onto the canvas.\r\n      if (this.canvas) {\r\n        this.canvas.width = this.dimensions.WIDTH;\r\n        this.canvas.height = this.dimensions.HEIGHT;\r\n  \r\n        Runner.updateCanvasScaling(this.canvas);\r\n  \r\n        this.distanceMeter.calcXPos(this.dimensions.WIDTH);\r\n        this.clearCanvas();\r\n        this.horizon.update(0, 0, true);\r\n        this.tRex.update(0);\r\n  \r\n        // Outer container and distance meter.\r\n        if (this.playing || this.crashed || this.paused) {\r\n          this.containerEl.style.width = this.dimensions.WIDTH + 'px';\r\n          this.containerEl.style.height = this.dimensions.HEIGHT + 'px';\r\n          this.distanceMeter.update(0, Math.ceil(this.distanceRan));\r\n          this.stop();\r\n        } else {\r\n          this.tRex.draw(0, 0);\r\n        }\r\n  \r\n        // Game over panel.\r\n        if (this.crashed && this.gameOverPanel) {\r\n          this.gameOverPanel.updateDimensions(this.dimensions.WIDTH);\r\n          this.gameOverPanel.draw(this.altGameModeActive, this.tRex);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Play the game intro.\r\n     * Canvas container width expands out to the full width.\r\n     */\r\n    playIntro() {\r\n      if (!this.activated && !this.crashed) {\r\n        this.playingIntro = true;\r\n        this.tRex.playingIntro = true;\r\n  \r\n        // CSS animation definition.\r\n        const keyframes = '@-webkit-keyframes intro { ' +\r\n              'from { width:' + Trex.config.WIDTH + 'px }' +\r\n              'to { width: ' + this.dimensions.WIDTH + 'px }' +\r\n            '}';\r\n        document.styleSheets[0].insertRule(keyframes, 0);\r\n  \r\n        this.containerEl.addEventListener(Runner.events.ANIM_END,\r\n            this.startGame.bind(this));\r\n  \r\n        this.containerEl.style.webkitAnimation = 'intro .4s ease-out 1 both';\r\n        this.containerEl.style.width = this.dimensions.WIDTH + 'px';\r\n  \r\n        this.setPlayStatus(true);\r\n        this.activated = true;\r\n      } else if (this.crashed) {\r\n        this.restart();\r\n      }\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Update the game status to started.\r\n     */\r\n    startGame() {\r\n      if (this.isArcadeMode()) {\r\n        this.setArcadeMode();\r\n      }\r\n      this.toggleSpeed();\r\n      this.runningTime = 0;\r\n      this.playingIntro = false;\r\n      this.tRex.playingIntro = false;\r\n      this.containerEl.style.webkitAnimation = '';\r\n      this.playCount++;\r\n      this.generatedSoundFx.background();\r\n      announcePhrase(getA11yString(A11Y_STRINGS.started));\r\n  \r\n      if (Runner.audioCues) {\r\n        this.containerEl.setAttribute('title', getA11yString(A11Y_STRINGS.jump));\r\n      }\r\n  \r\n      // Handle tabbing off the page. Pause the current game.\r\n      document.addEventListener(Runner.events.VISIBILITY,\r\n            this.onVisibilityChange.bind(this));\r\n  \r\n      window.addEventListener(Runner.events.BLUR,\r\n            this.onVisibilityChange.bind(this));\r\n  \r\n      window.addEventListener(Runner.events.FOCUS,\r\n            this.onVisibilityChange.bind(this));\r\n    },\r\n  \r\n    clearCanvas() {\r\n      this.canvasCtx.clearRect(0, 0, this.dimensions.WIDTH,\r\n          this.dimensions.HEIGHT);\r\n    },\r\n  \r\n    /**\r\n     * Checks whether the canvas area is in the viewport of the browser\r\n     * through the current scroll position.\r\n     * @return boolean.\r\n     */\r\n    isCanvasInView() {\r\n      return this.containerEl.getBoundingClientRect().top >\r\n          Runner.config.CANVAS_IN_VIEW_OFFSET;\r\n    },\r\n  \r\n    /**\r\n     * Enable the alt game mode. Switching out the sprites.\r\n     */\r\n    enableAltGameMode() {\r\n      Runner.imageSprite = Runner.altGameImageSprite;\r\n      Runner.spriteDefinition = Runner_spriteDefinitionByType[Runner.gameType];\r\n  \r\n      if (IS_HIDPI) {\r\n        this.spriteDef = Runner.spriteDefinition.HDPI;\r\n      } else {\r\n        this.spriteDef = Runner.spriteDefinition.LDPI;\r\n      }\r\n  \r\n      this.altGameModeActive = true;\r\n      this.tRex.enableAltGameMode(this.spriteDef.TREX);\r\n      this.horizon.enableAltGameMode(this.spriteDef);\r\n      this.generatedSoundFx.background();\r\n    },\r\n  \r\n    /**\r\n     * Update the game frame and schedules the next one. \r\n     */\r\n    update() {\r\n      this.updatePending = false;\r\n  \r\n      const now = getTimeStamp();\r\n      let deltaTime = now - (this.time || now);\r\n  \r\n      // Flashing when switching game modes.\r\n      if (this.altGameModeFlashTimer < 0 || this.altGameModeFlashTimer === 0) {\r\n        this.altGameModeFlashTimer = null;\r\n        this.tRex.setFlashing(false);\r\n        this.enableAltGameMode();\r\n      } else if (this.altGameModeFlashTimer > 0) {\r\n        this.altGameModeFlashTimer -= deltaTime;\r\n        this.tRex.update(deltaTime);\r\n        deltaTime = 0;\r\n      }\r\n  \r\n      this.time = now;\r\n\r\n      //console.log(this.currentFrame);\r\n      //console.log(this.typeConfig.numFrames);\r\n      //console.log(deltaTime); - getting printed\r\n  \r\n      if (this.playing) {\r\n        this.clearCanvas();\r\n  \r\n        // Additional fade in - Prevents jump when switching sprites\r\n        if (this.altGameModeActive &&\r\n            this.fadeInTimer <= this.config.FADE_DURATION) {\r\n          this.fadeInTimer += deltaTime / 1000;\r\n          this.canvasCtx.globalAlpha = this.fadeInTimer;\r\n        } else {\r\n          this.canvasCtx.globalAlpha = 1;\r\n        }\r\n  \r\n        if (this.tRex.jumping) {\r\n          this.tRex.updateJump(deltaTime);\r\n        }\r\n  \r\n        this.runningTime += deltaTime;\r\n        const hasObstacles = this.runningTime > this.config.CLEAR_TIME;\r\n  \r\n        // First jump triggers the intro.\r\n        if (this.tRex.jumpCount === 1 && !this.playingIntro) {\r\n          this.playIntro();\r\n        }\r\n  \r\n        // The horizon doesn't move until the intro is over.\r\n        if (this.playingIntro) {\r\n          this.horizon.update(0, this.currentSpeed, hasObstacles);\r\n        } else if (!this.crashed) {\r\n          const showNightMode = this.isDarkMode ^ this.inverted;\r\n          deltaTime = !this.activated ? 0 : deltaTime;\r\n          this.horizon.update(\r\n              deltaTime, this.currentSpeed, hasObstacles, showNightMode);\r\n        }\r\n  \r\n        // Check for collisions.\r\n        let collision = hasObstacles &&\r\n            checkForCollision(this.horizon.obstacles[0], this.tRex);\r\n        // console.log(hasObstacles);\r\n        // For a11y, audio cues.\r\n        if (Runner.audioCues && hasObstacles) {\r\n          const jumpObstacle =\r\n              this.horizon.obstacles[0].typeConfig.type != 'COLLECTABLE';\r\n  \r\n          if (!this.horizon.obstacles[0].jumpAlerted) {\r\n            const threshold = Runner.isMobileMouseInput ?\r\n                Runner.config.AUDIOCUE_PROXIMITY_THRESHOLD_MOBILE_A11Y :\r\n                Runner.config.AUDIOCUE_PROXIMITY_THRESHOLD;\r\n            const adjProximityThreshold = threshold +\r\n                (threshold * Math.log10(this.currentSpeed / Runner.config.SPEED));\r\n  \r\n            if (this.horizon.obstacles[0].xPos < adjProximityThreshold) {\r\n              if (jumpObstacle) {\r\n                this.generatedSoundFx.jump();\r\n              }\r\n              this.horizon.obstacles[0].jumpAlerted = true;\r\n            }\r\n          }\r\n        }\r\n  \r\n        // Activated alt game mode.\r\n        if (Runner.isAltGameModeEnabled() && collision &&\r\n            this.horizon.obstacles[0].typeConfig.type == 'COLLECTABLE') {\r\n          this.horizon.removeFirstObstacle();\r\n          this.tRex.setFlashing(true);\r\n          collision = false;\r\n          this.altGameModeFlashTimer = this.config.FLASH_DURATION;\r\n          this.runningTime = 0;\r\n          this.generatedSoundFx.collect();\r\n        }\r\n  \r\n        if (!collision) {\r\n          this.distanceRan += this.currentSpeed * deltaTime / this.msPerFrame;\r\n  \r\n          if (this.currentSpeed < this.config.MAX_SPEED) {\r\n            this.currentSpeed += this.config.ACCELERATION;\r\n          }\r\n        } else {\r\n          this.gameOver();\r\n        }\r\n  \r\n        const playAchievementSound = this.distanceMeter.update(deltaTime,\r\n            Math.ceil(this.distanceRan));\r\n  \r\n        if (!Runner.audioCues && playAchievementSound) {\r\n          this.playSound(this.soundFx.SCORE);\r\n        }\r\n  \r\n        // Night mode.\r\n        if (!Runner.isAltGameModeEnabled()) {\r\n          if (this.invertTimer > this.config.INVERT_FADE_DURATION) {\r\n            this.invertTimer = 0;\r\n            this.invertTrigger = false;\r\n            this.invert(false);\r\n          } else if (this.invertTimer) {\r\n            this.invertTimer += deltaTime;\r\n          } else {\r\n            const actualDistance =\r\n                this.distanceMeter.getActualDistance(Math.ceil(this.distanceRan));\r\n  \r\n            if (actualDistance > 0) {\r\n              this.invertTrigger =\r\n                  !(actualDistance % this.config.INVERT_DISTANCE);\r\n  \r\n              if (this.invertTrigger && this.invertTimer === 0) {\r\n                this.invertTimer += deltaTime;\r\n                this.invert(false);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (this.playing || (!this.activated &&\r\n          this.tRex.blinkCount < Runner.config.MAX_BLINK_COUNT)) {\r\n        this.tRex.update(deltaTime);\r\n        this.scheduleNextUpdate();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Event handler.\r\n     * @param {Event} e\r\n     */\r\n    handleEvent(e) {\r\n      return (function(evtType, events) {\r\n        switch (evtType) {\r\n          case events.KEYDOWN:\r\n          case events.TOUCHSTART:\r\n          case events.POINTERDOWN:\r\n            this.onKeyDown(e);\r\n            break;\r\n          case events.KEYUP:\r\n          case events.TOUCHEND:\r\n          case events.POINTERUP:\r\n            this.onKeyUp(e);\r\n            break;\r\n          case events.GAMEPADCONNECTED:\r\n            this.onGamepadConnected(e);\r\n            break;\r\n        }\r\n      }.bind(this))(e.type, Runner.events);\r\n    },\r\n  \r\n    /**\r\n     * Initialize audio cues if activated by focus on the canvas element.\r\n     * @param {Event} e\r\n     */\r\n    handleCanvasKeyPress(e) {\r\n      if (!this.activated && !Runner.audioCues) {\r\n        this.toggleSpeed();\r\n        Runner.audioCues = true;\r\n        this.generatedSoundFx.init();\r\n        Runner.generatedSoundFx = this.generatedSoundFx;\r\n        Runner.config.CLEAR_TIME *= 1.2;\r\n      } else if (e.keyCode && Runner.keycodes.JUMP[e.keyCode]) {\r\n        this.onKeyDown(e);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Prevent space key press from scrolling.\r\n     * @param {Event} e\r\n     */\r\n    preventScrolling(e) {\r\n      if (e.keyCode === 32) {\r\n        e.preventDefault();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Toggle speed setting if toggle is shown.\r\n     */\r\n    toggleSpeed() {\r\n      if (Runner.audioCues) {\r\n        const speedChange = Runner.slowDown != this.slowSpeedCheckbox.checked;\r\n  \r\n        if (speedChange) {\r\n          Runner.slowDown = this.slowSpeedCheckbox.checked;\r\n          const updatedConfig =\r\n              Runner.slowDown ? Runner.slowConfig : Runner.normalConfig;\r\n  \r\n          Runner.config = Object.assign(Runner.config, updatedConfig);\r\n          this.currentSpeed = updatedConfig.SPEED;\r\n          this.tRex.enableSlowConfig();\r\n          this.horizon.adjustObstacleSpeed();\r\n        }\r\n        if (this.playing) {\r\n          this.disableSpeedToggle(true);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Show the speed toggle.\r\n     * From focus event or when audio cues are activated.\r\n     * @param {Event=} e\r\n     */\r\n    showSpeedToggle(e) {\r\n      const isFocusEvent = e && e.type == 'focus';\r\n      if (Runner.audioCues || isFocusEvent) {\r\n        this.slowSpeedCheckboxLabel.classList.toggle(\r\n            HIDDEN_CLASS, isFocusEvent ? false : !this.crashed);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Disable the speed toggle.\r\n     * @param {boolean} disable\r\n     */\r\n    disableSpeedToggle(disable) {\r\n      if (disable) {\r\n        this.slowSpeedCheckbox.setAttribute('disabled', 'disabled');\r\n      } else {\r\n        this.slowSpeedCheckbox.removeAttribute('disabled');\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Bind relevant key / mouse / touch listeners.\r\n     */\r\n    startListening() {\r\n      // A11y keyboard / screen reader activation.\r\n      this.containerEl.addEventListener(\r\n          Runner.events.KEYDOWN, this.handleCanvasKeyPress.bind(this));\r\n      if (!IS_MOBILE) {\r\n        this.containerEl.addEventListener(\r\n            Runner.events.FOCUS, this.showSpeedToggle.bind(this));\r\n      }\r\n      this.canvas.addEventListener(\r\n          Runner.events.KEYDOWN, this.preventScrolling.bind(this));\r\n      this.canvas.addEventListener(\r\n          Runner.events.KEYUP, this.preventScrolling.bind(this));\r\n  \r\n      // Keys.\r\n      document.addEventListener(Runner.events.KEYDOWN, this);\r\n      document.addEventListener(Runner.events.KEYUP, this);\r\n  \r\n      // Touch / pointer.\r\n      this.containerEl.addEventListener(Runner.events.TOUCHSTART, this);\r\n      document.addEventListener(Runner.events.POINTERDOWN, this);\r\n      document.addEventListener(Runner.events.POINTERUP, this);\r\n  \r\n      if (this.isArcadeMode()) {\r\n        // Gamepad\r\n        window.addEventListener(Runner.events.GAMEPADCONNECTED, this);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Remove all listeners.\r\n     */\r\n    stopListening() {\r\n      document.removeEventListener(Runner.events.KEYDOWN, this);\r\n      document.removeEventListener(Runner.events.KEYUP, this);\r\n  \r\n      if (this.touchController) {\r\n        this.touchController.removeEventListener(Runner.events.TOUCHSTART, this);\r\n        this.touchController.removeEventListener(Runner.events.TOUCHEND, this);\r\n      }\r\n  \r\n      this.containerEl.removeEventListener(Runner.events.TOUCHSTART, this);\r\n      document.removeEventListener(Runner.events.POINTERDOWN, this);\r\n      document.removeEventListener(Runner.events.POINTERUP, this);\r\n  \r\n      if (this.isArcadeMode()) {\r\n        window.removeEventListener(Runner.events.GAMEPADCONNECTED, this);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Process keydown.\r\n     * @param {Event} e\r\n     */\r\n    onKeyDown(e) {\r\n      // Prevent native page scrolling whilst tapping on mobile.\r\n      if (IS_MOBILE && this.playing) {\r\n        e.preventDefault();\r\n      }\r\n      // e.keyCode =32;\r\n      console.log(e.keyCode);\r\n      //e.keyCode =32;\r\n  \r\n      if (this.isCanvasInView()) {\r\n        // Allow toggling of speed toggle.\r\n        if (Runner.keycodes.JUMP[e.keyCode] &&\r\n            e.target == this.slowSpeedCheckbox) {\r\n          return;\r\n        }\r\n  \r\n        if (!this.crashed && !this.paused) {\r\n          // For a11y, screen reader activation.\r\n          const isMobileMouseInput = IS_MOBILE &&\r\n                  e.type === Runner.events.POINTERDOWN &&\r\n                  e.pointerType == 'mouse' && e.target == this.containerEl ||\r\n              (IS_IOS && e.pointerType == 'touch' &&\r\n               document.activeElement == this.containerEl);\r\n  \r\n          if (Runner.keycodes.JUMP[e.keyCode] ||\r\n              e.type === Runner.events.TOUCHSTART || isMobileMouseInput ||\r\n              (Runner.keycodes.DUCK[e.keyCode] && this.altGameModeActive)) {\r\n            e.preventDefault();\r\n            // Starting the game for the first time.\r\n            if (!this.playing) {\r\n              // Started by touch so create a touch controller.\r\n              if (!this.touchController && e.type === Runner.events.TOUCHSTART) {\r\n                this.createTouchController();\r\n              }\r\n  \r\n              if (isMobileMouseInput) {\r\n                this.handleCanvasKeyPress(e);\r\n              }\r\n              // this.loadSounds();\r\n              this.setPlayStatus(true);\r\n              this.update();\r\n              if (window.errorPageController) {\r\n                errorPageController.trackEasterEgg();\r\n              }\r\n            }\r\n            // Start jump.\r\n            if (!this.tRex.jumping && !this.tRex.ducking) {\r\n              if (Runner.audioCues) {\r\n                this.generatedSoundFx.cancelFootSteps();\r\n              } else {\r\n                this.playSound(this.soundFx.BUTTON_PRESS);\r\n              }\r\n              this.tRex.startJump(this.currentSpeed);\r\n            }\r\n            // Ducking is disabled on alt game modes.\r\n          } else if (\r\n              !this.altGameModeActive && this.playing &&\r\n              Runner.keycodes.DUCK[e.keyCode]) {\r\n            e.preventDefault();\r\n            if (this.tRex.jumping) {\r\n              // Speed drop, activated only when jump key is not pressed.\r\n              this.tRex.setSpeedDrop();\r\n            } else if (!this.tRex.jumping && !this.tRex.ducking) {\r\n              // Duck.\r\n              this.tRex.setDuck(true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Process key up.\r\n     * @param {Event} e\r\n     */\r\n    onKeyUp(e) {\r\n      const keyCode = String(e.keyCode);\r\n      const isjumpKey = Runner.keycodes.JUMP[keyCode] ||\r\n          e.type === Runner.events.TOUCHEND || e.type === Runner.events.POINTERUP;\r\n  \r\n      if (this.isRunning() && isjumpKey) {\r\n        this.tRex.endJump();\r\n      } else if (Runner.keycodes.DUCK[keyCode]) {\r\n        this.tRex.speedDrop = false;\r\n        this.tRex.setDuck(false);\r\n      } else if (this.crashed) {\r\n        // Check that enough time has elapsed before allowing jump key to restart.\r\n        const deltaTime = getTimeStamp() - this.time;\r\n  \r\n        if (this.isCanvasInView() &&\r\n            (Runner.keycodes.RESTART[keyCode] || this.isLeftClickOnCanvas(e) ||\r\n            (deltaTime >= this.config.GAMEOVER_CLEAR_TIME &&\r\n            Runner.keycodes.JUMP[keyCode]))) {\r\n          this.handleGameOverClicks(e);\r\n        }\r\n      } else if (this.paused && isjumpKey) {\r\n        // Reset the jump state\r\n        this.tRex.reset();\r\n        this.play();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Process gamepad connected event.\r\n     * @param {Event} e\r\n     */\r\n    onGamepadConnected(e) {\r\n      if (!this.pollingGamepads) {\r\n        this.pollGamepadState();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * rAF loop for gamepad polling.\r\n     */\r\n    pollGamepadState() {\r\n      const gamepads = navigator.getGamepads();\r\n      this.pollActiveGamepad(gamepads);\r\n  \r\n      this.pollingGamepads = true;\r\n      requestAnimationFrame(this.pollGamepadState.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Polls for a gamepad with the jump button pressed. If one is found this\r\n     * becomes the \"active\" gamepad and all others are ignored.\r\n     * @param {!Array<Gamepad>} gamepads\r\n     */\r\n    pollForActiveGamepad(gamepads) {\r\n      for (let i = 0; i < gamepads.length; ++i) {\r\n        if (gamepads[i] && gamepads[i].buttons.length > 0 &&\r\n            gamepads[i].buttons[0].pressed) {\r\n          this.gamepadIndex = i;\r\n          this.pollActiveGamepad(gamepads);\r\n          return;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Polls the chosen gamepad for button presses and generates KeyboardEvents\r\n     * to integrate with the rest of the game logic.\r\n     * @param {!Array<Gamepad>} gamepads\r\n     */\r\n    pollActiveGamepad(gamepads) {\r\n      if (this.gamepadIndex === undefined) {\r\n        this.pollForActiveGamepad(gamepads);\r\n        return;\r\n      }\r\n  \r\n      const gamepad = gamepads[this.gamepadIndex];\r\n      if (!gamepad) {\r\n        this.gamepadIndex = undefined;\r\n        this.pollForActiveGamepad(gamepads);\r\n        return;\r\n      }\r\n  \r\n      // The gamepad specification defines the typical mapping of physical buttons\r\n      // to button indicies: https://w3c.github.io/gamepad/#remapping\r\n      this.pollGamepadButton(gamepad, 0, 38);  // Jump\r\n      if (gamepad.buttons.length >= 2) {\r\n        this.pollGamepadButton(gamepad, 1, 40);  // Duck\r\n      }\r\n      if (gamepad.buttons.length >= 10) {\r\n        this.pollGamepadButton(gamepad, 9, 13);  // Restart\r\n      }\r\n  \r\n      this.previousGamepad = gamepad;\r\n    },\r\n  \r\n    /**\r\n     * Generates a key event based on a gamepad button.\r\n     * @param {!Gamepad} gamepad\r\n     * @param {number} buttonIndex\r\n     * @param {number} keyCode\r\n     */\r\n    pollGamepadButton(gamepad, buttonIndex, keyCode) {\r\n      const state = gamepad.buttons[buttonIndex].pressed;\r\n      let previousState = false;\r\n      if (this.previousGamepad) {\r\n        previousState = this.previousGamepad.buttons[buttonIndex].pressed;\r\n      }\r\n      // Generate key events on the rising and falling edge of a button press.\r\n      if (state !== previousState) {\r\n        const e = new KeyboardEvent(state ? Runner.events.KEYDOWN\r\n                                        : Runner.events.KEYUP,\r\n                                  { keyCode: keyCode });\r\n        document.dispatchEvent(e);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Handle interactions on the game over screen state.\r\n     * A user is able to tap the high score twice to reset it.\r\n     * @param {Event} e\r\n     */\r\n    handleGameOverClicks(e) {\r\n      if (e.target != this.slowSpeedCheckbox) {\r\n        e.preventDefault();\r\n        if (this.distanceMeter.hasClickedOnHighScore(e) && this.highestScore) {\r\n          if (this.distanceMeter.isHighScoreFlashing()) {\r\n            // Subsequent click, reset the high score.\r\n            this.saveHighScore(0, true);\r\n            this.distanceMeter.resetHighScore();\r\n          } else {\r\n            // First click, flash the high score.\r\n            this.distanceMeter.startHighScoreFlashing();\r\n          }\r\n        } else {\r\n          this.distanceMeter.cancelHighScoreFlashing();\r\n          this.restart();\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Returns whether the event was a left click on canvas.\r\n     * On Windows right click is registered as a click.\r\n     * @param {Event} e\r\n     * @return {boolean}\r\n     */\r\n    isLeftClickOnCanvas(e) {\r\n      return e.button != null && e.button < 2 &&\r\n          e.type === Runner.events.POINTERUP &&\r\n          (e.target === this.canvas ||\r\n           (IS_MOBILE && Runner.audioCues && e.target === this.containerEl));\r\n    },\r\n  \r\n    /**\r\n     * RequestAnimationFrame wrapper.\r\n     */\r\n    scheduleNextUpdate() {\r\n      if (!this.updatePending) {\r\n        this.updatePending = true;\r\n        this.raqId = requestAnimationFrame(this.update.bind(this));\r\n      }\r\n      //console.log(this.currentFrame);\r\n     // console.log(this.typeConfig.numFrames);\r\n      //console.log(deltaTime);\r\n    },\r\n  \r\n    /**\r\n     * Whether the game is running.\r\n     * @return {boolean}\r\n     */\r\n    isRunning() {\r\n      return !!this.raqId;\r\n    },\r\n  \r\n    /**\r\n     * Set the initial high score as stored in the user's profile.\r\n     * @param {number} highScore\r\n     */\r\n    initializeHighScore(highScore) {\r\n      this.syncHighestScore = true;\r\n      highScore = Math.ceil(highScore);\r\n      if (highScore < this.highestScore) {\r\n        if (window.errorPageController) {\r\n          errorPageController.updateEasterEggHighScore(this.highestScore);\r\n        }\r\n        return;\r\n      }\r\n      this.highestScore = highScore;\r\n      this.distanceMeter.setHighScore(this.highestScore);\r\n    },\r\n  \r\n    /**\r\n     * Sets the current high score and saves to the profile if available.\r\n     * @param {number} distanceRan Total distance ran.\r\n     * @param {boolean=} opt_resetScore Whether to reset the score.\r\n     */\r\n    saveHighScore(distanceRan, opt_resetScore) {\r\n      this.highestScore = Math.ceil(distanceRan);\r\n      this.distanceMeter.setHighScore(this.highestScore);\r\n  \r\n      // Store the new high score in the profile.\r\n      if (this.syncHighestScore && window.errorPageController) {\r\n        if (opt_resetScore) {\r\n          errorPageController.resetEasterEggHighScore();\r\n        } else {\r\n          errorPageController.updateEasterEggHighScore(this.highestScore);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Game over state.\r\n     */\r\n    gameOver() {\r\n      this.playSound(this.soundFx.HIT);\r\n      vibrate(200);\r\n  \r\n      this.stop();\r\n      this.crashed = true;\r\n      this.distanceMeter.achievement = false;\r\n  \r\n      this.tRex.update(100, Trex.status.CRASHED);\r\n  \r\n      // Game over panel.\r\n      if (!this.gameOverPanel) {\r\n        const origSpriteDef = IS_HIDPI ?\r\n            Runner_spriteDefinitionByType.original.HDPI :\r\n            Runner_spriteDefinitionByType.original.LDPI;\r\n  \r\n        if (this.canvas) {\r\n          if (Runner.isAltGameModeEnabled) {\r\n            this.gameOverPanel = new GameOverPanel(\r\n                this.canvas, origSpriteDef.TEXT_SPRITE, origSpriteDef.RESTART,\r\n                this.dimensions, origSpriteDef.ALT_GAME_END,\r\n                this.altGameModeActive);\r\n          } else {\r\n            this.gameOverPanel = new GameOverPanel(\r\n                this.canvas, origSpriteDef.TEXT_SPRITE, origSpriteDef.RESTART,\r\n                this.dimensions);\r\n          }\r\n        }\r\n      }\r\n  \r\n      this.gameOverPanel.draw(this.altGameModeActive, this.tRex);\r\n  \r\n      // Update the high score.\r\n      if (this.distanceRan > this.highestScore) {\r\n        this.saveHighScore(this.distanceRan);\r\n      }\r\n\r\n      document.getElementById(\"dino-scores1\").innerHTML = \"Congratulations! \" + ((this.distanceRan - ((this.distanceRan)%1))/100).toString() + \" $DINO coins have been added to your Near wallet\";\r\n      console.log(document.getElementById(\"dino-scores1\"));\r\n  \r\n      // Reset the time clock.\r\n      this.time = getTimeStamp();\r\n  \r\n      if (Runner.audioCues) {\r\n        this.generatedSoundFx.stopAll();\r\n        announcePhrase(\r\n            getA11yString(A11Y_STRINGS.gameOver)\r\n                .replace(\r\n                    '$1',\r\n                    this.distanceMeter.getActualDistance(this.distanceRan)\r\n                        .toString()) +\r\n            ' ' +\r\n            getA11yString(A11Y_STRINGS.highScore)\r\n                .replace(\r\n                    '$1',\r\n  \r\n                    this.distanceMeter.getActualDistance(this.highestScore)\r\n                        .toString()));\r\n        this.containerEl.setAttribute(\r\n            'title', getA11yString(A11Y_STRINGS.ariaLabel));\r\n      }\r\n      this.showSpeedToggle();\r\n      this.disableSpeedToggle(false);\r\n    },\r\n  \r\n    stop() {\r\n      this.setPlayStatus(false);\r\n      this.paused = true;\r\n      cancelAnimationFrame(this.raqId);\r\n      this.raqId = 0;\r\n      this.generatedSoundFx.stopAll();\r\n    },\r\n  \r\n    play() {\r\n      if (!this.crashed) {\r\n        this.setPlayStatus(true);\r\n        this.paused = false;\r\n        this.tRex.update(0, Trex.status.RUNNING);\r\n        this.time = getTimeStamp();\r\n        this.update();\r\n        this.generatedSoundFx.background();\r\n      }\r\n    },\r\n  \r\n    restart() {\r\n      if (!this.raqId) {\r\n        this.playCount++;\r\n        this.runningTime = 0;\r\n        this.setPlayStatus(true);\r\n        this.toggleSpeed();\r\n        this.paused = false;\r\n        this.crashed = false;\r\n        this.distanceRan = 0;\r\n        this.setSpeed(this.config.SPEED);\r\n        this.time = getTimeStamp();\r\n        this.containerEl.classList.remove(Runner.classes.CRASHED);\r\n        this.clearCanvas();\r\n        this.distanceMeter.reset();\r\n        this.horizon.reset();\r\n        this.tRex.reset();\r\n        this.playSound(this.soundFx.BUTTON_PRESS);\r\n        this.invert(true);\r\n        this.flashTimer = null;\r\n        this.update();\r\n        this.gameOverPanel.reset();\r\n        this.generatedSoundFx.background();\r\n        this.containerEl.setAttribute('title', getA11yString(A11Y_STRINGS.jump));\r\n        announcePhrase(getA11yString(A11Y_STRINGS.started));\r\n      }\r\n    },\r\n  \r\n    setPlayStatus(isPlaying) {\r\n      if (this.touchController) {\r\n        this.touchController.classList.toggle(HIDDEN_CLASS, !isPlaying);\r\n      }\r\n      this.playing = isPlaying;\r\n    },\r\n  \r\n    /**\r\n     * Whether the game should go into arcade mode.\r\n     * @return {boolean}\r\n     */\r\n    isArcadeMode() {\r\n      // In RTL languages the title is wrapped with the left to right mark\r\n      // control characters &#x202A; and &#x202C but are invisible.\r\n      return IS_RTL ? document.title.indexOf(ARCADE_MODE_URL) == 1 :\r\n                      document.title === ARCADE_MODE_URL;\r\n    },\r\n  \r\n    /**\r\n     * Hides offline messaging for a fullscreen game only experience.\r\n     */\r\n    setArcadeMode() {\r\n      document.body.classList.add(Runner.classes.ARCADE_MODE);\r\n      this.setArcadeModeContainerScale();\r\n    },\r\n  \r\n    /**\r\n     * Sets the scaling for arcade mode.\r\n     */\r\n    setArcadeModeContainerScale() {\r\n      const windowHeight = window.innerHeight;\r\n      const scaleHeight = windowHeight / this.dimensions.HEIGHT;\r\n      const scaleWidth = window.innerWidth / this.dimensions.WIDTH;\r\n      const scale = Math.max(1, Math.min(scaleHeight, scaleWidth));\r\n      const scaledCanvasHeight = this.dimensions.HEIGHT * scale;\r\n      // Positions the game container at 10% of the available vertical window\r\n      // height minus the game container height.\r\n      const translateY = Math.ceil(Math.max(0, (windowHeight - scaledCanvasHeight -\r\n          Runner.config.ARCADE_MODE_INITIAL_TOP_POSITION) *\r\n          Runner.config.ARCADE_MODE_TOP_POSITION_PERCENT)) *\r\n          window.devicePixelRatio;\r\n  \r\n      const cssScale = IS_RTL ? -scale + ',' + scale : scale;\r\n      this.containerEl.style.transform =\r\n          'scale(' + cssScale + ') translateY(' + translateY + 'px)';\r\n    },\r\n  \r\n    /**\r\n     * Pause the game if the tab is not in focus.\r\n     */\r\n    onVisibilityChange(e) {\r\n      if (document.hidden || document.webkitHidden || e.type === 'blur' ||\r\n          document.visibilityState !== 'visible') {\r\n        this.stop();\r\n      } else if (!this.crashed) {\r\n        this.tRex.reset();\r\n        this.play();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Play a sound.\r\n     * @param {AudioBuffer} soundBuffer\r\n     */\r\n    playSound(soundBuffer) {\r\n      if (soundBuffer) {\r\n        const sourceNode = this.audioContext.createBufferSource();\r\n        sourceNode.buffer = soundBuffer;\r\n        sourceNode.connect(this.audioContext.destination);\r\n        sourceNode.start(0);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Inverts the current page / canvas colors.\r\n     * @param {boolean} reset Whether to reset colors.\r\n     */\r\n    invert(reset) {\r\n      const htmlEl = document.firstElementChild;\r\n  \r\n      if (reset) {\r\n        htmlEl.classList.toggle(Runner.classes.INVERTED,\r\n            false);\r\n        this.invertTimer = 0;\r\n        this.inverted = false;\r\n      } else {\r\n        this.inverted = htmlEl.classList.toggle(\r\n            Runner.classes.INVERTED, this.invertTrigger);\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Updates the canvas size taking into\r\n   * account the backing store pixel ratio and\r\n   * the device pixel ratio.\r\n   *\r\n   * See article by Paul Lewis:\r\n   * http://www.html5rocks.com/en/tutorials/canvas/hidpi/\r\n   *\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {number=} opt_width\r\n   * @param {number=} opt_height\r\n   * @return {boolean} Whether the canvas was scaled.\r\n   */\r\n  Runner.updateCanvasScaling = function(canvas, opt_width, opt_height) {\r\n    const context =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n  \r\n    // Query the various pixel ratios\r\n    const devicePixelRatio = Math.floor(window.devicePixelRatio) || 1;\r\n    /** @suppress {missingProperties} */\r\n    const backingStoreRatio =\r\n        Math.floor(context.webkitBackingStorePixelRatio) || 1;\r\n    const ratio = devicePixelRatio / backingStoreRatio;\r\n  \r\n    // Upscale the canvas if the two ratios don't match\r\n    if (devicePixelRatio !== backingStoreRatio) {\r\n      const oldWidth = opt_width || canvas.width;\r\n      const oldHeight = opt_height || canvas.height;\r\n  \r\n      canvas.width = oldWidth * ratio;\r\n      canvas.height = oldHeight * ratio;\r\n  \r\n      canvas.style.width = oldWidth + 'px';\r\n      canvas.style.height = oldHeight + 'px';\r\n  \r\n      // Scale the context to counter the fact that we've manually scaled\r\n      // our canvas element.\r\n      context.scale(ratio, ratio);\r\n      return true;\r\n    } else if (devicePixelRatio === 1) {\r\n      // Reset the canvas width / height. Fixes scaling bug when the page is\r\n      // zoomed and the devicePixelRatio changes accordingly.\r\n      canvas.style.width = canvas.width + 'px';\r\n      canvas.style.height = canvas.height + 'px';\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Whether events are enabled.\r\n   * @return {boolean}\r\n   */\r\n  Runner.isAltGameModeEnabled = function() {\r\n    // return loadTimeData && loadTimeData.valueExists('enableAltGameMode');\r\n    return false;\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Generated sound FX class for audio cues.\r\n   * @constructor\r\n   */\r\n  function GeneratedSoundFx() {\r\n    this.audioCues = false;\r\n    this.context = null;\r\n    this.panner = null;\r\n  }\r\n  \r\n  GeneratedSoundFx.prototype = {\r\n    init() {\r\n      this.audioCues = true;\r\n      if (!this.context) {\r\n        // iOS only supports the webkit version.\r\n        this.context = window.webkitAudioContext ? new webkitAudioContext() :\r\n                                                   new AudioContext();\r\n        if (IS_IOS) {\r\n          this.context.onstatechange = (function() {\r\n                                         if (this.context.state != 'running') {\r\n                                           this.context.resume();\r\n                                         }\r\n                                       }).bind(this);\r\n          this.context.resume();\r\n        }\r\n        this.panner = this.context.createStereoPanner ?\r\n            this.context.createStereoPanner() :\r\n            null;\r\n      }\r\n    },\r\n  \r\n    stopAll() {\r\n      this.cancelFootSteps();\r\n    },\r\n  \r\n    /**\r\n     * Play oscillators at certain frequency and for a certain time.\r\n     * @param {number} frequency\r\n     * @param {number} startTime\r\n     * @param {number} duration\r\n     * @param {?number=} opt_vol\r\n     * @param {number=} opt_pan\r\n     */\r\n    playNote(frequency, startTime, duration, opt_vol, opt_pan) {\r\n      const osc1 = this.context.createOscillator();\r\n      const osc2 = this.context.createOscillator();\r\n      const volume = this.context.createGain();\r\n  \r\n      // Set oscillator wave type\r\n      osc1.type = 'triangle';\r\n      osc2.type = 'triangle';\r\n      volume.gain.value = 0.1;\r\n  \r\n      // Set up node routing\r\n      if (this.panner) {\r\n        this.panner.pan.value = opt_pan || 0;\r\n        osc1.connect(volume).connect(this.panner);\r\n        osc2.connect(volume).connect(this.panner);\r\n        this.panner.connect(this.context.destination);\r\n      } else {\r\n        osc1.connect(volume);\r\n        osc2.connect(volume);\r\n        volume.connect(this.context.destination);\r\n      }\r\n  \r\n      // Detune oscillators for chorus effect\r\n      osc1.frequency.value = frequency + 1;\r\n      osc2.frequency.value = frequency - 2;\r\n  \r\n      // Fade out\r\n      volume.gain.setValueAtTime(opt_vol || 0.01, startTime + duration - 0.05);\r\n      volume.gain.linearRampToValueAtTime(0.00001, startTime + duration);\r\n  \r\n      // Start oscillators\r\n      osc1.start(startTime);\r\n      osc2.start(startTime);\r\n      // Stop oscillators\r\n      osc1.stop(startTime + duration);\r\n      osc2.stop(startTime + duration);\r\n    },\r\n  \r\n    background() {\r\n      if (this.audioCues) {\r\n        const now = this.context.currentTime;\r\n        this.playNote(493.883, now, 0.116);\r\n        this.playNote(659.255, now + 0.116, 0.232);\r\n        this.loopFootSteps();\r\n      }\r\n    },\r\n  \r\n    loopFootSteps() {\r\n      if (this.audioCues && !this.bgSoundIntervalId) {\r\n        this.bgSoundIntervalId = setInterval(function() {\r\n          this.playNote(73.42, this.context.currentTime, 0.05, 0.16);\r\n          this.playNote(69.30, this.context.currentTime + 0.116, 0.116, 0.16);\r\n        }.bind(this), 280);\r\n      }\r\n    },\r\n  \r\n    cancelFootSteps() {\r\n      if (this.audioCues && this.bgSoundIntervalId) {\r\n        clearInterval(this.bgSoundIntervalId);\r\n        this.bgSoundIntervalId = null;\r\n        this.playNote(103.83, this.context.currentTime, 0.232, 0.02);\r\n        this.playNote(116.54, this.context.currentTime + 0.116, 0.232, 0.02);\r\n      }\r\n    },\r\n  \r\n    collect() {\r\n      if (this.audioCues) {\r\n        this.cancelFootSteps();\r\n        const now = this.context.currentTime;\r\n        this.playNote(830.61, now, 0.116);\r\n        this.playNote(1318.51, now + 0.116, 0.232);\r\n      }\r\n    },\r\n  \r\n    jump() {\r\n      if (this.audioCues) {\r\n        const now = this.context.currentTime;\r\n        this.playNote(659.25, now, 0.116, 0.3, -0.6);\r\n        this.playNote(880, now + 0.116, 0.232, 0.3, -0.6);\r\n      }\r\n    },\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Speak a phrase using Speech Synthesis API for a11y.\r\n   * @param {string} phrase Sentence to speak.\r\n   */\r\n  function speakPhrase(phrase) {\r\n    if ('speechSynthesis' in window) {\r\n      const msg = new SpeechSynthesisUtterance(phrase);\r\n      const voices = window.speechSynthesis.getVoices();\r\n      msg.text = phrase;\r\n      speechSynthesis.speak(msg);\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * For screen readers make an announcement to the live region.\r\n   * @param {string} phrase Sentence to speak.\r\n   */\r\n  function announcePhrase(phrase) {\r\n    if (Runner.a11yStatusEl) {\r\n      Runner.a11yStatusEl.textContent = '';\r\n      Runner.a11yStatusEl.textContent = phrase;\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Returns a string from loadTimeData data object.\r\n   * @param {string} stringName\r\n   * @return {string}\r\n   */\r\n  function getA11yString(stringName) {\r\n    // return loadTimeData && loadTimeData.valueExists(stringName) ?\r\n    //     loadTimeData.getString(stringName) :\r\n    //     '';\r\n    return ''\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Get random number.\r\n   * @param {number} min\r\n   * @param {number} max\r\n   */\r\n  function getRandomNum(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Vibrate on mobile devices.\r\n   * @param {number} duration Duration of the vibration in milliseconds.\r\n   */\r\n  function vibrate(duration) {\r\n    if (IS_MOBILE && window.navigator.vibrate) {\r\n      window.navigator.vibrate(duration);\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Create canvas element.\r\n   * @param {Element} container Element to append canvas to.\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string=} opt_classname\r\n   * @return {HTMLCanvasElement}\r\n   */\r\n  function createCanvas(container, width, height, opt_classname) {\r\n    const canvas =\r\n        /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));\r\n    canvas.className = opt_classname ? Runner.classes.CANVAS + ' ' +\r\n        opt_classname : Runner.classes.CANVAS;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    container.appendChild(canvas);\r\n  \r\n    return canvas;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Decodes the base 64 audio to ArrayBuffer used by Web Audio.\r\n   * @param {string} base64String\r\n   */\r\n  function decodeBase64ToArrayBuffer(base64String) {\r\n    const len = (base64String.length / 4) * 3;\r\n    const str = atob(base64String);\r\n    const arrayBuffer = new ArrayBuffer(len);\r\n    const bytes = new Uint8Array(arrayBuffer);\r\n  \r\n    for (let i = 0; i < len; i++) {\r\n      bytes[i] = str.charCodeAt(i);\r\n    }\r\n    return bytes.buffer;\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Return the current timestamp.\r\n   * @return {number}\r\n   */\r\n  function getTimeStamp() {\r\n    return IS_IOS ? new Date().getTime() : performance.now();\r\n  }\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  \r\n  /**\r\n   * Game over panel.\r\n   * @param {!HTMLCanvasElement} canvas\r\n   * @param {Object} textImgPos\r\n   * @param {Object} restartImgPos\r\n   * @param {!Object} dimensions Canvas dimensions.\r\n   * @param {Object=} opt_altGameEndImgPos\r\n   * @param {boolean=} opt_altGameActive\r\n   * @constructor\r\n   */\r\n  function GameOverPanel(\r\n      canvas, textImgPos, restartImgPos, dimensions, opt_altGameEndImgPos,\r\n      opt_altGameActive) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.canvasDimensions = dimensions;\r\n    this.textImgPos = textImgPos;\r\n    this.restartImgPos = restartImgPos;\r\n    this.altGameEndImgPos = opt_altGameEndImgPos;\r\n    this.altGameModeActive = opt_altGameActive;\r\n  \r\n    // Retry animation.\r\n    this.frameTimeStamp = 0;\r\n    this.animTimer = 0;\r\n    this.currentFrame = 0;\r\n  \r\n    this.gameOverRafId = null;\r\n  \r\n    this.flashTimer = 0;\r\n    this.flashCounter = 0;\r\n    this.originalText = true;\r\n  }\r\n  \r\n  GameOverPanel.RESTART_ANIM_DURATION = 875;\r\n  GameOverPanel.LOGO_PAUSE_DURATION = 875;\r\n  GameOverPanel.FLASH_ITERATIONS = 5;\r\n  \r\n  /**\r\n   * Animation frames spec.\r\n   */\r\n  GameOverPanel.animConfig = {\r\n    frames: [0, 36, 72, 108, 144, 180, 216, 252],\r\n    msPerFrame: GameOverPanel.RESTART_ANIM_DURATION / 8\r\n  };\r\n  \r\n  /**\r\n   * Dimensions used in the panel.\r\n   * @enum {number}\r\n   */\r\n  GameOverPanel.dimensions = {\r\n    TEXT_X: 0,\r\n    TEXT_Y: 13,\r\n    TEXT_WIDTH: 191,\r\n    TEXT_HEIGHT: 11,\r\n    RESTART_WIDTH: 36,\r\n    RESTART_HEIGHT: 32\r\n  };\r\n  \r\n  \r\n  GameOverPanel.prototype = {\r\n    /**\r\n     * Update the panel dimensions.\r\n     * @param {number} width New canvas width.\r\n     * @param {number} opt_height Optional new canvas height.\r\n     */\r\n    updateDimensions(width, opt_height) {\r\n      this.canvasDimensions.WIDTH = width;\r\n      if (opt_height) {\r\n        this.canvasDimensions.HEIGHT = opt_height;\r\n      }\r\n      this.currentFrame = GameOverPanel.animConfig.frames.length - 1;\r\n    },\r\n  \r\n    drawGameOverText(dimensions, opt_useAltText) {\r\n      const centerX = this.canvasDimensions.WIDTH / 2;\r\n      let textSourceX = dimensions.TEXT_X;\r\n      let textSourceY = dimensions.TEXT_Y;\r\n      let textSourceWidth = dimensions.TEXT_WIDTH;\r\n      let textSourceHeight = dimensions.TEXT_HEIGHT;\r\n  \r\n      const textTargetX = Math.round(centerX - (dimensions.TEXT_WIDTH / 2));\r\n      const textTargetY = Math.round((this.canvasDimensions.HEIGHT - 25) / 3);\r\n      const textTargetWidth = dimensions.TEXT_WIDTH;\r\n      const textTargetHeight = dimensions.TEXT_HEIGHT;\r\n  \r\n      if (IS_HIDPI) {\r\n        textSourceY *= 2;\r\n        textSourceX *= 2;\r\n        textSourceWidth *= 2;\r\n        textSourceHeight *= 2;\r\n      }\r\n  \r\n      if (!opt_useAltText) {\r\n        textSourceX += this.textImgPos.x;\r\n        textSourceY += this.textImgPos.y;\r\n      }\r\n  \r\n      const spriteSource =\r\n          opt_useAltText ? Runner.altCommonImageSprite : Runner.origImageSprite;\r\n  \r\n      this.canvasCtx.save();\r\n  \r\n      if (IS_RTL) {\r\n        this.canvasCtx.translate(this.canvasDimensions.WIDTH, 0);\r\n        this.canvasCtx.scale(-1, 1);\r\n      }\r\n  \r\n      // Game over text from sprite.\r\n      this.canvasCtx.drawImage(\r\n          spriteSource, textSourceX, textSourceY, textSourceWidth,\r\n          textSourceHeight, textTargetX, textTargetY, textTargetWidth,\r\n          textTargetHeight);\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Draw additional adornments for alternative game types.\r\n     */\r\n    drawAltGameElements(tRex) {\r\n      // Additional adornments.\r\n      if (this.altGameModeActive && Runner.spriteDefinition.ALT_GAME_END_CONFIG) {\r\n        const altGameEndConfig = Runner.spriteDefinition.ALT_GAME_END_CONFIG;\r\n  \r\n        let altGameEndSourceWidth = altGameEndConfig.WIDTH;\r\n        let altGameEndSourceHeight = altGameEndConfig.HEIGHT;\r\n        const altGameEndTargetX = tRex.xPos + altGameEndConfig.X_OFFSET;\r\n        const altGameEndTargetY = tRex.yPos + altGameEndConfig.Y_OFFSET;\r\n  \r\n        if (IS_HIDPI) {\r\n          altGameEndSourceWidth *= 2;\r\n          altGameEndSourceHeight *= 2;\r\n        }\r\n  \r\n        this.canvasCtx.drawImage(\r\n            Runner.altCommonImageSprite, this.altGameEndImgPos.x,\r\n            this.altGameEndImgPos.y, altGameEndSourceWidth,\r\n            altGameEndSourceHeight, altGameEndTargetX, altGameEndTargetY,\r\n            altGameEndConfig.WIDTH, altGameEndConfig.HEIGHT);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Draw restart button.\r\n     */\r\n    drawRestartButton() {\r\n      const dimensions = GameOverPanel.dimensions;\r\n      let framePosX = GameOverPanel.animConfig.frames[this.currentFrame];\r\n      let restartSourceWidth = dimensions.RESTART_WIDTH;\r\n      let restartSourceHeight = dimensions.RESTART_HEIGHT;\r\n      const restartTargetX =\r\n          (this.canvasDimensions.WIDTH / 2) - (dimensions.RESTART_WIDTH / 2);\r\n      const restartTargetY = this.canvasDimensions.HEIGHT / 2;\r\n  \r\n      if (IS_HIDPI) {\r\n        restartSourceWidth *= 2;\r\n        restartSourceHeight *= 2;\r\n        framePosX *= 2;\r\n      }\r\n  \r\n      this.canvasCtx.save();\r\n  \r\n      if (IS_RTL) {\r\n        this.canvasCtx.translate(this.canvasDimensions.WIDTH, 0);\r\n        this.canvasCtx.scale(-1, 1);\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(\r\n          Runner.origImageSprite, this.restartImgPos.x + framePosX,\r\n          this.restartImgPos.y, restartSourceWidth, restartSourceHeight,\r\n          restartTargetX, restartTargetY, dimensions.RESTART_WIDTH,\r\n          dimensions.RESTART_HEIGHT);\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Draw the panel.\r\n     * @param {boolean} opt_altGameModeActive\r\n     * @param {!Trex} opt_tRex\r\n     */\r\n    draw(opt_altGameModeActive, opt_tRex) {\r\n      if (opt_altGameModeActive) {\r\n        this.altGameModeActive = opt_altGameModeActive;\r\n      }\r\n  \r\n      this.drawGameOverText(GameOverPanel.dimensions, false);\r\n      this.drawRestartButton();\r\n      this.drawAltGameElements(opt_tRex);\r\n      this.update();\r\n    },\r\n  \r\n    /**\r\n     * Update animation frames.\r\n     */\r\n    update() {\r\n      // console.log(\"Why not here?\");\r\n      const now = getTimeStamp();\r\n      const deltaTime = now - (this.frameTimeStamp || now);\r\n  \r\n      this.frameTimeStamp = now;\r\n      this.animTimer += deltaTime;\r\n      this.flashTimer += deltaTime;\r\n  \r\n      // console.log(this.currentFrame);\r\n      // console.log(this.typeConfig.numFrames);\r\n      //console.log(deltaTime);\r\n      // Restart Button\r\n      if (this.currentFrame == 0 &&\r\n          this.animTimer > GameOverPanel.LOGO_PAUSE_DURATION) {\r\n        this.animTimer = 0;\r\n        this.currentFrame++;\r\n        this.drawRestartButton();\r\n      } else if (\r\n          this.currentFrame > 0 &&\r\n          this.currentFrame < GameOverPanel.animConfig.frames.length) {\r\n        if (this.animTimer >= GameOverPanel.animConfig.msPerFrame) {\r\n          this.currentFrame++;\r\n          this.drawRestartButton();\r\n        }\r\n      } else if (\r\n          !this.altGameModeActive &&\r\n          this.currentFrame == GameOverPanel.animConfig.frames.length) {\r\n        this.reset();\r\n        return;\r\n      }\r\n  \r\n      // Game over text\r\n      if (this.altGameModeActive &&\r\n          Runner_spriteDefinitionByType.original.ALT_GAME_OVER_TEXT_CONFIG) {\r\n        const altTextConfig =\r\n            Runner_spriteDefinitionByType.original.ALT_GAME_OVER_TEXT_CONFIG;\r\n  \r\n        if (this.flashCounter < GameOverPanel.FLASH_ITERATIONS &&\r\n            this.flashTimer > altTextConfig.FLASH_DURATION) {\r\n          this.flashTimer = 0;\r\n          this.originalText = !this.originalText;\r\n  \r\n          this.clearGameOverTextBounds();\r\n          if (this.originalText) {\r\n            this.drawGameOverText(GameOverPanel.dimensions, false);\r\n            this.flashCounter++;\r\n          } else {\r\n            this.drawGameOverText(altTextConfig, true);\r\n          }\r\n        } else if (this.flashCounter >= GameOverPanel.FLASH_ITERATIONS) {\r\n          this.reset();\r\n          return;\r\n        }\r\n      }\r\n  \r\n      this.gameOverRafId = requestAnimationFrame(this.update.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Clear game over text.\r\n     */\r\n    clearGameOverTextBounds() {\r\n      this.canvasCtx.save();\r\n  \r\n      this.canvasCtx.clearRect(\r\n          Math.round(\r\n              this.canvasDimensions.WIDTH / 2 -\r\n              (GameOverPanel.dimensions.TEXT_WIDTH / 2)),\r\n          Math.round((this.canvasDimensions.HEIGHT - 25) / 3),\r\n          GameOverPanel.dimensions.TEXT_WIDTH,\r\n          GameOverPanel.dimensions.TEXT_HEIGHT + 4);\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    reset() {\r\n      if (this.gameOverRafId) {\r\n        cancelAnimationFrame(this.gameOverRafId);\r\n        this.gameOverRafId = null;\r\n      }\r\n      this.animTimer = 0;\r\n      this.frameTimeStamp = 0;\r\n      this.currentFrame = 0;\r\n      this.flashTimer = 0;\r\n      this.flashCounter = 0;\r\n      this.originalText = true;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Check for a collision.\r\n   * @param {!Obstacle} obstacle\r\n   * @param {!Trex} tRex T-rex object.\r\n   * @param {CanvasRenderingContext2D=} opt_canvasCtx Optional canvas context for\r\n   *    drawing collision boxes.\r\n   * @return {Array<CollisionBox>|undefined}\r\n   */\r\n  function checkForCollision(obstacle, tRex, opt_canvasCtx) {\r\n    const obstacleBoxXPos = Runner.defaultDimensions.WIDTH + obstacle.xPos;\r\n    // console.log(obstacleBoxXPos);\r\n  \r\n    // Adjustments are made to the bounding box as there is a 1 pixel white\r\n    // border around the t-rex and obstacles.\r\n    const tRexBox = new CollisionBox(\r\n        tRex.xPos + 1,\r\n        tRex.yPos + 1,\r\n        tRex.config.WIDTH - 2,\r\n        tRex.config.HEIGHT - 2);\r\n    // console.log(tRexBox);\r\n  \r\n    const obstacleBox = new CollisionBox(\r\n        obstacle.xPos + 1,\r\n        obstacle.yPos + 1,\r\n        obstacle.typeConfig.width * obstacle.size - 2,\r\n        obstacle.typeConfig.height - 2);\r\n    // console.log(obstacleBox);\r\n  \r\n    // Debug outer box\r\n    if (opt_canvasCtx) {\r\n      drawCollisionBoxes(opt_canvasCtx, tRexBox, obstacleBox);\r\n    }\r\n  \r\n    // Simple outer bounds check.\r\n    if (boxCompare(tRexBox, obstacleBox)) {\r\n      const collisionBoxes = obstacle.collisionBoxes;\r\n      let tRexCollisionBoxes = [];\r\n  \r\n      if (Runner.isAltGameModeEnabled()) {\r\n        tRexCollisionBoxes = Runner.spriteDefinition.TREX.COLLISION_BOXES;\r\n      } else {\r\n        tRexCollisionBoxes = tRex.ducking ? Trex.collisionBoxes.DUCKING :\r\n                                            Trex.collisionBoxes.RUNNING;\r\n      }\r\n  \r\n      // Detailed axis aligned box check.\r\n      for (let t = 0; t < tRexCollisionBoxes.length; t++) {\r\n        for (let i = 0; i < collisionBoxes.length; i++) {\r\n          // Adjust the box to actual positions.\r\n          const adjTrexBox =\r\n              createAdjustedCollisionBox(tRexCollisionBoxes[t], tRexBox);\r\n          const adjObstacleBox =\r\n              createAdjustedCollisionBox(collisionBoxes[i], obstacleBox);\r\n          const crashed = boxCompare(adjTrexBox, adjObstacleBox);\r\n  \r\n          // Draw boxes for debug.\r\n          if (opt_canvasCtx) {\r\n            drawCollisionBoxes(opt_canvasCtx, adjTrexBox, adjObstacleBox);\r\n          }\r\n  \r\n          if (crashed) {\r\n            return [adjTrexBox, adjObstacleBox];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Adjust the collision box.\r\n   * @param {!CollisionBox} box The original box.\r\n   * @param {!CollisionBox} adjustment Adjustment box.\r\n   * @return {CollisionBox} The adjusted collision box object.\r\n   */\r\n  function createAdjustedCollisionBox(box, adjustment) {\r\n    return new CollisionBox(\r\n        box.x + adjustment.x,\r\n        box.y + adjustment.y,\r\n        box.width,\r\n        box.height);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Draw the collision boxes for debug.\r\n   */\r\n  function drawCollisionBoxes(canvasCtx, tRexBox, obstacleBox) {\r\n    canvasCtx.save();\r\n    canvasCtx.strokeStyle = '#f00';\r\n    canvasCtx.strokeRect(tRexBox.x, tRexBox.y, tRexBox.width, tRexBox.height);\r\n  \r\n    canvasCtx.strokeStyle = '#0f0';\r\n    canvasCtx.strokeRect(obstacleBox.x, obstacleBox.y,\r\n        obstacleBox.width, obstacleBox.height);\r\n    canvasCtx.restore();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Compare two collision boxes for a collision.\r\n   * @param {CollisionBox} tRexBox\r\n   * @param {CollisionBox} obstacleBox\r\n   * @return {boolean} Whether the boxes intersected.\r\n   */\r\n  function boxCompare(tRexBox, obstacleBox) {\r\n    let crashed = false;\r\n    const tRexBoxX = tRexBox.x;\r\n    const tRexBoxY = tRexBox.y;\r\n  \r\n    const obstacleBoxX = obstacleBox.x;\r\n    const obstacleBoxY = obstacleBox.y;\r\n  \r\n    // Axis-Aligned Bounding Box method.\r\n    if (tRexBox.x < obstacleBoxX + obstacleBox.width &&\r\n        tRexBox.x + tRexBox.width > obstacleBoxX &&\r\n        tRexBox.y < obstacleBox.y + obstacleBox.height &&\r\n        tRexBox.height + tRexBox.y > obstacleBox.y) {\r\n      crashed = true;\r\n    }\r\n  \r\n    return crashed;\r\n  }\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Collision box object.\r\n   * @param {number} x X position.\r\n   * @param {number} y Y Position.\r\n   * @param {number} w Width.\r\n   * @param {number} h Height.\r\n   * @constructor\r\n   */\r\n  export function CollisionBox(x, y, w, h) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = w;\r\n    this.height = h;\r\n  }\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Obstacle.\r\n   * @param {CanvasRenderingContext2D} canvasCtx\r\n   * @param {ObstacleType} type\r\n   * @param {Object} spriteImgPos Obstacle position in sprite.\r\n   * @param {Object} dimensions\r\n   * @param {number} gapCoefficient Mutipler in determining the gap.\r\n   * @param {number} speed\r\n   * @param {number=} opt_xOffset\r\n   * @param {boolean=} opt_isAltGameMode\r\n   * @constructor\r\n   */\r\n  function Obstacle(\r\n      canvasCtx, type, spriteImgPos, dimensions, gapCoefficient, speed,\r\n      opt_xOffset, opt_isAltGameMode) {\r\n    this.canvasCtx = canvasCtx;\r\n    this.spritePos = spriteImgPos;\r\n    this.typeConfig = type;\r\n    this.gapCoefficient = Runner.slowDown ? gapCoefficient * 2 : gapCoefficient;\r\n    this.size = getRandomNum(1, Obstacle.MAX_OBSTACLE_LENGTH);\r\n    this.dimensions = dimensions;\r\n    this.remove = false;\r\n    this.xPos = dimensions.WIDTH + (opt_xOffset || 0);\r\n    this.yPos = 0;\r\n    this.width = 0;\r\n    this.collisionBoxes = [];\r\n    this.gap = 0;\r\n    this.speedOffset = 0;\r\n    this.altGameModeActive = opt_isAltGameMode;\r\n    this.imageSprite = this.typeConfig.type == 'COLLECTABLE' ?\r\n        Runner.altCommonImageSprite :\r\n        this.altGameModeActive ? Runner.altGameImageSprite : Runner.imageSprite;\r\n  \r\n    // For animated obstacles.\r\n    this.currentFrame = 0;\r\n    this.timer = 0;\r\n  \r\n    this.init(speed);\r\n  }\r\n  \r\n  /**\r\n   * Coefficient for calculating the maximum gap.\r\n   */\r\n  Obstacle.MAX_GAP_COEFFICIENT = 1.5;\r\n  \r\n  /**\r\n   * Maximum obstacle grouping count.\r\n   */\r\n  Obstacle.MAX_OBSTACLE_LENGTH = 3;\r\n  \r\n  \r\n  Obstacle.prototype = {\r\n    /**\r\n     * Initialise the DOM for the obstacle.\r\n     * @param {number} speed\r\n     */\r\n    init(speed) {\r\n      this.cloneCollisionBoxes();\r\n  \r\n      // Only allow sizing if we're at the right speed.\r\n      if (this.size > 1 && this.typeConfig.multipleSpeed > speed) {\r\n        this.size = 1;\r\n      }\r\n  \r\n      this.width = this.typeConfig.width * this.size;\r\n  \r\n      // Check if obstacle can be positioned at various heights.\r\n      if (Array.isArray(this.typeConfig.yPos)) {\r\n        const yPosConfig =\r\n            IS_MOBILE ? this.typeConfig.yPosMobile : this.typeConfig.yPos;\r\n        this.yPos = yPosConfig[getRandomNum(0, yPosConfig.length - 1)];\r\n      } else {\r\n        this.yPos = this.typeConfig.yPos;\r\n      }\r\n  \r\n      this.draw();\r\n  \r\n      // Make collision box adjustments,\r\n      // Central box is adjusted to the size as one box.\r\n      //      ____        ______        ________\r\n      //    _|   |-|    _|     |-|    _|       |-|\r\n      //   | |<->| |   | |<--->| |   | |<----->| |\r\n      //   | | 1 | |   | |  2  | |   | |   3   | |\r\n      //   |_|___|_|   |_|_____|_|   |_|_______|_|\r\n      //\r\n      if (this.size > 1) {\r\n        this.collisionBoxes[1].width = this.width - this.collisionBoxes[0].width -\r\n            this.collisionBoxes[2].width;\r\n        this.collisionBoxes[2].x = this.width - this.collisionBoxes[2].width;\r\n      }\r\n  \r\n      // For obstacles that go at a different speed from the horizon.\r\n      if (this.typeConfig.speedOffset) {\r\n        this.speedOffset = Math.random() > 0.5 ? this.typeConfig.speedOffset :\r\n                                                 -this.typeConfig.speedOffset;\r\n      }\r\n  \r\n      this.gap = this.getGap(this.gapCoefficient, speed);\r\n  \r\n      // Increase gap for audio cues enabled.\r\n      if (Runner.audioCues) {\r\n        this.gap *= 2;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Draw and crop based on size.\r\n     */\r\n    draw() {\r\n      let sourceWidth = this.typeConfig.width;\r\n      let sourceHeight = this.typeConfig.height;\r\n  \r\n      if (IS_HIDPI) {\r\n        sourceWidth = sourceWidth * 2;\r\n        sourceHeight = sourceHeight * 2;\r\n      }\r\n  \r\n      // X position in sprite.\r\n      let sourceX =\r\n          (sourceWidth * this.size) * (0.5 * (this.size - 1)) + this.spritePos.x;\r\n  \r\n      // Animation frames.\r\n      if (this.currentFrame > 0) {\r\n        sourceX += sourceWidth * this.currentFrame;\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(\r\n          this.imageSprite, sourceX, this.spritePos.y, sourceWidth * this.size,\r\n          sourceHeight, this.xPos, this.yPos, this.typeConfig.width * this.size,\r\n          this.typeConfig.height);\r\n    },\r\n  \r\n    /**\r\n     * Obstacle frame update.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    update(deltaTime, speed) {\r\n      if (!this.remove) {\r\n        if (this.typeConfig.speedOffset) {\r\n          speed += this.speedOffset;\r\n        }\r\n        this.xPos -= Math.floor((speed * FPS / 1000) * deltaTime);\r\n  \r\n        // Update frame\r\n        if (this.typeConfig.numFrames) {\r\n          this.timer += deltaTime;\r\n          if (this.timer >= this.typeConfig.frameRate) {\r\n            this.currentFrame =\r\n                this.currentFrame === this.typeConfig.numFrames - 1 ?\r\n                0 :\r\n                this.currentFrame + 1;\r\n            this.timer = 0;\r\n          }\r\n        }\r\n        this.draw();\r\n  \r\n        if (!this.isVisible()) {\r\n          this.remove = true;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Calculate a random gap size.\r\n     * - Minimum gap gets wider as speed increses\r\n     * @param {number} gapCoefficient\r\n     * @param {number} speed\r\n     * @return {number} The gap size.\r\n     */\r\n    getGap(gapCoefficient, speed) {\r\n      const minGap = Math.round(\r\n          this.width * speed + this.typeConfig.minGap * gapCoefficient);\r\n      const maxGap = Math.round(minGap * Obstacle.MAX_GAP_COEFFICIENT);\r\n      return getRandomNum(minGap, maxGap);\r\n    },\r\n  \r\n    /**\r\n     * Check if obstacle is visible.\r\n     * @return {boolean} Whether the obstacle is in the game area.\r\n     */\r\n    isVisible() {\r\n      return this.xPos + this.width > 0;\r\n    },\r\n  \r\n    /**\r\n     * Make a copy of the collision boxes, since these will change based on\r\n     * obstacle type and size.\r\n     */\r\n    cloneCollisionBoxes() {\r\n      const collisionBoxes = this.typeConfig.collisionBoxes;\r\n  \r\n      for (let i = collisionBoxes.length - 1; i >= 0; i--) {\r\n        this.collisionBoxes[i] = new CollisionBox(\r\n            collisionBoxes[i].x, collisionBoxes[i].y, collisionBoxes[i].width,\r\n            collisionBoxes[i].height);\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  /**\r\n   * T-rex game character.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {Object} spritePos Positioning within image sprite.\r\n   * @constructor\r\n   */\r\n  function Trex(canvas, spritePos) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.spritePos = spritePos;\r\n    this.xPos = 0;\r\n    this.yPos = 0;\r\n    this.xInitialPos = 0;\r\n    // Position when on the ground.\r\n    this.groundYPos = 0;\r\n    this.currentFrame = 0;\r\n    this.currentAnimFrames = [];\r\n    this.blinkDelay = 0;\r\n    this.blinkCount = 0;\r\n    this.animStartTime = 0;\r\n    this.timer = 0;\r\n    this.msPerFrame = 1000 / FPS;\r\n    this.config = Object.assign(Trex.config, Trex.normalJumpConfig);\r\n    // Current status.\r\n    this.status = Trex.status.WAITING;\r\n    this.jumping = false;\r\n    this.ducking = false;\r\n    this.jumpVelocity = 0;\r\n    this.reachedMinHeight = false;\r\n    this.speedDrop = false;\r\n    this.jumpCount = 0;\r\n    this.jumpspotX = 0;\r\n    this.altGameModeEnabled = false;\r\n    this.flashing = false;\r\n  \r\n    this.init();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * T-rex player config.\r\n   */\r\n  Trex.config = {\r\n    DROP_VELOCITY: -5,\r\n    FLASH_OFF: 175,\r\n    FLASH_ON: 100,\r\n    HEIGHT: 47,\r\n    HEIGHT_DUCK: 25,\r\n    INTRO_DURATION: 1500,\r\n    SPEED_DROP_COEFFICIENT: 3,\r\n    SPRITE_WIDTH: 262,\r\n    START_X_POS: 50,\r\n    WIDTH: 44,\r\n    WIDTH_DUCK: 59\r\n  };\r\n  \r\n  Trex.slowJumpConfig = {\r\n    GRAVITY: 0.25,\r\n    MAX_JUMP_HEIGHT: 50,\r\n    MIN_JUMP_HEIGHT: 45,\r\n    INITIAL_JUMP_VELOCITY: -20,\r\n  };\r\n  \r\n  Trex.normalJumpConfig = {\r\n    GRAVITY: 0.6,\r\n    MAX_JUMP_HEIGHT: 30,\r\n    MIN_JUMP_HEIGHT: 30,\r\n    INITIAL_JUMP_VELOCITY: -10,\r\n  };\r\n  \r\n  /**\r\n   * Used in collision detection.\r\n   * @enum {Array<CollisionBox>}\r\n   */\r\n  Trex.collisionBoxes = {\r\n    DUCKING: [new CollisionBox(1, 18, 55, 25)],\r\n    RUNNING: [\r\n      new CollisionBox(22, 0, 17, 16), new CollisionBox(1, 18, 30, 9),\r\n      new CollisionBox(10, 35, 14, 8), new CollisionBox(1, 24, 29, 5),\r\n      new CollisionBox(5, 30, 21, 4), new CollisionBox(9, 34, 15, 4)\r\n    ]\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Animation states.\r\n   * @enum {string}\r\n   */\r\n  Trex.status = {\r\n    CRASHED: 'CRASHED',\r\n    DUCKING: 'DUCKING',\r\n    JUMPING: 'JUMPING',\r\n    RUNNING: 'RUNNING',\r\n    WAITING: 'WAITING'\r\n  };\r\n  \r\n  /**\r\n   * Blinking coefficient.\r\n   * @const\r\n   */\r\n  Trex.BLINK_TIMING = 7000;\r\n  \r\n  \r\n  /**\r\n   * Animation config for different states.\r\n   * @enum {Object}\r\n   */\r\n  Trex.animFrames = {\r\n    WAITING: {\r\n      frames: [44, 0],\r\n      msPerFrame: 1000 / 3\r\n    },\r\n    RUNNING: {\r\n      frames: [88, 132],\r\n      msPerFrame: 1000 / 12\r\n    },\r\n    CRASHED: {\r\n      frames: [220],\r\n      msPerFrame: 1000 / 60\r\n    },\r\n    JUMPING: {\r\n      frames: [0],\r\n      msPerFrame: 1000 / 60\r\n    },\r\n    DUCKING: {\r\n      frames: [264, 323],\r\n      msPerFrame: 1000 / 8\r\n    }\r\n  };\r\n  \r\n  \r\n  Trex.prototype = {\r\n    /**\r\n     * T-rex player initaliser.\r\n     * Sets the t-rex to blink at random intervals.\r\n     */\r\n    init() {\r\n      this.groundYPos = Runner.defaultDimensions.HEIGHT - this.config.HEIGHT -\r\n          Runner.config.BOTTOM_PAD;\r\n      this.yPos = this.groundYPos;\r\n      this.minJumpHeight = this.groundYPos - this.config.MIN_JUMP_HEIGHT;\r\n  \r\n      this.draw(0, 0);\r\n      this.update(0, Trex.status.WAITING);\r\n    },\r\n  \r\n    /**\r\n     * Assign the appropriate jump parameters based on the game speed.\r\n     */\r\n    enableSlowConfig: function() {\r\n      const jumpConfig =\r\n          Runner.slowDown ? Trex.slowJumpConfig : Trex.normalJumpConfig;\r\n      Trex.config = Object.assign(Trex.config, jumpConfig);\r\n  \r\n      this.adjustAltGameConfigForSlowSpeed();\r\n    },\r\n  \r\n    /**\r\n     * Enables the alternative game. Redefines the dino config.\r\n     * @param {Object} spritePos New positioning within image sprite.\r\n     */\r\n    enableAltGameMode: function(spritePos) {\r\n      this.altGameModeEnabled = true;\r\n      this.spritePos = spritePos;\r\n      const spriteDefinition = Runner.spriteDefinition['TREX'];\r\n  \r\n      // Update animation frames.\r\n      Trex.animFrames.RUNNING.frames =\r\n          [spriteDefinition.RUNNING_1.x, spriteDefinition.RUNNING_2.x];\r\n      Trex.animFrames.CRASHED.frames = [spriteDefinition.CRASHED.x];\r\n  \r\n      if (typeof spriteDefinition.JUMPING.x == 'object') {\r\n        Trex.animFrames.JUMPING.frames = spriteDefinition.JUMPING.x;\r\n      } else {\r\n        Trex.animFrames.JUMPING.frames = [spriteDefinition.JUMPING.x];\r\n      }\r\n  \r\n      Trex.animFrames.DUCKING.frames =\r\n          [spriteDefinition.RUNNING_1.x, spriteDefinition.RUNNING_2.x];\r\n  \r\n      // Update Trex config\r\n      Trex.config.GRAVITY = spriteDefinition.GRAVITY || Trex.config.GRAVITY;\r\n      Trex.config.HEIGHT = spriteDefinition.RUNNING_1.h,\r\n      Trex.config.INITIAL_JUMP_VELOCITY = spriteDefinition.INITIAL_JUMP_VELOCITY;\r\n      Trex.config.MAX_JUMP_HEIGHT = spriteDefinition.MAX_JUMP_HEIGHT;\r\n      Trex.config.MIN_JUMP_HEIGHT = spriteDefinition.MIN_JUMP_HEIGHT;\r\n      Trex.config.WIDTH = spriteDefinition.RUNNING_1.w;\r\n      Trex.config.WIDTH_JUMP = spriteDefinition.JUMPING.w;\r\n      Trex.config.INVERT_JUMP = spriteDefinition.INVERT_JUMP;\r\n  \r\n      this.adjustAltGameConfigForSlowSpeed(spriteDefinition.GRAVITY);\r\n      this.config = Trex.config;\r\n  \r\n      // Adjust bottom horizon placement.\r\n      this.groundYPos = Runner.defaultDimensions.HEIGHT - this.config.HEIGHT -\r\n          Runner.spriteDefinition['BOTTOM_PAD'];\r\n      this.yPos = this.groundYPos;\r\n      this.reset();\r\n    },\r\n  \r\n    /**\r\n     * Slow speeds adjustments for the alt game modes.\r\n     * @param {number=} opt_gravityValue\r\n     */\r\n    adjustAltGameConfigForSlowSpeed: function(opt_gravityValue) {\r\n      if (Runner.slowDown) {\r\n        if (opt_gravityValue) {\r\n          Trex.config.GRAVITY = opt_gravityValue / 1.5;\r\n        }\r\n        Trex.config.MIN_JUMP_HEIGHT *= 1.5;\r\n        Trex.config.MAX_JUMP_HEIGHT *= 1.5;\r\n        Trex.config.INITIAL_JUMP_VELOCITY =\r\n            Trex.config.INITIAL_JUMP_VELOCITY * 1.5;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Setter whether dino is flashing.\r\n     * @param {boolean} status\r\n     */\r\n    setFlashing: function(status) {\r\n      this.flashing = status;\r\n    },\r\n  \r\n    /**\r\n     * Setter for the jump velocity.\r\n     * The approriate drop velocity is also set.\r\n     * @param {number} setting\r\n     */\r\n    setJumpVelocity(setting) {\r\n      this.config.INITIAL_JUMP_VELOCITY = -setting;\r\n      this.config.DROP_VELOCITY = -setting / 2;\r\n    },\r\n  \r\n    /**\r\n     * Set the animation status.\r\n     * @param {!number} deltaTime\r\n     * @param {Trex.status=} opt_status Optional status to switch to.\r\n     */\r\n    update(deltaTime, opt_status) {\r\n      this.timer += deltaTime;\r\n  \r\n      // Update the status.\r\n      if (opt_status) {\r\n        this.status = opt_status;\r\n        this.currentFrame = 0;\r\n        this.msPerFrame = Trex.animFrames[opt_status].msPerFrame;\r\n        this.currentAnimFrames = Trex.animFrames[opt_status].frames;\r\n  \r\n        if (opt_status === Trex.status.WAITING) {\r\n          this.animStartTime = getTimeStamp();\r\n          this.setBlinkDelay();\r\n        }\r\n      }\r\n      // Game intro animation, T-rex moves in from the left.\r\n      if (this.playingIntro && this.xPos < this.config.START_X_POS) {\r\n        this.xPos += Math.round((this.config.START_X_POS /\r\n            this.config.INTRO_DURATION) * deltaTime);\r\n        this.xInitialPos = this.xPos;\r\n      }\r\n  \r\n      if (this.status === Trex.status.WAITING) {\r\n        this.blink(getTimeStamp());\r\n      } else {\r\n        this.draw(this.currentAnimFrames[this.currentFrame], 0);\r\n      }\r\n  \r\n      // Update the frame position.\r\n      if (!this.flashing && this.timer >= this.msPerFrame) {\r\n        this.currentFrame = this.currentFrame ==\r\n            this.currentAnimFrames.length - 1 ? 0 : this.currentFrame + 1;\r\n        this.timer = 0;\r\n      }\r\n  \r\n      if (!this.altGameModeEnabled) {\r\n        // Speed drop becomes duck if the down key is still being pressed.\r\n        if (this.speedDrop && this.yPos === this.groundYPos) {\r\n          this.speedDrop = false;\r\n          this.setDuck(true);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Draw the t-rex to a particular position.\r\n     * @param {number} x\r\n     * @param {number} y\r\n     */\r\n    draw(x, y) {\r\n      let sourceX = x;\r\n      let sourceY = y;\r\n      let sourceWidth = this.ducking && this.status !== Trex.status.CRASHED ?\r\n          this.config.WIDTH_DUCK :\r\n          this.config.WIDTH;\r\n      let sourceHeight = this.config.HEIGHT;\r\n      const outputHeight = sourceHeight;\r\n  \r\n      let jumpOffset = Runner.spriteDefinition.TREX.JUMPING.xOffset;\r\n  \r\n      // Width of sprite changes on jump.\r\n      if (this.altGameModeEnabled && this.jumping &&\r\n          this.status !== Trex.status.CRASHED) {\r\n        sourceWidth = this.config.WIDTH_JUMP;\r\n      }\r\n  \r\n      if (IS_HIDPI) {\r\n        sourceX *= 2;\r\n        sourceY *= 2;\r\n        sourceWidth *= 2;\r\n        sourceHeight *= 2;\r\n        jumpOffset *= 2;\r\n      }\r\n  \r\n      // Adjustments for sprite sheet position.\r\n      sourceX += this.spritePos.x;\r\n      sourceY += this.spritePos.y;\r\n  \r\n      // Flashing.\r\n      if (this.flashing) {\r\n        if (this.timer < this.config.FLASH_ON) {\r\n          this.canvasCtx.globalAlpha = 0.5;\r\n        } else if (this.timer > this.config.FLASH_OFF) {\r\n          this.timer = 0;\r\n        }\r\n      }\r\n  \r\n      // Ducking.\r\n      if (!this.altGameModeEnabled && this.ducking &&\r\n          this.status !== Trex.status.CRASHED) {\r\n        this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\r\n            sourceWidth, sourceHeight,\r\n            this.xPos, this.yPos,\r\n            this.config.WIDTH_DUCK, outputHeight);\r\n      } else if (\r\n          this.altGameModeEnabled && this.jumping &&\r\n          this.status !== Trex.status.CRASHED) {\r\n        // Jumping with adjustments.\r\n        this.canvasCtx.drawImage(\r\n            Runner.imageSprite, sourceX, sourceY, sourceWidth, sourceHeight,\r\n            this.xPos - jumpOffset, this.yPos, this.config.WIDTH_JUMP,\r\n            outputHeight);\r\n      } else {\r\n        // Crashed whilst ducking. Trex is standing up so needs adjustment.\r\n        if (this.ducking && this.status === Trex.status.CRASHED) {\r\n          this.xPos++;\r\n        }\r\n        // Standing / running\r\n        this.canvasCtx.drawImage(Runner.imageSprite, sourceX, sourceY,\r\n            sourceWidth, sourceHeight,\r\n            this.xPos, this.yPos,\r\n            this.config.WIDTH, outputHeight);\r\n      }\r\n      this.canvasCtx.globalAlpha = 1;\r\n    },\r\n  \r\n    /**\r\n     * Sets a random time for the blink to happen.\r\n     */\r\n    setBlinkDelay() {\r\n      this.blinkDelay = Math.ceil(Math.random() * Trex.BLINK_TIMING);\r\n    },\r\n  \r\n    /**\r\n     * Make t-rex blink at random intervals.\r\n     * @param {number} time Current time in milliseconds.\r\n     */\r\n    blink(time) {\r\n      const deltaTime = time - this.animStartTime;\r\n  \r\n      if (deltaTime >= this.blinkDelay) {\r\n        this.draw(this.currentAnimFrames[this.currentFrame], 0);\r\n  \r\n        if (this.currentFrame === 1) {\r\n          // Set new random delay to blink.\r\n          this.setBlinkDelay();\r\n          this.animStartTime = time;\r\n          this.blinkCount++;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Initialise a jump.\r\n     * @param {number} speed\r\n     */\r\n    startJump(speed) {\r\n      if (!this.jumping) {\r\n        this.update(0, Trex.status.JUMPING);\r\n        // Tweak the jump velocity based on the speed.\r\n        this.jumpVelocity = this.config.INITIAL_JUMP_VELOCITY - (speed / 10);\r\n        this.jumping = true;\r\n        this.reachedMinHeight = false;\r\n        this.speedDrop = false;\r\n  \r\n        if (this.config.INVERT_JUMP) {\r\n          this.minJumpHeight = this.groundYPos + this.config.MIN_JUMP_HEIGHT;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Jump is complete, falling down.\r\n     */\r\n    endJump() {\r\n      if (this.reachedMinHeight &&\r\n          this.jumpVelocity < this.config.DROP_VELOCITY) {\r\n        this.jumpVelocity = this.config.DROP_VELOCITY;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update frame for a jump.\r\n     * @param {number} deltaTime\r\n     */\r\n    updateJump(deltaTime) {\r\n      const msPerFrame = Trex.animFrames[this.status].msPerFrame;\r\n      const framesElapsed = deltaTime / msPerFrame;\r\n  \r\n      // Speed drop makes Trex fall faster.\r\n      if (this.speedDrop) {\r\n        this.yPos += Math.round(this.jumpVelocity *\r\n            this.config.SPEED_DROP_COEFFICIENT * framesElapsed);\r\n      } else if (this.config.INVERT_JUMP) {\r\n        this.yPos -= Math.round(this.jumpVelocity * framesElapsed);\r\n      } else {\r\n        this.yPos += Math.round(this.jumpVelocity * framesElapsed);\r\n      }\r\n  \r\n      this.jumpVelocity += this.config.GRAVITY * framesElapsed;\r\n  \r\n      // Minimum height has been reached.\r\n      if (this.config.INVERT_JUMP && (this.yPos > this.minJumpHeight) ||\r\n          !this.config.INVERT_JUMP && (this.yPos < this.minJumpHeight) ||\r\n          this.speedDrop) {\r\n        this.reachedMinHeight = true;\r\n      }\r\n  \r\n      // Reached max height.\r\n      if (this.config.INVERT_JUMP && (this.yPos > -this.config.MAX_JUMP_HEIGHT) ||\r\n          !this.config.INVERT_JUMP && (this.yPos < this.config.MAX_JUMP_HEIGHT) ||\r\n          this.speedDrop) {\r\n        this.endJump();\r\n      }\r\n  \r\n      // Back down at ground level. Jump completed.\r\n      if ((this.config.INVERT_JUMP && this.yPos) < this.groundYPos ||\r\n          (!this.config.INVERT_JUMP && this.yPos) > this.groundYPos) {\r\n        this.reset();\r\n        this.jumpCount++;\r\n  \r\n        if (Runner.audioCues) {\r\n          Runner.generatedSoundFx.loopFootSteps();\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Set the speed drop. Immediately cancels the current jump.\r\n     */\r\n    setSpeedDrop() {\r\n      this.speedDrop = true;\r\n      this.jumpVelocity = 1;\r\n    },\r\n  \r\n    /**\r\n     * @param {boolean} isDucking\r\n     */\r\n    setDuck(isDucking) {\r\n      if (isDucking && this.status !== Trex.status.DUCKING) {\r\n        this.update(0, Trex.status.DUCKING);\r\n        this.ducking = true;\r\n      } else if (this.status === Trex.status.DUCKING) {\r\n        this.update(0, Trex.status.RUNNING);\r\n        this.ducking = false;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Reset the t-rex to running at start of game.\r\n     */\r\n    reset() {\r\n      this.xPos = this.xInitialPos;\r\n      this.yPos = this.groundYPos;\r\n      this.jumpVelocity = 0;\r\n      this.jumping = false;\r\n      this.ducking = false;\r\n      this.update(0, Trex.status.RUNNING);\r\n      this.midair = false;\r\n      this.speedDrop = false;\r\n      this.jumpCount = 0;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Handles displaying the distance meter.\r\n   * @param {!HTMLCanvasElement} canvas\r\n   * @param {Object} spritePos Image position in sprite.\r\n   * @param {number} canvasWidth\r\n   * @constructor\r\n   */\r\n  function DistanceMeter(canvas, spritePos, canvasWidth) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.image = Runner.imageSprite;\r\n    this.spritePos = spritePos;\r\n    this.x = 0;\r\n    this.y = 5;\r\n  \r\n    this.currentDistance = 0;\r\n    this.maxScore = 0;\r\n    this.highScore = '0';\r\n    this.container = null;\r\n  \r\n    this.digits = [];\r\n    this.achievement = false;\r\n    this.defaultString = '';\r\n    this.flashTimer = 0;\r\n    this.flashIterations = 0;\r\n    this.invertTrigger = false;\r\n    this.flashingRafId = null;\r\n    this.highScoreBounds = {};\r\n    this.highScoreFlashing = false;\r\n  \r\n    this.config = DistanceMeter.config;\r\n    this.maxScoreUnits = this.config.MAX_DISTANCE_UNITS;\r\n    this.canvasWidth = canvasWidth;\r\n    this.init(canvasWidth);\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @enum {number}\r\n   */\r\n  DistanceMeter.dimensions = {\r\n    WIDTH: 10,\r\n    HEIGHT: 13,\r\n    DEST_WIDTH: 11\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Y positioning of the digits in the sprite sheet.\r\n   * X position is always 0.\r\n   * @type {Array<number>}\r\n   */\r\n  DistanceMeter.yPos = [0, 13, 27, 40, 53, 67, 80, 93, 107, 120];\r\n  \r\n  \r\n  /**\r\n   * Distance meter config.\r\n   * @enum {number}\r\n   */\r\n  DistanceMeter.config = {\r\n    // Number of digits.\r\n    MAX_DISTANCE_UNITS: 5,\r\n  \r\n    // Distance that causes achievement animation.\r\n    ACHIEVEMENT_DISTANCE: 100,\r\n  \r\n    // Used for conversion from pixel distance to a scaled unit.\r\n    COEFFICIENT: 0.025,\r\n  \r\n    // Flash duration in milliseconds.\r\n    FLASH_DURATION: 1000 / 4,\r\n  \r\n    // Flash iterations for achievement animation.\r\n    FLASH_ITERATIONS: 3,\r\n  \r\n    // Padding around the high score hit area.\r\n    HIGH_SCORE_HIT_AREA_PADDING: 4\r\n  };\r\n  \r\n  \r\n  DistanceMeter.prototype = {\r\n    /**\r\n     * Initialise the distance meter to '00000'.\r\n     * @param {number} width Canvas width in px.\r\n     */\r\n    init(width) {\r\n      let maxDistanceStr = '';\r\n  \r\n      this.calcXPos(width);\r\n      this.maxScore = this.maxScoreUnits;\r\n      for (let i = 0; i < this.maxScoreUnits; i++) {\r\n        this.draw(i, 0);\r\n        this.defaultString += '0';\r\n        maxDistanceStr += '9';\r\n      }\r\n  \r\n      this.maxScore = parseInt(maxDistanceStr, 10);\r\n    },\r\n  \r\n    /**\r\n     * Calculate the xPos in the canvas.\r\n     * @param {number} canvasWidth\r\n     */\r\n    calcXPos(canvasWidth) {\r\n      this.x = canvasWidth - (DistanceMeter.dimensions.DEST_WIDTH *\r\n          (this.maxScoreUnits + 1));\r\n    },\r\n  \r\n    /**\r\n     * Draw a digit to canvas.\r\n     * @param {number} digitPos Position of the digit.\r\n     * @param {number} value Digit value 0-9.\r\n     * @param {boolean=} opt_highScore Whether drawing the high score.\r\n     */\r\n    draw(digitPos, value, opt_highScore) {\r\n      let sourceWidth = DistanceMeter.dimensions.WIDTH;\r\n      let sourceHeight = DistanceMeter.dimensions.HEIGHT;\r\n      let sourceX = DistanceMeter.dimensions.WIDTH * value;\r\n      let sourceY = 0;\r\n  \r\n      const targetX = digitPos * DistanceMeter.dimensions.DEST_WIDTH;\r\n      const targetY = this.y;\r\n      const targetWidth = DistanceMeter.dimensions.WIDTH;\r\n      const targetHeight = DistanceMeter.dimensions.HEIGHT;\r\n  \r\n      // For high DPI we 2x source values.\r\n      if (IS_HIDPI) {\r\n        sourceWidth *= 2;\r\n        sourceHeight *= 2;\r\n        sourceX *= 2;\r\n      }\r\n  \r\n      sourceX += this.spritePos.x;\r\n      sourceY += this.spritePos.y;\r\n  \r\n      this.canvasCtx.save();\r\n  \r\n      if (IS_RTL) {\r\n        if (opt_highScore) {\r\n          this.canvasCtx.translate(\r\n              this.canvasWidth -\r\n                  (DistanceMeter.dimensions.WIDTH * (this.maxScoreUnits + 3)),\r\n              this.y);\r\n        } else {\r\n          this.canvasCtx.translate(\r\n              this.canvasWidth - DistanceMeter.dimensions.WIDTH, this.y);\r\n        }\r\n        this.canvasCtx.scale(-1, 1);\r\n      } else {\r\n        const highScoreX =\r\n            this.x - (this.maxScoreUnits * 2) * DistanceMeter.dimensions.WIDTH;\r\n        if (opt_highScore) {\r\n          this.canvasCtx.translate(highScoreX, this.y);\r\n        } else {\r\n          this.canvasCtx.translate(this.x, this.y);\r\n        }\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(this.image, sourceX, sourceY,\r\n          sourceWidth, sourceHeight,\r\n          targetX, targetY,\r\n          targetWidth, targetHeight\r\n        );\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Covert pixel distance to a 'real' distance.\r\n     * @param {number} distance Pixel distance ran.\r\n     * @return {number} The 'real' distance ran.\r\n     */\r\n    getActualDistance(distance) {\r\n      return distance ? Math.round(distance * this.config.COEFFICIENT) : 0;\r\n    },\r\n  \r\n    /**\r\n     * Update the distance meter.\r\n     * @param {number} distance\r\n     * @param {number} deltaTime\r\n     * @return {boolean} Whether the acheivement sound fx should be played.\r\n     */\r\n    update(deltaTime, distance) {\r\n      let paint = true;\r\n      let playSound = false;\r\n  \r\n      if (!this.achievement) {\r\n        distance = this.getActualDistance(distance);\r\n        // Score has gone beyond the initial digit count.\r\n        if (distance > this.maxScore && this.maxScoreUnits ==\r\n          this.config.MAX_DISTANCE_UNITS) {\r\n          this.maxScoreUnits++;\r\n          this.maxScore = parseInt(this.maxScore + '9', 10);\r\n        } else {\r\n          this.distance = 0;\r\n        }\r\n  \r\n        if (distance > 0) {\r\n          // Achievement unlocked.\r\n          if (distance % this.config.ACHIEVEMENT_DISTANCE === 0) {\r\n            // Flash score and play sound.\r\n            this.achievement = true;\r\n            this.flashTimer = 0;\r\n            playSound = true;\r\n          }\r\n  \r\n          // Create a string representation of the distance with leading 0.\r\n          const distanceStr = (this.defaultString +\r\n              distance).substr(-this.maxScoreUnits);\r\n          this.digits = distanceStr.split('');\r\n        } else {\r\n          this.digits = this.defaultString.split('');\r\n        }\r\n      } else {\r\n        // Control flashing of the score on reaching acheivement.\r\n        if (this.flashIterations <= this.config.FLASH_ITERATIONS) {\r\n          this.flashTimer += deltaTime;\r\n  \r\n          if (this.flashTimer < this.config.FLASH_DURATION) {\r\n            paint = false;\r\n          } else if (this.flashTimer > this.config.FLASH_DURATION * 2) {\r\n            this.flashTimer = 0;\r\n            this.flashIterations++;\r\n          }\r\n        } else {\r\n          this.achievement = false;\r\n          this.flashIterations = 0;\r\n          this.flashTimer = 0;\r\n        }\r\n      }\r\n  \r\n      // Draw the digits if not flashing.\r\n      if (paint) {\r\n        for (let i = this.digits.length - 1; i >= 0; i--) {\r\n          this.draw(i, parseInt(this.digits[i], 10));\r\n        }\r\n      }\r\n  \r\n      this.drawHighScore();\r\n      return playSound;\r\n    },\r\n  \r\n    /**\r\n     * Draw the high score.\r\n     */\r\n    drawHighScore() {\r\n      if (parseInt(this.highScore, 10) > 0) {\r\n        this.canvasCtx.save();\r\n        this.canvasCtx.globalAlpha = .8;\r\n        for (let i = this.highScore.length - 1; i >= 0; i--) {\r\n          this.draw(i, parseInt(this.highScore[i], 10), true);\r\n        }\r\n        this.canvasCtx.restore();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Set the highscore as a array string.\r\n     * Position of char in the sprite: H - 10, I - 11.\r\n     * @param {number} distance Distance ran in pixels.\r\n     */\r\n    setHighScore(distance) {\r\n      distance = this.getActualDistance(distance);\r\n      const highScoreStr = (this.defaultString +\r\n          distance).substr(-this.maxScoreUnits);\r\n  \r\n      this.highScore = ['10', '11', ''].concat(highScoreStr.split(''));\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Whether a clicked is in the high score area.\r\n     * @param {Event} e Event object.\r\n     * @return {boolean} Whether the click was in the high score bounds.\r\n     */\r\n    hasClickedOnHighScore(e) {\r\n      let x = 0;\r\n      let y = 0;\r\n  \r\n      if (e.touches) {\r\n        // Bounds for touch differ from pointer.\r\n        const canvasBounds = this.canvas.getBoundingClientRect();\r\n        x = e.touches[0].clientX - canvasBounds.left;\r\n        y = e.touches[0].clientY - canvasBounds.top;\r\n      } else {\r\n        x = e.offsetX;\r\n        y = e.offsetY;\r\n      }\r\n  \r\n      this.highScoreBounds = this.getHighScoreBounds();\r\n      return x >= this.highScoreBounds.x && x <=\r\n          this.highScoreBounds.x + this.highScoreBounds.width &&\r\n          y >= this.highScoreBounds.y && y <=\r\n          this.highScoreBounds.y + this.highScoreBounds.height;\r\n    },\r\n  \r\n    /**\r\n     * Get the bounding box for the high score.\r\n     * @return {Object} Object with x, y, width and height properties.\r\n     */\r\n    getHighScoreBounds() {\r\n      return {\r\n        x: (this.x - (this.maxScoreUnits * 2) *\r\n            DistanceMeter.dimensions.WIDTH) -\r\n            DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING,\r\n        y: this.y,\r\n        width: DistanceMeter.dimensions.WIDTH * (this.highScore.length + 1) +\r\n            DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING,\r\n        height: DistanceMeter.dimensions.HEIGHT +\r\n            (DistanceMeter.config.HIGH_SCORE_HIT_AREA_PADDING * 2)\r\n      };\r\n    },\r\n  \r\n    /**\r\n     * Animate flashing the high score to indicate ready for resetting.\r\n     * The flashing stops following this.config.FLASH_ITERATIONS x 2 flashes.\r\n     */\r\n    flashHighScore() {\r\n      const now = getTimeStamp();\r\n      const deltaTime = now - (this.frameTimeStamp || now);\r\n      let paint = true;\r\n      this.frameTimeStamp = now;\r\n  \r\n      // Reached the max number of flashes.\r\n      if (this.flashIterations > this.config.FLASH_ITERATIONS * 2) {\r\n        this.cancelHighScoreFlashing();\r\n        return;\r\n      }\r\n  \r\n      this.flashTimer += deltaTime;\r\n  \r\n      if (this.flashTimer < this.config.FLASH_DURATION) {\r\n        paint = false;\r\n      } else if (this.flashTimer > this.config.FLASH_DURATION * 2) {\r\n        this.flashTimer = 0;\r\n        this.flashIterations++;\r\n      }\r\n  \r\n      if (paint) {\r\n        this.drawHighScore();\r\n      } else {\r\n        this.clearHighScoreBounds();\r\n      }\r\n      // Frame update.\r\n      this.flashingRafId =\r\n          requestAnimationFrame(this.flashHighScore.bind(this));\r\n    },\r\n  \r\n    /**\r\n     * Draw empty rectangle over high score.\r\n     */\r\n    clearHighScoreBounds() {\r\n      this.canvasCtx.save();\r\n      this.canvasCtx.fillStyle = '#fff';\r\n      this.canvasCtx.rect(this.highScoreBounds.x, this.highScoreBounds.y,\r\n          this.highScoreBounds.width, this.highScoreBounds.height);\r\n      this.canvasCtx.fill();\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Starts the flashing of the high score.\r\n     */\r\n    startHighScoreFlashing() {\r\n      this.highScoreFlashing = true;\r\n      this.flashHighScore();\r\n    },\r\n  \r\n    /**\r\n     * Whether high score is flashing.\r\n     * @return {boolean}\r\n     */\r\n    isHighScoreFlashing() {\r\n      return this.highScoreFlashing;\r\n    },\r\n  \r\n    /**\r\n     * Stop flashing the high score.\r\n     */\r\n    cancelHighScoreFlashing() {\r\n      if (this.flashingRafId) {\r\n        cancelAnimationFrame(this.flashingRafId);\r\n      }\r\n      this.flashIterations = 0;\r\n      this.flashTimer = 0;\r\n      this.highScoreFlashing = false;\r\n      this.clearHighScoreBounds();\r\n      this.drawHighScore();\r\n    },\r\n  \r\n    /**\r\n     * Clear the high score.\r\n     */\r\n    resetHighScore() {\r\n      this.setHighScore(0);\r\n      this.cancelHighScoreFlashing();\r\n    },\r\n  \r\n    /**\r\n     * Reset the distance meter back to '00000'.\r\n     */\r\n    reset() {\r\n      this.update(0, 0);\r\n      this.achievement = false;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Cloud background item.\r\n   * Similar to an obstacle object but without collision boxes.\r\n   * @param {HTMLCanvasElement} canvas Canvas element.\r\n   * @param {Object} spritePos Position of image in sprite.\r\n   * @param {number} containerWidth\r\n   * @constructor\r\n   */\r\n  function Cloud(canvas, spritePos, containerWidth) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n    this.spritePos = spritePos;\r\n    this.containerWidth = containerWidth;\r\n    this.xPos = containerWidth;\r\n    this.yPos = 0;\r\n    this.remove = false;\r\n    this.gap =\r\n        getRandomNum(Cloud.config.MIN_CLOUD_GAP, Cloud.config.MAX_CLOUD_GAP);\r\n  \r\n    this.init();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Cloud object config.\r\n   * @enum {number}\r\n   */\r\n  Cloud.config = {\r\n    HEIGHT: 14,\r\n    MAX_CLOUD_GAP: 400,\r\n    MAX_SKY_LEVEL: 30,\r\n    MIN_CLOUD_GAP: 100,\r\n    MIN_SKY_LEVEL: 71,\r\n    WIDTH: 46\r\n  };\r\n  \r\n  \r\n  Cloud.prototype = {\r\n    /**\r\n     * Initialise the cloud. Sets the Cloud height.\r\n     */\r\n    init() {\r\n      this.yPos = getRandomNum(Cloud.config.MAX_SKY_LEVEL,\r\n          Cloud.config.MIN_SKY_LEVEL);\r\n      this.draw();\r\n    },\r\n  \r\n    /**\r\n     * Draw the cloud.\r\n     */\r\n    draw() {\r\n      this.canvasCtx.save();\r\n      let sourceWidth = Cloud.config.WIDTH;\r\n      let sourceHeight = Cloud.config.HEIGHT;\r\n      const outputWidth = sourceWidth;\r\n      const outputHeight = sourceHeight;\r\n      if (IS_HIDPI) {\r\n        sourceWidth = sourceWidth * 2;\r\n        sourceHeight = sourceHeight * 2;\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(Runner.imageSprite, this.spritePos.x,\r\n          this.spritePos.y,\r\n          sourceWidth, sourceHeight,\r\n          this.xPos, this.yPos,\r\n          outputWidth, outputHeight);\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Update the cloud position.\r\n     * @param {number} speed\r\n     */\r\n    update(speed) {\r\n      if (!this.remove) {\r\n        this.xPos -= Math.ceil(speed);\r\n        this.draw();\r\n  \r\n        // Mark as removeable if no longer in the canvas.\r\n        if (!this.isVisible()) {\r\n          this.remove = true;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Check if the cloud is visible on the stage.\r\n     * @return {boolean}\r\n     */\r\n    isVisible() {\r\n      return this.xPos + Cloud.config.WIDTH > 0;\r\n    }\r\n  };\r\n  \r\n  \r\n  /**\r\n   * Background item.\r\n   * Similar to cloud, without random y position.\r\n   * @param {HTMLCanvasElement} canvas Canvas element.\r\n   * @param {Object} spritePos Position of image in sprite.\r\n   * @param {number} containerWidth\r\n   * @param {string} type Element type.\r\n   * @constructor\r\n   */\r\n  function BackgroundEl(canvas, spritePos, containerWidth, type) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n    this.spritePos = spritePos;\r\n    this.containerWidth = containerWidth;\r\n    this.xPos = containerWidth;\r\n    this.yPos = 0;\r\n    this.remove = false;\r\n    this.type = type;\r\n    this.gap =\r\n        getRandomNum(BackgroundEl.config.MIN_GAP, BackgroundEl.config.MAX_GAP);\r\n    this.animTimer = 0;\r\n    this.switchFrames = false;\r\n  \r\n    this.spriteConfig = {};\r\n    this.init();\r\n  }\r\n  \r\n  /**\r\n   * Background element object config.\r\n   * Real values assigned when game type changes.\r\n   * @enum {number}\r\n   */\r\n  BackgroundEl.config = {\r\n    MAX_BG_ELS: 0,\r\n    MAX_GAP: 0,\r\n    MIN_GAP: 0,\r\n    POS: 0,\r\n    SPEED: 0,\r\n    Y_POS: 0,\r\n    MS_PER_FRAME: 0  // only needed when BACKGROUND_EL.FIXED is true\r\n  };\r\n  \r\n  \r\n  BackgroundEl.prototype = {\r\n    /**\r\n     * Initialise the element setting the y position.\r\n     */\r\n    init() {\r\n      this.spriteConfig = Runner.spriteDefinition.BACKGROUND_EL[this.type];\r\n      if (this.spriteConfig.FIXED) {\r\n        this.xPos = this.spriteConfig.FIXED_X_POS;\r\n      }\r\n      this.yPos = BackgroundEl.config.Y_POS - this.spriteConfig.HEIGHT +\r\n          this.spriteConfig.OFFSET;\r\n      this.draw();\r\n    },\r\n  \r\n    /**\r\n     * Draw the element.\r\n     */\r\n    draw() {\r\n      this.canvasCtx.save();\r\n      let sourceWidth = this.spriteConfig.WIDTH;\r\n      let sourceHeight = this.spriteConfig.HEIGHT;\r\n      let sourceX = this.spriteConfig.X_POS;\r\n      const outputWidth = sourceWidth;\r\n      const outputHeight = sourceHeight;\r\n  \r\n      if (IS_HIDPI) {\r\n        sourceWidth *= 2;\r\n        sourceHeight *= 2;\r\n        sourceX *= 2;\r\n      }\r\n  \r\n      this.canvasCtx.drawImage(\r\n          Runner.imageSprite, sourceX, this.spritePos.y, sourceWidth,\r\n          sourceHeight, this.xPos, this.yPos, outputWidth, outputHeight);\r\n  \r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    /**\r\n     * Update the background element position.\r\n     * @param {number} speed\r\n     */\r\n    update(speed) {\r\n      if (!this.remove) {\r\n        if (this.spriteConfig.FIXED) {\r\n          this.animTimer += speed;\r\n          if (this.animTimer > BackgroundEl.config.MS_PER_FRAME) {\r\n            this.animTimer = 0;\r\n            this.switchFrames = !this.switchFrames;\r\n          }\r\n  \r\n          if (this.spriteConfig.FIXED_Y_POS_1 &&\r\n              this.spriteConfig.FIXED_Y_POS_2) {\r\n            this.yPos = this.switchFrames ? this.spriteConfig.FIXED_Y_POS_1 :\r\n                                            this.spriteConfig.FIXED_Y_POS_2;\r\n          }\r\n        } else {\r\n          // Fixed speed, regardless of actual game speed.\r\n          this.xPos -= BackgroundEl.config.SPEED;\r\n        }\r\n        this.draw();\r\n  \r\n        // Mark as removable if no longer in the canvas.\r\n        if (!this.isVisible()) {\r\n          this.remove = true;\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Check if the element is visible on the stage.\r\n     * @return {boolean}\r\n     */\r\n    isVisible() {\r\n      return this.xPos + this.spriteConfig.WIDTH > 0;\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Nightmode shows a moon and stars on the horizon.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {number} spritePos\r\n   * @param {number} containerWidth\r\n   * @constructor\r\n   */\r\n  function NightMode(canvas, spritePos, containerWidth) {\r\n    this.spritePos = spritePos;\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.xPos = containerWidth - 50;\r\n    this.yPos = 30;\r\n    this.currentPhase = 0;\r\n    this.opacity = 0;\r\n    this.containerWidth = containerWidth;\r\n    this.stars = [];\r\n    this.drawStars = false;\r\n    this.placeStars();\r\n  }\r\n  \r\n  /**\r\n   * @enum {number}\r\n   */\r\n  NightMode.config = {\r\n    FADE_SPEED: 0.035,\r\n    HEIGHT: 40,\r\n    MOON_SPEED: 0.25,\r\n    NUM_STARS: 2,\r\n    STAR_SIZE: 9,\r\n    STAR_SPEED: 0.3,\r\n    STAR_MAX_Y: 70,\r\n    WIDTH: 20\r\n  };\r\n  \r\n  NightMode.phases = [140, 120, 100, 60, 40, 20, 0];\r\n  \r\n  NightMode.prototype = {\r\n    /**\r\n     * Update moving moon, changing phases.\r\n     * @param {boolean} activated Whether night mode is activated.\r\n     */\r\n    update(activated) {\r\n      // Moon phase.\r\n      if (activated && this.opacity === 0) {\r\n        this.currentPhase++;\r\n  \r\n        if (this.currentPhase >= NightMode.phases.length) {\r\n          this.currentPhase = 0;\r\n        }\r\n      }\r\n  \r\n      // Fade in / out.\r\n      if (activated && (this.opacity < 1 || this.opacity === 0)) {\r\n        this.opacity += NightMode.config.FADE_SPEED;\r\n      } else if (this.opacity > 0) {\r\n        this.opacity -= NightMode.config.FADE_SPEED;\r\n      }\r\n  \r\n      // Set moon positioning.\r\n      if (this.opacity > 0) {\r\n        this.xPos = this.updateXPos(this.xPos, NightMode.config.MOON_SPEED);\r\n  \r\n        // Update stars.\r\n        if (this.drawStars) {\r\n          for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\r\n            this.stars[i].x =\r\n                this.updateXPos(this.stars[i].x, NightMode.config.STAR_SPEED);\r\n          }\r\n        }\r\n        this.draw();\r\n      } else {\r\n        this.opacity = 0;\r\n        this.placeStars();\r\n      }\r\n      this.drawStars = true;\r\n    },\r\n  \r\n    updateXPos(currentPos, speed) {\r\n      if (currentPos < -NightMode.config.WIDTH) {\r\n        currentPos = this.containerWidth;\r\n      } else {\r\n        currentPos -= speed;\r\n      }\r\n      return currentPos;\r\n    },\r\n  \r\n    draw() {\r\n      let moonSourceWidth = this.currentPhase === 3 ? NightMode.config.WIDTH * 2 :\r\n                                                      NightMode.config.WIDTH;\r\n      let moonSourceHeight = NightMode.config.HEIGHT;\r\n      let moonSourceX = this.spritePos.x + NightMode.phases[this.currentPhase];\r\n      const moonOutputWidth = moonSourceWidth;\r\n      let starSize = NightMode.config.STAR_SIZE;\r\n      let starSourceX = Runner_spriteDefinitionByType.original.LDPI.STAR.x;\r\n  \r\n      if (IS_HIDPI) {\r\n        moonSourceWidth *= 2;\r\n        moonSourceHeight *= 2;\r\n        moonSourceX = this.spritePos.x +\r\n            (NightMode.phases[this.currentPhase] * 2);\r\n        starSize *= 2;\r\n        starSourceX = Runner_spriteDefinitionByType.original.HDPI.STAR.x;\r\n      }\r\n  \r\n      this.canvasCtx.save();\r\n      this.canvasCtx.globalAlpha = this.opacity;\r\n  \r\n      // Stars.\r\n      if (this.drawStars) {\r\n        for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\r\n          this.canvasCtx.drawImage(\r\n              Runner.origImageSprite, starSourceX, this.stars[i].sourceY,\r\n              starSize, starSize, Math.round(this.stars[i].x), this.stars[i].y,\r\n              NightMode.config.STAR_SIZE, NightMode.config.STAR_SIZE);\r\n        }\r\n      }\r\n  \r\n      // Moon.\r\n      this.canvasCtx.drawImage(\r\n          Runner.origImageSprite, moonSourceX, this.spritePos.y, moonSourceWidth,\r\n          moonSourceHeight, Math.round(this.xPos), this.yPos, moonOutputWidth,\r\n          NightMode.config.HEIGHT);\r\n  \r\n      this.canvasCtx.globalAlpha = 1;\r\n      this.canvasCtx.restore();\r\n    },\r\n  \r\n    // Do star placement.\r\n    placeStars() {\r\n      const segmentSize = Math.round(this.containerWidth /\r\n          NightMode.config.NUM_STARS);\r\n  \r\n      for (let i = 0; i < NightMode.config.NUM_STARS; i++) {\r\n        this.stars[i] = {};\r\n        this.stars[i].x = getRandomNum(segmentSize * i, segmentSize * (i + 1));\r\n        this.stars[i].y = getRandomNum(0, NightMode.config.STAR_MAX_Y);\r\n  \r\n        if (IS_HIDPI) {\r\n          this.stars[i].sourceY =\r\n              Runner_spriteDefinitionByType.original.HDPI.STAR.y +\r\n              NightMode.config.STAR_SIZE * 2 * i;\r\n        } else {\r\n          this.stars[i].sourceY =\r\n              Runner_spriteDefinitionByType.original.LDPI.STAR.y +\r\n              NightMode.config.STAR_SIZE * i;\r\n        }\r\n      }\r\n    },\r\n  \r\n    reset() {\r\n      this.currentPhase = 0;\r\n      this.opacity = 0;\r\n      this.update(false);\r\n    }\r\n  \r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Horizon Line.\r\n   * Consists of two connecting lines. Randomly assigns a flat / bumpy horizon.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {Object} lineConfig Configuration object.\r\n   * @constructor\r\n   */\r\n  function HorizonLine(canvas, lineConfig) {\r\n    let sourceX = lineConfig.SOURCE_X;\r\n    let sourceY = lineConfig.SOURCE_Y;\r\n  \r\n    if (IS_HIDPI) {\r\n      sourceX *= 2;\r\n      sourceY *= 2;\r\n    }\r\n  \r\n    this.spritePos = {x: sourceX, y: sourceY};\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n    this.sourceDimensions = {};\r\n    this.dimensions = lineConfig;\r\n  \r\n    this.sourceXPos = [this.spritePos.x, this.spritePos.x +\r\n        this.dimensions.WIDTH];\r\n    this.xPos = [];\r\n    this.yPos = 0;\r\n    this.bumpThreshold = 0.5;\r\n  \r\n    this.setSourceDimensions(lineConfig);\r\n    this.draw();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Horizon line dimensions.\r\n   * @enum {number}\r\n   */\r\n  HorizonLine.dimensions = {\r\n    WIDTH: 600,\r\n    HEIGHT: 12,\r\n    YPOS: 127\r\n  };\r\n  \r\n  \r\n  HorizonLine.prototype = {\r\n    /**\r\n     * Set the source dimensions of the horizon line.\r\n     */\r\n    setSourceDimensions(newDimensions) {\r\n      for (const dimension in newDimensions) {\r\n        if (dimension !== 'SOURCE_X' && dimension !== 'SOURCE_Y') {\r\n          if (IS_HIDPI) {\r\n            if (dimension !== 'YPOS') {\r\n              this.sourceDimensions[dimension] = newDimensions[dimension] * 2;\r\n            }\r\n          } else {\r\n            this.sourceDimensions[dimension] = newDimensions[dimension];\r\n          }\r\n          this.dimensions[dimension] = newDimensions[dimension];\r\n        }\r\n      }\r\n  \r\n      this.xPos = [0, newDimensions.WIDTH];\r\n      this.yPos = newDimensions.YPOS;\r\n    },\r\n  \r\n    /**\r\n     * Return the crop x position of a type.\r\n     */\r\n    getRandomType() {\r\n      return Math.random() > this.bumpThreshold ? this.dimensions.WIDTH : 0;\r\n    },\r\n  \r\n    /**\r\n     * Draw the horizon line.\r\n     */\r\n    draw() {\r\n      this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[0],\r\n          this.spritePos.y,\r\n          this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\r\n          this.xPos[0], this.yPos,\r\n          this.dimensions.WIDTH, this.dimensions.HEIGHT);\r\n  \r\n      this.canvasCtx.drawImage(Runner.imageSprite, this.sourceXPos[1],\r\n          this.spritePos.y,\r\n          this.sourceDimensions.WIDTH, this.sourceDimensions.HEIGHT,\r\n          this.xPos[1], this.yPos,\r\n          this.dimensions.WIDTH, this.dimensions.HEIGHT);\r\n    },\r\n  \r\n    /**\r\n     * Update the x position of an indivdual piece of the line.\r\n     * @param {number} pos Line position.\r\n     * @param {number} increment\r\n     */\r\n    updateXPos(pos, increment) {\r\n      const line1 = pos;\r\n      const line2 = pos === 0 ? 1 : 0;\r\n  \r\n      this.xPos[line1] -= increment;\r\n      this.xPos[line2] = this.xPos[line1] + this.dimensions.WIDTH;\r\n  \r\n      if (this.xPos[line1] <= -this.dimensions.WIDTH) {\r\n        this.xPos[line1] += this.dimensions.WIDTH * 2;\r\n        this.xPos[line2] = this.xPos[line1] - this.dimensions.WIDTH;\r\n        this.sourceXPos[line1] = this.getRandomType() + this.spritePos.x;\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update the horizon line.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    update(deltaTime, speed) {\r\n      const increment = Math.floor(speed * (FPS / 1000) * deltaTime);\r\n  \r\n      if (this.xPos[0] <= 0) {\r\n        this.updateXPos(0, increment);\r\n      } else {\r\n        this.updateXPos(1, increment);\r\n      }\r\n      this.draw();\r\n    },\r\n  \r\n    /**\r\n     * Reset horizon to the starting position.\r\n     */\r\n    reset() {\r\n      this.xPos[0] = 0;\r\n      this.xPos[1] = this.dimensions.WIDTH;\r\n    }\r\n  };\r\n  \r\n  \r\n  //******************************************************************************\r\n  \r\n  /**\r\n   * Horizon background class.\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {Object} spritePos Sprite positioning.\r\n   * @param {Object} dimensions Canvas dimensions.\r\n   * @param {number} gapCoefficient\r\n   * @constructor\r\n   */\r\n  function Horizon(canvas, spritePos, dimensions, gapCoefficient) {\r\n    this.canvas = canvas;\r\n    this.canvasCtx =\r\n        /** @type {CanvasRenderingContext2D} */ (this.canvas.getContext('2d'));\r\n    this.config = Horizon.config;\r\n    this.dimensions = dimensions;\r\n    this.gapCoefficient = gapCoefficient;\r\n    this.obstacles = [];\r\n    this.obstacleHistory = [];\r\n    this.horizonOffsets = [0, 0];\r\n    this.cloudFrequency = this.config.CLOUD_FREQUENCY;\r\n    this.spritePos = spritePos;\r\n    this.nightMode = null;\r\n    this.altGameModeActive = false;\r\n  \r\n    // Cloud\r\n    this.clouds = [];\r\n    this.cloudSpeed = this.config.BG_CLOUD_SPEED;\r\n  \r\n    // Background elements\r\n    this.backgroundEls = [];\r\n    this.lastEl = null;\r\n    this.backgroundSpeed = this.config.BG_CLOUD_SPEED;\r\n  \r\n    // Horizon\r\n    this.horizonLine = null;\r\n    this.horizonLines = [];\r\n    this.init();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * Horizon config.\r\n   * @enum {number}\r\n   */\r\n  Horizon.config = {\r\n    BG_CLOUD_SPEED: 0.2,\r\n    BUMPY_THRESHOLD: .3,\r\n    CLOUD_FREQUENCY: .5,\r\n    HORIZON_HEIGHT: 16,\r\n    MAX_CLOUDS: 6\r\n  };\r\n  \r\n  \r\n  Horizon.prototype = {\r\n    /**\r\n     * Initialise the horizon. Just add the line and a cloud. No obstacles.\r\n     */\r\n    init() {\r\n      Obstacle.types = Runner_spriteDefinitionByType.original.OBSTACLES;\r\n      // Obstacle.types[0].yPos = 100;\r\n      //       Obstacle.types[0].xPos = 350;  //@jsikka\r\n      //       console.log(Obstacle.types[0].yPos);\r\n      //       console.log(Obstacle.types[0].xPos);\r\n      this.addCloud();\r\n      // Multiple Horizon lines\r\n      for (let i = 0; i < Runner.spriteDefinition.LINES.length; i++) {\r\n        this.horizonLines.push(\r\n            new HorizonLine(this.canvas, Runner.spriteDefinition.LINES[i]));\r\n      }\r\n  \r\n      this.nightMode = new NightMode(this.canvas, this.spritePos.MOON,\r\n          this.dimensions.WIDTH);\r\n    },\r\n  \r\n    /**\r\n     * Update obstacle definitions based on the speed of the game.\r\n     */\r\n    adjustObstacleSpeed: function() {\r\n      for (let i = 0; i < Obstacle.types.length; i++) {\r\n        if (Runner.slowDown) {\r\n          Obstacle.types[i].multipleSpeed = Obstacle.types[i].multipleSpeed / 2;\r\n          Obstacle.types[i].minGap *= 1.5;\r\n          Obstacle.types[i].minSpeed = Obstacle.types[i].minSpeed / 2;\r\n  \r\n          // Convert variable y position obstacles to fixed.\r\n          if (typeof (Obstacle.types[i].yPos) == 'object') {\r\n            Obstacle.types[i].yPos = Obstacle.types[i].yPos[0];\r\n            // Obstacle.types[i].xPos = 350;  //@jsikka\r\n            // console.log(Obstacle.types[i].yPos);\r\n            // console.log(Obstacle.types[i].xPos);\r\n            Obstacle.types[i].yPosMobile = Obstacle.types[i].yPos[0];\r\n          }\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update sprites to correspond to change in sprite sheet.\r\n     * @param {number} spritePos\r\n     */\r\n    enableAltGameMode: function(spritePos) {\r\n      // Clear existing horizon objects.\r\n      this.clouds = [];\r\n      this.backgroundEls = [];\r\n  \r\n      this.altGameModeActive = true;\r\n      this.spritePos = spritePos;\r\n  \r\n      Obstacle.types = Runner.spriteDefinition.OBSTACLES;\r\n      this.adjustObstacleSpeed();\r\n  \r\n      Obstacle.MAX_GAP_COEFFICIENT = Runner.spriteDefinition.MAX_GAP_COEFFICIENT;\r\n      Obstacle.MAX_OBSTACLE_LENGTH = Runner.spriteDefinition.MAX_OBSTACLE_LENGTH;\r\n  \r\n      BackgroundEl.config = Runner.spriteDefinition.BACKGROUND_EL_CONFIG;\r\n  \r\n      this.horizonLines = [];\r\n      for (let i = 0; i < Runner.spriteDefinition.LINES.length; i++) {\r\n        this.horizonLines.push(\r\n            new HorizonLine(this.canvas, Runner.spriteDefinition.LINES[i]));\r\n      }\r\n      this.reset();\r\n    },\r\n  \r\n    /**\r\n     * @param {number} deltaTime\r\n     * @param {number} currentSpeed\r\n     * @param {boolean} updateObstacles Used as an override to prevent\r\n     *     the obstacles from being updated / added. This happens in the\r\n     *     ease in section.\r\n     * @param {boolean} showNightMode Night mode activated.\r\n     */\r\n    update(deltaTime, currentSpeed, updateObstacles, showNightMode) {\r\n      // console.log(\"Here?\");\r\n      this.runningTime += deltaTime;\r\n  \r\n      if (this.altGameModeActive) {\r\n        this.updateBackgroundEls(deltaTime, currentSpeed);\r\n      }\r\n  \r\n      for (let i = 0; i < this.horizonLines.length; i++) {\r\n        this.horizonLines[i].update(deltaTime, currentSpeed);\r\n      }\r\n  \r\n      if (!this.altGameModeActive || Runner.spriteDefinition.HAS_CLOUDS) {\r\n        this.nightMode.update(showNightMode);\r\n        this.updateClouds(deltaTime, currentSpeed);\r\n      }\r\n  \r\n      if (updateObstacles) {\r\n        this.updateObstacles(deltaTime, currentSpeed);\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update background element positions. Also handles creating new elements.\r\n     * @param {number} elSpeed\r\n     * @param {Array<Object>} bgElArray\r\n     * @param {number} maxBgEl\r\n     * @param {Function} bgElAddFunction\r\n     * @param {number} frequency\r\n     */\r\n    updateBackgroundEl(elSpeed, bgElArray, maxBgEl, bgElAddFunction, frequency) {\r\n      const numElements = bgElArray.length;\r\n  \r\n      if (numElements) {\r\n        for (let i = numElements - 1; i >= 0; i--) {\r\n          bgElArray[i].update(elSpeed);\r\n        }\r\n  \r\n        const lastEl = bgElArray[numElements - 1];\r\n  \r\n        // Check for adding a new element.\r\n        if (numElements < maxBgEl &&\r\n            (this.dimensions.WIDTH - lastEl.xPos) > lastEl.gap &&\r\n            frequency > Math.random()) {\r\n          bgElAddFunction();\r\n        }\r\n      } else {\r\n        bgElAddFunction();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Update the cloud positions.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    updateClouds(deltaTime, speed) {\r\n      const elSpeed = this.cloudSpeed / 1000 * deltaTime * speed;\r\n      this.updateBackgroundEl(\r\n          elSpeed, this.clouds, this.config.MAX_CLOUDS, this.addCloud.bind(this),\r\n          this.cloudFrequency);\r\n  \r\n      // Remove expired elements.\r\n      this.clouds = this.clouds.filter((obj) => !obj.remove);\r\n    },\r\n  \r\n    /**\r\n     * Update the background element positions.\r\n     * @param {number} deltaTime\r\n     * @param {number} speed\r\n     */\r\n    updateBackgroundEls(deltaTime, speed) {\r\n      this.updateBackgroundEl(\r\n          deltaTime, this.backgroundEls, BackgroundEl.config.MAX_BG_ELS,\r\n          this.addBackgroundEl.bind(this), this.cloudFrequency);\r\n  \r\n      // Remove expired elements.\r\n      this.backgroundEls = this.backgroundEls.filter((obj) => !obj.remove);\r\n    },\r\n  \r\n    /**\r\n     * Update the obstacle positions.\r\n     * @param {number} deltaTime\r\n     * @param {number} currentSpeed\r\n     */\r\n    updateObstacles(deltaTime, currentSpeed) {\r\n      // console.log(this.obstacles);\r\n      if(this.obstacles.length > 0 ){\r\n      this.obstacles[0].typeConfig.xPos = 300;\r\n      this.obstacles[0].typeConfig.yPos = 80;}\r\n      const updatedObstacles = this.obstacles.slice(0);\r\n    \r\n      for (let i = 0; i < this.obstacles.length; i++) {\r\n        const obstacle = this.obstacles[i];\r\n        obstacle.update(deltaTime, currentSpeed);\r\n  \r\n        // Clean up existing obstacles.\r\n        if (obstacle.remove) {\r\n          updatedObstacles.shift();\r\n        }\r\n      }\r\n      this.obstacles = updatedObstacles;\r\n  \r\n      if (this.obstacles.length > 0) {\r\n        const lastObstacle = this.obstacles[this.obstacles.length - 1];\r\n  \r\n        if (lastObstacle && !lastObstacle.followingObstacleCreated &&\r\n            lastObstacle.isVisible() &&\r\n            (lastObstacle.xPos + lastObstacle.width + lastObstacle.gap) <\r\n            this.dimensions.WIDTH) {\r\n          this.addNewObstacle(currentSpeed);\r\n          lastObstacle.followingObstacleCreated = true;\r\n        }\r\n      } else {\r\n        // Create new obstacles.\r\n        this.addNewObstacle(currentSpeed);\r\n      }\r\n    },\r\n  \r\n    removeFirstObstacle() {\r\n      this.obstacles.shift();\r\n    },\r\n  \r\n    /**\r\n     * Add a new obstacle.\r\n     * @param {number} currentSpeed\r\n     */\r\n    addNewObstacle(currentSpeed) {\r\n      const obstacleCount =\r\n          Runner.isAltGameModeEnabled() && !this.altGameModeActive ||\r\n              this.altGameModeActive ?\r\n          Obstacle.types.length - 1 :\r\n          Obstacle.types.length - 2;\r\n      const obstacleTypeIndex =\r\n          obstacleCount > 0 ? getRandomNum(0, obstacleCount) : 0;\r\n      const obstacleType = Obstacle.types[obstacleTypeIndex];\r\n  \r\n      // Check for multiples of the same type of obstacle.\r\n      // Also check obstacle is available at current speed.\r\n      if ((obstacleCount > 0 && this.duplicateObstacleCheck(obstacleType.type)) ||\r\n          currentSpeed < obstacleType.minSpeed) {\r\n        this.addNewObstacle(currentSpeed);\r\n      } else {\r\n        const obstacleSpritePos = this.spritePos[obstacleType.type];\r\n  \r\n        this.obstacles.push(new Obstacle(\r\n            this.canvasCtx, obstacleType, obstacleSpritePos, this.dimensions,\r\n            this.gapCoefficient, currentSpeed, obstacleType.width,\r\n            this.altGameModeActive));\r\n  \r\n        this.obstacleHistory.unshift(obstacleType.type);\r\n  \r\n        if (this.obstacleHistory.length > 1) {\r\n          this.obstacleHistory.splice(Runner.config.MAX_OBSTACLE_DUPLICATION);\r\n        }\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Returns whether the previous two obstacles are the same as the next one.\r\n     * Maximum duplication is set in config value MAX_OBSTACLE_DUPLICATION.\r\n     * @return {boolean}\r\n     */\r\n    duplicateObstacleCheck(nextObstacleType) {\r\n      let duplicateCount = 0;\r\n  \r\n      for (let i = 0; i < this.obstacleHistory.length; i++) {\r\n        duplicateCount =\r\n            this.obstacleHistory[i] === nextObstacleType ? duplicateCount + 1 : 0;\r\n      }\r\n      return duplicateCount >= Runner.config.MAX_OBSTACLE_DUPLICATION;\r\n    },\r\n  \r\n    /**\r\n     * Reset the horizon layer.\r\n     * Remove existing obstacles and reposition the horizon line.\r\n     */\r\n    reset() {\r\n      this.obstacles = [];\r\n      for (let l = 0; l < this.horizonLines.length; l++) {\r\n        this.horizonLines[l].reset();\r\n      }\r\n  \r\n      this.nightMode.reset();\r\n    },\r\n  \r\n    /**\r\n     * Update the canvas width and scaling.\r\n     * @param {number} width Canvas width.\r\n     * @param {number} height Canvas height.\r\n     */\r\n    resize(width, height) {\r\n      this.canvas.width = width;\r\n      this.canvas.height = height;\r\n    },\r\n  \r\n    /**\r\n     * Add a new cloud to the horizon.\r\n     */\r\n    addCloud() {\r\n      this.clouds.push(new Cloud(this.canvas, this.spritePos.CLOUD,\r\n          this.dimensions.WIDTH));\r\n    },\r\n  \r\n    /**\r\n     * Add a random background element to the horizon.\r\n     */\r\n    addBackgroundEl() {\r\n      const backgroundElTypes =\r\n          Object.keys(Runner.spriteDefinition.BACKGROUND_EL);\r\n  \r\n      if (backgroundElTypes.length > 0) {\r\n        let index = getRandomNum(0, backgroundElTypes.length - 1);\r\n        let type = backgroundElTypes[index];\r\n  \r\n        // Add variation if available.\r\n        while (type == this.lastEl && backgroundElTypes.length > 1) {\r\n          index = getRandomNum(0, backgroundElTypes.length - 1);\r\n          type = backgroundElTypes[index];\r\n        }\r\n  \r\n        this.lastEl = type;\r\n        this.backgroundEls.push(new BackgroundEl(\r\n            this.canvas, this.spritePos.BACKGROUND_EL, this.dimensions.WIDTH,\r\n            type));\r\n      }\r\n    }\r\n  };","// Copyright (c) 2021 The Chromium Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style license that can be\r\n// found in the LICENSE file.\r\n\r\nimport {CollisionBox} from \"./offline\";\r\n\r\n/* @const\r\n * Add matching sprite definition and config to Runner.spriteDefinitionByType.\r\n */\r\nconst GAME_TYPE = [];\r\n\r\n/**\r\n * Obstacle definitions.\r\n * minGap: minimum pixel space between obstacles.\r\n * multipleSpeed: Speed at which multiples are allowed.\r\n * speedOffset: speed faster / slower than the horizon.\r\n * minSpeed: Minimum speed which the obstacle can make an appearance.\r\n *\r\n * @typedef {{\r\n *   type: string,\r\n *   width: number,\r\n *   height: number,\r\n *   yPos: number,\r\n *   multipleSpeed: number,\r\n *   minGap: number,\r\n *   minSpeed: number,\r\n *   collisionBoxes: Array<CollisionBox>,\r\n * }}\r\n */\r\nlet ObstacleType;\r\n\r\n/**\r\n * T-Rex runner sprite definitions.\r\n */\r\nexport const Runner_spriteDefinitionByType = {\r\n  original: {\r\n    LDPI: {\r\n      BACKGROUND_EL: {x: 86, y: 2},\r\n      CACTUS_LARGE: {x: 332, y: 2},\r\n      CACTUS_SMALL: {x: 228, y: 2},\r\n      OBSTACLE_2: {x: 332, y: 2},\r\n      OBSTACLE: {x: 228, y: 2},\r\n      CLOUD: {x: 86, y: 2},\r\n      HORIZON: {x: 2, y: 54},\r\n      MOON: {x: 484, y: 2},\r\n      PTERODACTYL: {x: 134, y: 2},\r\n      RESTART: {x: 2, y: 68},\r\n      TEXT_SPRITE: {x: 655, y: 2},\r\n      TREX: {x: 848, y: 2},\r\n      STAR: {x: 645, y: 2},\r\n      COLLECTABLE: {x: 2, y: 2},\r\n      ALT_GAME_END: {x: 121, y: 2}\r\n    },\r\n    HDPI: {\r\n      BACKGROUND_EL: {x: 166, y: 2},\r\n      CACTUS_LARGE: {x: 652, y: 2},\r\n      CACTUS_SMALL: {x: 446, y: 2},\r\n      OBSTACLE_2: {x: 652, y: 2},\r\n      OBSTACLE: {x: 446, y: 2},\r\n      CLOUD: {x: 166, y: 2},\r\n      HORIZON: {x: 2, y: 104},\r\n      MOON: {x: 954, y: 2},\r\n      PTERODACTYL: {x: 260, y: 2},\r\n      RESTART: {x: 2, y: 130},\r\n      TEXT_SPRITE: {x: 1294, y: 2},\r\n      TREX: {x: 1678, y: 2},\r\n      STAR: {x: 1276, y: 2},\r\n      COLLECTABLE: {x: 4, y: 4},\r\n      ALT_GAME_END: {x: 242, y: 4}\r\n    },\r\n    MAX_GAP_COEFFICIENT: 1.5,\r\n    MAX_OBSTACLE_LENGTH: 3,\r\n    HAS_CLOUDS: 1,\r\n    BOTTOM_PAD: 10,\r\n    TREX: {\r\n      WAITING_1: {x: 44, w: 44, h: 47, xOffset: 0},\r\n      WAITING_2: {x: 0, w: 44, h: 47, xOffset: 0},\r\n      RUNNING_1: {x: 88, w: 44, h: 47, xOffset: 0},\r\n      RUNNING_2: {x: 132, w: 44, h: 47, xOffset: 0},\r\n      JUMPING: {x: 0, w: 44, h: 47, xOffset: 0},\r\n      CRASHED: {x: 220, w: 44, h: 47, xOffset: 0},\r\n      COLLISION_BOXES: [\r\n        new CollisionBox(22, 0, 17, 16), new CollisionBox(1, 18, 30, 9),\r\n        new CollisionBox(10, 35, 14, 8), new CollisionBox(1, 24, 29, 5),\r\n        new CollisionBox(5, 30, 21, 4), new CollisionBox(9, 34, 15, 4)\r\n      ]\r\n    },\r\n    /** @type {Array<ObstacleType>} */\r\n    OBSTACLES: [\r\n      {\r\n        type: 'CACTUS_SMALL',\r\n        width: 17,\r\n        height: 35,\r\n        yPos: 105,\r\n        multipleSpeed: 4,\r\n        minGap: 120,\r\n        minSpeed: 0,\r\n        collisionBoxes: [\r\n          new CollisionBox(0, 7, 5, 27), new CollisionBox(4, 0, 6, 34),\r\n          new CollisionBox(10, 4, 7, 14)\r\n        ]\r\n      },\r\n      {\r\n        type: 'CACTUS_LARGE',\r\n        width: 25,\r\n        height: 50,\r\n        yPos: 90,\r\n        multipleSpeed: 7,\r\n        minGap: 120,\r\n        minSpeed: 0,\r\n        collisionBoxes: [\r\n          new CollisionBox(0, 12, 7, 38), new CollisionBox(8, 0, 7, 49),\r\n          new CollisionBox(13, 10, 10, 38)\r\n        ]\r\n      },\r\n      {\r\n        type: 'PTERODACTYL',\r\n        width: 46,\r\n        height: 40,\r\n        yPos: [100, 75, 50],    // Variable height.\r\n        yPosMobile: [100, 50],  // Variable height mobile.\r\n        multipleSpeed: 999,\r\n        minSpeed: 8.5,\r\n        minGap: 150,\r\n        collisionBoxes: [\r\n          new CollisionBox(15, 15, 16, 5), new CollisionBox(18, 21, 24, 6),\r\n          new CollisionBox(2, 14, 4, 3), new CollisionBox(6, 10, 4, 7),\r\n          new CollisionBox(10, 8, 6, 9)\r\n        ],\r\n        numFrames: 2,\r\n        frameRate: 1000 / 6,\r\n        speedOffset: .8\r\n      }\r\n    ],\r\n    BACKGROUND_EL: {\r\n      'CLOUD': {\r\n        HEIGHT: 14,\r\n        MAX_CLOUD_GAP: 400,\r\n        MAX_SKY_LEVEL: 30,\r\n        MIN_CLOUD_GAP: 100,\r\n        MIN_SKY_LEVEL: 71,\r\n        OFFSET: 4,\r\n        WIDTH: 46,\r\n        X_POS: 1,\r\n        Y_POS: 120\r\n      }\r\n    },\r\n    BACKGROUND_EL_CONFIG: {\r\n      MAX_BG_ELS: 1,\r\n      MAX_GAP: 400,\r\n      MIN_GAP: 100,\r\n      POS: 0,\r\n      SPEED: 0.5,\r\n      Y_POS: 125\r\n    },\r\n    LINES: [\r\n      {SOURCE_X: 2, SOURCE_Y: 52, WIDTH: 600, HEIGHT: 12, YPOS: 127},\r\n    ]\r\n  }\r\n};"]}