"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var events_1 = __importDefault(require("events"));
var hw_transport_node_hid_noevents_1 = require("@ledgerhq/hw-transport-node-hid-noevents");
var logs_1 = require("@ledgerhq/logs");
var usb_1 = __importDefault(require("usb"));
var debounce_1 = __importDefault(require("lodash/debounce"));
exports["default"] = (function (delay, listenDevicesPollingSkip) {
    var events = new events_1["default"]();
    events.setMaxListeners(0);
    var listDevices = hw_transport_node_hid_noevents_1.getDevices();
    var flatDevice = function (d) { return d.path; };
    var getFlatDevices = function () { return __spreadArray([], __read(new Set(hw_transport_node_hid_noevents_1.getDevices().map(function (d) { return flatDevice(d); })))); };
    var getDeviceByPaths = function (paths) {
        return listDevices.find(function (d) { return paths.includes(flatDevice(d)); });
    };
    var lastDevices = getFlatDevices();
    var poll = function () {
        if (!listenDevicesPollingSkip()) {
            logs_1.log("hid-listen", "Polling for added or removed devices");
            var changeFound = false;
            var currentDevices_1 = getFlatDevices();
            var newDevices = currentDevices_1.filter(function (d) { return !lastDevices.includes(d); });
            if (newDevices.length > 0) {
                logs_1.log("hid-listen", "New device found:", newDevices);
                listDevices = hw_transport_node_hid_noevents_1.getDevices();
                events.emit("add", getDeviceByPaths(newDevices));
                changeFound = true;
            }
            else {
                logs_1.log("hid-listen", "No new device found");
            }
            var removeDevices_1 = lastDevices.filter(function (d) { return !currentDevices_1.includes(d); });
            if (removeDevices_1.length > 0) {
                logs_1.log("hid-listen", "Removed device found:", removeDevices_1);
                events.emit("remove", getDeviceByPaths(removeDevices_1));
                listDevices = listDevices.filter(function (d) { return !removeDevices_1.includes(flatDevice(d)); });
                changeFound = true;
            }
            else {
                logs_1.log("hid-listen", "No removed device found");
            }
            if (changeFound) {
                lastDevices = currentDevices_1;
            }
        }
        else {
            logs_1.log("hid-listen", "Polling skipped, re-debouncing");
            debouncedPoll();
        }
    };
    var debouncedPoll = debounce_1["default"](poll, delay);
    var attachDetected = function (device) {
        logs_1.log("hid-listen", "Device add detected:", device);
        debouncedPoll();
    };
    usb_1["default"].on("attach", attachDetected);
    logs_1.log("hid-listen", "attach listener added");
    var detachDetected = function (device) {
        logs_1.log("hid-listen", "Device removal detected:", device);
        debouncedPoll();
    };
    usb_1["default"].on("detach", detachDetected);
    logs_1.log("hid-listen", "detach listener added");
    return {
        stop: function () {
            logs_1.log("hid-listen", "Stop received, removing listeners and cancelling pending debounced polls");
            debouncedPoll.cancel();
            usb_1["default"].removeListener("attach", attachDetected);
            usb_1["default"].removeListener("detach", detachDetected);
        },
        events: events
    };
});
//# sourceMappingURL=listenDevices.js.map